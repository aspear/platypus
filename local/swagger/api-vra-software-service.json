{
  "swagger" : "2.0",
  "info" : {
    "description" : "# Software Service API Specification\n\n## What Is the Software Service REST API?\n\nThe software service:\n\n* Triggers the execution lifecycle of software\ncomponents using the software agent.\n\n* Is responsible for registering all software\nagents for use with the software service.\n\n* Manages the creation, modification and deletion \nof software components.\n\n## Typical Use Cases\n\nYou can use the software service API to:\n\n* Automate adding software components to the system.\n\n* Create and trigger software components run by\n  the software agent independently of the blueprint.\n\nThe internal API is used to implement the software agent.  There are\nadditional prerequisites for implementing a software agent other than the\nAPI calls:  access to EBS and to the contents of the  `appd.properties` file.\n\n## Key Concepts\n\n### Software Agent\n\nSoftware components lifecycle task scripts are executed by the\nsoftware agent.  This agent is configured using the contents of the\n`appd.properties` file, which is delivered to the VM during \nprovisioning of the VM.  The properties required by each script are\ndelivered to the software agent and transformed for use by the\nscript.\n\n### Node\n\nAn internal type representing a machine before it is created.\nThe included metadata makes it possible for the contents of the\n`appd.properties file` for the software agent to be specified before the\nmachine is created.  When the software agent registers with the\nsoftware service, the node and the machine are associated.\n\n### ScriptType\n\nDescribes the kinds of scripts the software agent will execute.  The\ncomplexity of the information allows the software component script to\nbe written without knowing how input properties and computed\nproperties are provided and collected from the script execution\nenvironment.  The software agent uses this information in order to run\nthe software component script in the proper context.\n\n### SoftwareComponentType\n\nSpecifies the software component scripts for each supported lifecycle\ntask script.  It also specifies the properties, or schema, used and\ncomputed by the  the contained software component lifecycle task\nscripts.\n\n### SoftwareResource\n\nSoftware component lifecycle tasks can be collected into groups in\norder for each lifecycle task script to be run in sequence.  For\nexample, a provision request results in a single SoftwareResource for\neach software component.  Each provision request causes the combined\nINSTALL, CONFIGURE, START lifecycle tasks to be included in a single\nSoftwareResource.\n\n### TaskDescriptor\n\nDescribes the software component lifecycle tasks available to a\nsoftware component for eventual execution by the software agent.\n\n## Additional Information\n\nFor  more detailed information on using the API, refer to the  *vRA Programming Guide*.\n",
    "version" : "7.6.0-SNAPSHOT",
    "title" : "Software Service API"
  },
  "basePath" : "/software-service",
  "tags" : [ {
    "name" : "composition-contract"
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/api/composition/requests/{requestId}/statusdetails" : {
      "get" : {
        "tags" : [ "composition-contract" ],
        "summary" : "Get Composition Service Request Status",
        "description" : "Get status of a software component type",
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "The id of the composition request.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/componentRequestStatusDetails"
            }
          },
          "201" : {
            "description" : "Success - return component request status details."
          },
          "403" : {
            "description" : "Forbidden."
          },
          "404" : {
            "description" : "Composition request not found."
          }
        }
      }
    },
    "/api/data-service/data/{classId}/{id}" : {
      "post" : {
        "summary" : "Get a set of data for the specified object",
        "description" : "Get a set of data for the specified object.",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The identifier of the type of object to get data for.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The unique id of the object to get data for. This should be sufficient to identify the object given classId.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DynamicDataRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the data",
            "schema" : {
              "$ref" : "#/definitions/DynamicDataResponse"
            }
          }
        }
      }
    },
    "/api/data-service/list/{classId}/default" : {
      "post" : {
        "summary" : "Retrieves the list of possible values for a given type of object",
        "description" : "Retrieves the list of possible values for a given type of object.",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The class of object.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/elementValuesRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the data",
            "schema" : {
              "$ref" : "#/definitions/elementValues"
            }
          }
        }
      }
    },
    "/api/data-service/list/{classId}/types/{typeFilter}" : {
      "post" : {
        "summary" : "Retrieves the list of possible values for a given type of object",
        "description" : "Retrieves the list of possible values for a given type of object.",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The class of object.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "typeFilter",
          "in" : "path",
          "description" : "A type filter defining the specific subtype that owns the field.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/elementValuesRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the data",
            "schema" : {
              "$ref" : "#/definitions/elementValues"
            }
          }
        }
      }
    },
    "/api/data-service/schema/{classId}/default" : {
      "get" : {
        "summary" : "Get the schema for the specified object class",
        "description" : "Get the schema for the specified object class.",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The class of object to retrieve the schema for.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the data",
            "schema" : {
              "$ref" : "#/definitions/Schema"
            }
          }
        }
      }
    },
    "/api/data-service/schema/{classId}/default/update" : {
      "post" : {
        "summary" : "Get the state of a field in the specified schema",
        "description" : "Get the state of a field in the specified schema.",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The class of object.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/batchElementUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the data",
            "schema" : {
              "$ref" : "#/definitions/formUpdateResponse"
            }
          }
        }
      }
    },
    "/api/data-service/schema/{classId}/default/{fieldId}/values" : {
      "post" : {
        "summary" : "Get the permissible values of a field in the specified schema",
        "description" : "Get the permissible values of a field in the specified schema.",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The class of object.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fieldId",
          "in" : "path",
          "description" : "The id of a field on the schema of the specified object class.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/elementValuesRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the data",
            "schema" : {
              "$ref" : "#/definitions/elementValues"
            }
          }
        }
      }
    },
    "/api/data-service/schema/{classId}/instances/{id}" : {
      "get" : {
        "summary" : "Get the schema for the specified object",
        "description" : "This returns the schema of a particular type adjusted to the state of a specific instance..",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The class of object to retrieve the schema for.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of an instance of the object.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the data",
            "schema" : {
              "$ref" : "#/definitions/Schema"
            }
          }
        }
      }
    },
    "/api/data-service/schema/{classId}/instances/{id}/update" : {
      "post" : {
        "summary" : "Get the state of a field in the specified schema",
        "description" : "Get the state of a field in the specified schema.",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The class of object.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of an instance of the object.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/batchElementUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the data",
            "schema" : {
              "$ref" : "#/definitions/formUpdateResponse"
            }
          }
        }
      }
    },
    "/api/data-service/schema/{classId}/instances/{id}/{fieldId}/values" : {
      "post" : {
        "summary" : "Get the permissible values of a field in the specified schema",
        "description" : "Get the permissible values of a field in the specified schema.",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The class of object.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of an instance of the object.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fieldId",
          "in" : "path",
          "description" : "The id of a field on the schema of the specified object class.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/elementValuesRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the data",
            "schema" : {
              "$ref" : "#/definitions/elementValues"
            }
          }
        }
      }
    },
    "/api/data-service/schema/{classId}/types/{typeFilter}" : {
      "get" : {
        "summary" : "Get the schema for the specified object type",
        "description" : "This returns the schema of a particular type within a class of object.",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The class of object to retrieve the schema for.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "typeFilter",
          "in" : "path",
          "description" : "A type filter defining the specific subtype that owns the field.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the data",
            "schema" : {
              "$ref" : "#/definitions/Schema"
            }
          }
        }
      }
    },
    "/api/data-service/schema/{classId}/types/{typeFilter}/update" : {
      "post" : {
        "summary" : "Get the state of a field in the specified schema",
        "description" : "Get the state of a field in the specified schema.",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The class of object.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "typeFilter",
          "in" : "path",
          "description" : "A type filter defining the specific subtype that owns the field.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/batchElementUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the data",
            "schema" : {
              "$ref" : "#/definitions/formUpdateResponse"
            }
          }
        }
      }
    },
    "/api/data-service/schema/{classId}/types/{typeFilter}/{fieldId}/values" : {
      "post" : {
        "summary" : "Get the permissible values of a field in the specified schema",
        "description" : "Get the permissible values of a field in the specified schema.",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The class of object.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "typeFilter",
          "in" : "path",
          "description" : "A type filter defining the specific subtype that owns the field.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fieldId",
          "in" : "path",
          "description" : "The id of a field on the schema of the specified object class.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/elementValuesRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the data",
            "schema" : {
              "$ref" : "#/definitions/elementValues"
            }
          }
        }
      }
    },
    "/api/resourcerequests/{id}" : {
      "get" : {
        "summary" : "Get SoftwareResourceRequest",
        "description" : "Get software resource request for id.",
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "The id of SoftwareResource.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success - return Software Resource Request",
            "schema" : {
              "$ref" : "#/definitions/SoftwareResourceRequest"
            }
          },
          "403" : {
            "description" : "Forbidden."
          },
          "404" : {
            "description" : "Software Resource Request not found."
          }
        }
      }
    },
    "/api/resourcerequests/{id}/status" : {
      "get" : {
        "summary" : "Get SoftwareRequestState",
        "description" : "Get status for software resource request id.",
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "The softwareResourceId",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success - return Software Resource Request Status",
            "schema" : {
              "type" : "string",
              "enum" : [ "SUBMITTED", "IN_PROGRESS", "SUCCEEDED", "FAILED" ]
            }
          },
          "403" : {
            "description" : "Forbidden."
          },
          "404" : {
            "description" : "Software Resource Request State not found."
          }
        }
      }
    },
    "/api/scripttypes" : {
      "get" : {
        "summary" : "Get ScriptTypes",
        "description" : "Get all script types.",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success - return a page of script types.",
            "schema" : {
              "$ref" : "#/definitions/ScriptType"
            }
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/api/scripttypes/fileextension/{fileExtension}" : {
      "get" : {
        "summary" : "Get ScriptType for file extension",
        "description" : "Get ScriptType for file extension.",
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "The file extension.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success - return script type.",
            "schema" : {
              "$ref" : "#/definitions/ScriptType"
            }
          },
          "403" : {
            "description" : "Forbidden."
          },
          "404" : {
            "description" : "File extension not found."
          }
        }
      }
    },
    "/api/scripttypes/{id}" : {
      "get" : {
        "summary" : "Get ScriptType",
        "description" : "Get script type for id.",
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "The scriptId.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success - return script type.",
            "schema" : {
              "$ref" : "#/definitions/ScriptType"
            }
          },
          "403" : {
            "description" : "Forbidden."
          },
          "404" : {
            "description" : "Script not found."
          }
        }
      }
    },
    "/api/softwarecomponenttypes" : {
      "get" : {
        "summary" : "Get SoftwareComponentTypeInfos",
        "description" : "Get all software component types descriptors.",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success - return a page of software component type infos.",
            "schema" : {
              "$ref" : "#/definitions/SoftwareComponentTypeInfo"
            }
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      },
      "post" : {
        "summary" : "Create SoftwareComponentType",
        "description" : "Create software component type.",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The softwareComponentType.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SoftwareComponentType"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SoftwareComponentType"
            }
          },
          "201" : {
            "description" : "Success - return created software component type."
          },
          "400" : {
            "description" : "Invalid software component type for creation."
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/api/softwarecomponenttypes/{id}" : {
      "get" : {
        "summary" : "Get SoftwareComponentType",
        "description" : "Get software component type by id.",
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "The id of SoftwareComponentType.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success - return software component type.",
            "schema" : {
              "$ref" : "#/definitions/SoftwareComponentType"
            }
          },
          "403" : {
            "description" : "Forbidden."
          },
          "404" : {
            "description" : "Software component type not found."
          }
        }
      },
      "put" : {
        "summary" : "Update SoftwareComponentType",
        "description" : "Update software component type by id.",
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "The id of SoftwareComponentType.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The SoftwareComponentType contents.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SoftwareComponentType"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success - return updated software component type.",
            "schema" : {
              "$ref" : "#/definitions/SoftwareComponentType"
            }
          },
          "400" : {
            "description" : "Invalid software component type for update."
          },
          "403" : {
            "description" : "Forbidden."
          },
          "404" : {
            "description" : "Software component type not found."
          }
        }
      },
      "delete" : {
        "summary" : "Delete SoftwareComponentType",
        "description" : "Delete software component type by id.",
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "The id of SoftwareComponentType.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - deleted component type."
          },
          "403" : {
            "description" : "Forbidden."
          },
          "404" : {
            "description" : "Software component type not found."
          }
        }
      }
    },
    "/api/softwarecomponenttypes/{id}/status" : {
      "put" : {
        "summary" : "Update SoftwareComponentType PublishStatus",
        "description" : "Update the publsh status of a given software component type.",
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "description" : "The id of SoftwareComponentType.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The PublishStatus.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success - return updated software component type info.",
            "schema" : {
              "$ref" : "#/definitions/SoftwareComponentTypeInfo"
            }
          },
          "400" : {
            "description" : "Invalid publish status."
          },
          "403" : {
            "description" : "Forbidden."
          },
          "404" : {
            "description" : "Software component type not found."
          }
        }
      }
    }
  },
  "definitions" : {
    "AndClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "subClauses" : {
            "type" : "array",
            "xml" : {
              "name" : "clause"
            },
            "items" : {
              "$ref" : "#/definitions/Clause"
            }
          }
        }
      } ]
    },
    "BooleanLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "description" : "Wraps a boolean value.",
        "xml" : {
          "name" : "booleanLiteral"
        }
      } ]
    },
    "CallbackEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object"
      } ]
    },
    "Clause" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "CoalesceEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "arguments" : {
            "type" : "array",
            "xml" : {
              "name" : "argument",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "ComplexDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object",
        "properties" : {
          "schema" : {
            "$ref" : "#/definitions/Schema"
          }
        }
      } ]
    },
    "ComplexEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "componentTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "typeFilter" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "values" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "ComponentLifecycleTask" : {
      "type" : "object",
      "required" : [ "taskDescriptorRef" ],
      "properties" : {
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        },
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "script" : {
          "$ref" : "#/definitions/Script"
        },
        "taskDescriptorRef" : {
          "$ref" : "#/definitions/TaskDescriptor"
        }
      }
    },
    "ConditionalEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "cases" : {
            "type" : "array",
            "xml" : {
              "name" : "case"
            },
            "items" : {
              "$ref" : "#/definitions/ConditionalEvaluatorCase"
            }
          },
          "defaulValue" : {
            "$ref" : "#/definitions/Evaluator"
          }
        }
      } ]
    },
    "ConditionalEvaluatorCase" : {
      "type" : "object",
      "properties" : {
        "condition" : {
          "$ref" : "#/definitions/Clause"
        },
        "value" : {
          "$ref" : "#/definitions/Evaluator"
        }
      }
    },
    "ConstantClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/booleanLiteral"
          }
        }
      } ]
    },
    "ConstantValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/literal"
          }
        }
      } ]
    },
    "Constraint" : {
      "type" : "object",
      "required" : [ "value" ],
      "discriminator" : "type",
      "properties" : {
        "value" : {
          "$ref" : "#/definitions/Evaluator"
        }
      }
    },
    "ContainsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "ContextPermissibleValueList" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PermissibleValueList"
      }, {
        "type" : "object"
      } ]
    },
    "CriteriaOperator" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "CustomPropertyDefinitionMetadata" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object",
        "required" : [ "field" ],
        "properties" : {
          "field" : {
            "$ref" : "#/definitions/Field"
          }
        }
      } ]
    },
    "CustomValidationConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "DataType" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "typeId" : {
          "type" : "string",
          "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
        }
      }
    },
    "DefaultValueBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "DisplayTextBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "DynamicDataRequest" : {
      "type" : "object",
      "properties" : {
        "tenantId" : {
          "type" : "string"
        },
        "ignoreUnknownFields" : {
          "type" : "boolean",
          "default" : false
        },
        "ids" : {
          "type" : "array",
          "xml" : {
            "name" : "id"
          },
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "DynamicDataResponse" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "$ref" : "#/definitions/literalMap"
        }
      }
    },
    "DynamicLayoutReference" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutReference"
      }, {
        "type" : "object",
        "properties" : {
          "dependencies" : {
            "type" : "array",
            "xml" : {
              "name" : "dependency",
              "wrapped" : true
            },
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "DynamicPermissibleValueList" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PermissibleValueList"
      }, {
        "type" : "object",
        "properties" : {
          "context" : {
            "$ref" : "#/definitions/DynamicValueContext"
          },
          "dependencies" : {
            "type" : "array",
            "xml" : {
              "name" : "dependency",
              "wrapped" : true
            },
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "DynamicValueContext" : {
      "type" : "object",
      "required" : [ "parameterMappings" ],
      "properties" : {
        "providerEntityId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "parameterMappings" : {
          "$ref" : "#/definitions/ParameterMappingCollection"
        }
      }
    },
    "EditableBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "ElementState" : {
      "type" : "object",
      "properties" : {
        "dependencies" : {
          "type" : "array",
          "xml" : {
            "name" : "dependency",
            "wrapped" : true
          },
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "facets" : {
          "type" : "array",
          "xml" : {
            "name" : "facet",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/Constraint"
          }
        }
      }
    },
    "ElementValuesPagingInfo" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "EncryptedBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "EndsWithOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "EntityReferenceDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object"
      } ]
    },
    "EqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "Evaluator" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "Expression" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "operator" : {
            "$ref" : "#/definitions/CriteriaOperator"
          },
          "leftOperand" : {
            "$ref" : "#/definitions/Evaluator"
          },
          "rightOperand" : {
            "$ref" : "#/definitions/Evaluator"
          }
        }
      } ]
    },
    "ExtensionRendererContext" : {
      "type" : "object",
      "properties" : {
        "extensionId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "parameterMappings" : {
          "$ref" : "#/definitions/ParameterMappingCollection"
        }
      }
    },
    "ExternalValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "required" : [ "dynamicValueProviderInfo" ],
        "properties" : {
          "dynamicValueProviderInfo" : {
            "$ref" : "#/definitions/DynamicValueContext"
          }
        }
      } ]
    },
    "FacetValueMap" : {
      "type" : "object",
      "properties" : {
        "facets" : {
          "type" : "array",
          "xml" : {
            "name" : "facet",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/FacetValueMapEntry"
          }
        }
      }
    },
    "FacetValueMapEntry" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "value" : {
          "$ref" : "#/definitions/literal"
        }
      }
    },
    "Field" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "label" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "dataType" : {
          "$ref" : "#/definitions/DataType"
        },
        "displayAdvice" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "TEXTBOX", "HYPERLINK", "EMAIL", "TEXTAREA", "DATE_TIME_PICKER", "CHECKBOX", "YES_NO", "CHECKBOX_GROUP", "DUAL_LIST", "RADIO_GROUP", "DROPDOWN", "LIST", "SEARCHER", "TREE", "FORM", "IMAGE", "SLIDER", "DATA_TABLE", "VALUE_PICKER", "CONFIRM_PASSWORD" ]
        },
        "orderIndex" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        },
        "permissibleValues" : {
          "$ref" : "#/definitions/PermissibleValueList"
        },
        "state" : {
          "$ref" : "#/definitions/ElementState"
        },
        "isMultiValued" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "columns" : {
          "type" : "array",
          "xml" : {
            "name" : "column",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/Field"
          }
        }
      }
    },
    "FieldReference" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "path" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        }
      } ]
    },
    "FixedValueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "GreaterThanOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "GreaterThanOrEqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "IaasPropertyNameBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "IncrementBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "InternalConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "IsDefinedOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "LayoutCell" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "LayoutExtension" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutCell"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "extensionId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "extensionPointId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "fieldPrefix" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          }
        }
      } ]
    },
    "LayoutField" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutFlowElement"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "label" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "orderIndex" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dataType" : {
            "$ref" : "#/definitions/DataType"
          },
          "displayAdvice" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "TEXTBOX", "HYPERLINK", "EMAIL", "TEXTAREA", "DATE_TIME_PICKER", "CHECKBOX", "YES_NO", "CHECKBOX_GROUP", "DUAL_LIST", "RADIO_GROUP", "DROPDOWN", "LIST", "SEARCHER", "TREE", "FORM", "IMAGE", "SLIDER", "DATA_TABLE", "VALUE_PICKER", "CONFIRM_PASSWORD" ]
          },
          "permissibleValues" : {
            "$ref" : "#/definitions/PermissibleValueList"
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          },
          "labelSize" : {
            "type" : "integer",
            "format" : "int32",
            "xml" : {
              "attribute" : true
            }
          },
          "detailLayout" : {
            "$ref" : "#/definitions/LayoutReference"
          },
          "extensionRendererContext" : {
            "$ref" : "#/definitions/ExtensionRendererContext"
          },
          "isMultiValued" : {
            "type" : "boolean",
            "xml" : {
              "attribute" : true
            },
            "default" : false
          },
          "columns" : {
            "type" : "array",
            "xml" : {
              "name" : "column",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/LayoutField"
            }
          }
        }
      } ]
    },
    "LayoutFlow" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutCell"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          },
          "parts" : {
            "type" : "array",
            "xml" : {
              "name" : "part",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/LayoutFlowElement"
            }
          }
        }
      } ]
    },
    "LayoutFlowElement" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutCell"
      }, {
        "type" : "object"
      } ]
    },
    "LayoutPage" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "label" : {
          "type" : "string"
        },
        "state" : {
          "$ref" : "#/definitions/ElementState"
        },
        "sections" : {
          "type" : "array",
          "xml" : {
            "name" : "section",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/LayoutSection"
          }
        }
      }
    },
    "LayoutPlaceholderCell" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutCell"
      }, {
        "type" : "object"
      } ]
    },
    "LayoutReference" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "LayoutRow" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "xml" : {
            "name" : "item",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/LayoutCell"
          }
        }
      }
    },
    "LayoutSection" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "label" : {
          "type" : "string"
        },
        "state" : {
          "$ref" : "#/definitions/ElementState"
        },
        "rows" : {
          "type" : "array",
          "xml" : {
            "name" : "row",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/LayoutRow"
          }
        }
      }
    },
    "LayoutText" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutFlowElement"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "value" : {
            "type" : "string"
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          }
        }
      } ]
    },
    "LessThanOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "LessThanOrEqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "LiteralMapEntry" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "value" : {
          "$ref" : "#/definitions/literal"
        }
      }
    },
    "MandatoryConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaxCardinalityConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaxLengthConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaxValueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaximumValueEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "arguments" : {
            "type" : "array",
            "xml" : {
              "name" : "argument",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "MinCardinalityConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MinLengthConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MinValueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MinimumValueEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "arguments" : {
            "type" : "array",
            "xml" : {
              "name" : "argument",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "MonetaryValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "currencyCode" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The ISO 4217 code used to identify the currency (if any) associated with this value."
          }
        },
        "description" : "Base type for representing monetary values, encapsulating both some kind of quantity and a currency.",
        "xml" : {
          "name" : "literal"
        }
      } ]
    },
    "MultipleEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "required" : [ "items" ],
        "properties" : {
          "elementTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "Node" : {
      "type" : "object",
      "properties" : {
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        },
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "name" : {
          "type" : "string"
        },
        "tenantId" : {
          "type" : "string"
        },
        "subTenantId" : {
          "type" : "string"
        },
        "agentId" : {
          "type" : "string"
        },
        "agentVersion" : {
          "type" : "string"
        },
        "lastAgentPingDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "osFamily" : {
          "type" : "string",
          "enum" : [ "LINUX", "WINDOWS" ]
        },
        "registrationState" : {
          "type" : "string",
          "enum" : [ "NONE", "PRE_REGISTERED", "REGISTERED", "UNREGISTERED" ]
        },
        "machineResourceId" : {
          "type" : "string"
        },
        "subscriptionEndpoint" : {
          "type" : "string"
        },
        "proxyConfig" : {
          "$ref" : "#/definitions/literalMap"
        }
      }
    },
    "NotClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "subClause" : {
            "$ref" : "#/definitions/Clause"
          }
        }
      } ]
    },
    "NotEqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "NullDisplayTextBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "ObjectDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object",
        "properties" : {
          "componentTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "typeFilter" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "label" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        }
      } ]
    },
    "OperationDescriptor" : {
      "type" : "object",
      "properties" : {
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        },
        "id" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1023
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2000
        },
        "defaultTaskMappings" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OperationTaskMapping"
          }
        },
        "lifecycleAction" : {
          "type" : "string"
        },
        "appearsAfterRef" : {
          "$ref" : "#/definitions/OperationDescriptor"
        }
      }
    },
    "OperationTaskMapping" : {
      "type" : "object",
      "required" : [ "taskDescriptorRef" ],
      "properties" : {
        "order" : {
          "type" : "integer",
          "format" : "int32"
        },
        "taskDescriptorRef" : {
          "$ref" : "#/definitions/TaskDescriptor"
        }
      }
    },
    "OrClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "subClauses" : {
            "type" : "array",
            "xml" : {
              "name" : "clause"
            },
            "items" : {
              "$ref" : "#/definitions/Clause"
            }
          }
        }
      } ]
    },
    "ParameterMapping" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "value" : {
          "$ref" : "#/definitions/Evaluator"
        }
      }
    },
    "ParameterMappingCollection" : {
      "type" : "object",
      "properties" : {
        "params" : {
          "type" : "array",
          "xml" : {
            "name" : "param",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/ParameterMapping"
          }
        }
      }
    },
    "PermissibleValueList" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "customAllowed" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        }
      }
    },
    "PrimitiveDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object",
        "properties" : {
          "typeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
          }
        }
      } ]
    },
    "ReadOnlyConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "RefreshOnChangeBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "RegexpConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object",
        "properties" : {
          "errorMessage" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ResetValueBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "Schema" : {
      "type" : "object",
      "properties" : {
        "fields" : {
          "type" : "array",
          "xml" : {
            "name" : "field"
          },
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Field"
          }
        }
      }
    },
    "Script" : {
      "type" : "object",
      "properties" : {
        "scriptContent" : {
          "type" : "string"
        },
        "isRebootAfter" : {
          "type" : "boolean",
          "default" : false
        },
        "scriptTypeId" : {
          "$ref" : "#/definitions/ScriptType"
        }
      }
    },
    "ScriptType" : {
      "type" : "object",
      "required" : [ "supportedOsDetails" ],
      "properties" : {
        "supportedOsDetails" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ScriptTypeOsDetails"
          },
          "maxItems" : 2147483647,
          "minItems" : 1
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "ScriptTypeOsDetails" : {
      "type" : "object",
      "required" : [ "osFamily" ],
      "properties" : {
        "osFamily" : {
          "type" : "string",
          "enum" : [ "LINUX", "WINDOWS" ]
        },
        "supportsOutputProps" : {
          "type" : "boolean",
          "default" : false
        },
        "execCommand" : {
          "type" : "string"
        },
        "execScript" : {
          "type" : "string"
        },
        "execScriptExtension" : {
          "type" : "string"
        },
        "fileExtension" : {
          "type" : "string"
        }
      }
    },
    "SkipExportBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "SoftwareComponentType" : {
      "type" : "object",
      "required" : [ "publishStatus" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "publishStatus" : {
          "type" : "string",
          "enum" : [ "DRAFT", "PUBLISHED", "RETIRED" ]
        },
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        },
        "publishStatusName" : {
          "type" : "string"
        },
        "schema" : {
          "$ref" : "#/definitions/Schema"
        },
        "containerFieldId" : {
          "type" : "string"
        },
        "lifecycleTasks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/ComponentLifecycleTask"
          }
        },
        "catalogResourceTypeId" : {
          "type" : "string"
        },
        "containerResourceTypeId" : {
          "type" : "string"
        },
        "derivesFromRef" : {
          "$ref" : "#/definitions/SoftwareComponentType"
        },
        "tenantId" : {
          "type" : "string"
        }
      }
    },
    "SoftwareComponentTypeInfo" : {
      "type" : "object",
      "required" : [ "publishStatus" ],
      "discriminator" : "@type",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "publishStatus" : {
          "type" : "string",
          "enum" : [ "DRAFT", "PUBLISHED", "RETIRED" ]
        },
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        },
        "publishStatusName" : {
          "type" : "string"
        },
        "tenantId" : {
          "type" : "string"
        }
      }
    },
    "SoftwareResourceRequest" : {
      "type" : "object",
      "required" : [ "state" ],
      "properties" : {
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        },
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "resourceId" : {
          "type" : "string"
        },
        "requestData" : {
          "$ref" : "#/definitions/literalMap"
        },
        "resourceData" : {
          "$ref" : "#/definitions/literalMap"
        },
        "previousResourceData" : {
          "$ref" : "#/definitions/literalMap"
        },
        "externalServiceId" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string",
          "enum" : [ "SUBMITTED", "IN_PROGRESS", "SUCCEEDED", "FAILED" ]
        },
        "stateName" : {
          "type" : "string"
        },
        "statusMessage" : {
          "type" : "string"
        },
        "dateSubmitted" : {
          "type" : "string",
          "format" : "date-time"
        },
        "dateCompleted" : {
          "type" : "string",
          "format" : "date-time"
        },
        "taskRequests" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/TaskRequest"
          }
        },
        "tenantId" : {
          "type" : "string"
        },
        "subTenantId" : {
          "type" : "string"
        },
        "requestedBy" : {
          "type" : "string"
        },
        "requestedFor" : {
          "type" : "string"
        },
        "softwareComponentTypeRef" : {
          "$ref" : "#/definitions/SoftwareComponentType"
        },
        "operationDescriptorRef" : {
          "$ref" : "#/definitions/OperationDescriptor"
        },
        "rootCafeRequestId" : {
          "type" : "string"
        }
      }
    },
    "StartsWithOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "StaticLayout" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutReference"
      }, {
        "type" : "object",
        "required" : [ "layout" ],
        "properties" : {
          "layout" : {
            "$ref" : "#/definitions/layout"
          }
        }
      } ]
    },
    "StaticPermissibleValueList" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PermissibleValueList"
      }, {
        "type" : "object",
        "properties" : {
          "values" : {
            "type" : "array",
            "xml" : {
              "name" : "value"
            },
            "items" : {
              "$ref" : "#/definitions/value"
            }
          }
        }
      } ]
    },
    "SubsetOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "SupersetOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "TaskDescriptor" : {
      "type" : "object",
      "properties" : {
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1023
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2000
        }
      }
    },
    "TaskRequest" : {
      "type" : "object",
      "required" : [ "taskDescriptorRef" ],
      "properties" : {
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        },
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "script" : {
          "$ref" : "#/definitions/Script"
        },
        "state" : {
          "type" : "string",
          "enum" : [ "SUBMITTED", "IN_PROGRESS", "SUCCEEDED", "FAILED" ]
        },
        "stateName" : {
          "type" : "string"
        },
        "dateStarted" : {
          "type" : "string",
          "format" : "date-time"
        },
        "dateCompleted" : {
          "type" : "string",
          "format" : "date-time"
        },
        "log" : {
          "type" : "string"
        },
        "logDescription" : {
          "type" : "string"
        },
        "nodeRef" : {
          "$ref" : "#/definitions/Node"
        },
        "taskDescriptorRef" : {
          "$ref" : "#/definitions/TaskDescriptor"
        }
      }
    },
    "TimeSpan" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "description" : "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days.",
        "xml" : {
          "name" : "timeSpan"
        }
      } ]
    },
    "UniqueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "UnspecifiedEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object"
      } ]
    },
    "VisibilityConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "WithinOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "WrapperClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/Evaluator"
          }
        }
      } ]
    },
    "batchElementUpdateRequest" : {
      "type" : "object",
      "required" : [ "formValues" ],
      "properties" : {
        "headers" : {
          "$ref" : "#/definitions/literalMap"
        },
        "formValues" : {
          "$ref" : "#/definitions/literalMap"
        },
        "trigger" : {
          "type" : "string"
        },
        "triggeredDetailsLayout" : {
          "$ref" : "#/definitions/layout"
        },
        "affectedElements" : {
          "type" : "array",
          "xml" : {
            "wrapped" : true
          },
          "items" : {
            "type" : "string"
          }
        }
      },
      "xml" : {
        "name" : "batchElementUpdateRequest"
      }
    },
    "booleanLiteral" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "value" : {
          "type" : "boolean",
          "description" : "The boolean value.",
          "default" : false
        }
      },
      "description" : "Wraps a boolean value.",
      "xml" : {
        "name" : "booleanLiteral"
      }
    },
    "complexLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "componentTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's component type."
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's component."
          },
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's class."
          },
          "typeFilter" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The type filter for this literal."
          },
          "values" : {
            "description" : "Map of values, keyed by the field ids of some complex type.",
            "$ref" : "#/definitions/literalMap"
          }
        },
        "description" : "A complex value composed of multiple values keyed by the field ids of some complex type.",
        "xml" : {
          "name" : "complexLiteral"
        }
      } ]
    },
    "componentRequestStatusDetails" : {
      "type" : "object",
      "properties" : {
        "requestId" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "INITIALIZED", "SUBMITTED", "IN_PROGRESS", "SUCCEEDED", "FAILED", "FAILING", "CANCELLED", "CANCELLING", "REJECTED", "ABORTED", "PARTIALLY_SUCCESSFUL", "IGNORED" ]
        },
        "details" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/taskStatusDetail"
          }
        },
        "dateStarted" : {
          "type" : "string",
          "format" : "date-time"
        },
        "dateCompleted" : {
          "type" : "string",
          "format" : "date-time"
        }
      },
      "xml" : {
        "name" : "componentRequestStatusDetails"
      }
    },
    "dateTimeLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date."
          }
        },
        "description" : "Wraps a Date & Time value. This is a wrapper for the Java {@link Date} class.",
        "xml" : {
          "name" : "dateTimeLiteral"
        }
      } ]
    },
    "decimalLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "number",
            "format" : "double",
            "description" : "The decimal value."
          }
        },
        "description" : "Wraps a decimal value.",
        "xml" : {
          "name" : "decimalLiteral"
        }
      } ]
    },
    "elementValues" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "array",
          "xml" : {
            "name" : "value",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/value"
          }
        }
      },
      "xml" : {
        "name" : "elementValues"
      }
    },
    "elementValuesRequest" : {
      "type" : "object",
      "properties" : {
        "text" : {
          "type" : "string"
        },
        "tenantId" : {
          "type" : "string"
        },
        "userId" : {
          "type" : "string"
        },
        "dependencyValues" : {
          "$ref" : "#/definitions/literalMap"
        },
        "pagingInfo" : {
          "$ref" : "#/definitions/ElementValuesPagingInfo"
        },
        "associateValue" : {
          "$ref" : "#/definitions/literal"
        },
        "headers" : {
          "$ref" : "#/definitions/literalMap"
        }
      },
      "xml" : {
        "name" : "elementValuesRequest"
      }
    },
    "entityRef" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier of the type or category to which the referenced entity belongs."
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The unique identifier of the referenced entity, encoded as a string"
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The durable identifier of a component registered in the suite component registry that owns and manages the referenced entity. This can be omitted if this component can be derived from the context within which this entity reference occurs. It must be specified, if no such context exists or if the component differs from that defined by the context."
          },
          "label" : {
            "type" : "string"
          }
        },
        "description" : "Represents a reference to an entity defined somewhere in the suite.",
        "xml" : {
          "name" : "entityRef"
        }
      } ]
    },
    "entityRefEx" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "href" : {
            "type" : "string",
            "description" : "the Href"
          }
        },
        "description" : "Represents a reference to an entity by uri",
        "xml" : {
          "name" : "entityRefEx"
        }
      } ]
    },
    "formUpdateResponse" : {
      "type" : "object",
      "properties" : {
        "elementUpdates" : {
          "type" : "array",
          "xml" : {
            "name" : "elementUpdate",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/updateElementEntry"
          }
        }
      },
      "xml" : {
        "name" : "formUpdateResponse"
      }
    },
    "integerLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The integer value."
          }
        },
        "description" : "Wraps a signed 64-bit integer value.",
        "xml" : {
          "name" : "integerLiteral"
        }
      } ]
    },
    "layout" : {
      "type" : "object",
      "properties" : {
        "pages" : {
          "type" : "array",
          "xml" : {
            "name" : "page",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/LayoutPage"
          }
        }
      },
      "xml" : {
        "name" : "layout"
      }
    },
    "literal" : {
      "type" : "object",
      "discriminator" : "type",
      "description" : "Wraps a value such that values of different types can be treated generically.",
      "xml" : {
        "name" : "literal"
      }
    },
    "literalMap" : {
      "type" : "object",
      "properties" : {
        "entries" : {
          "type" : "array",
          "xml" : {
            "name" : "entry"
          },
          "items" : {
            "$ref" : "#/definitions/LiteralMapEntry"
          }
        }
      },
      "description" : "Equivalent of java.util.Map",
      "xml" : {
        "name" : "literalMap"
      }
    },
    "money" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "format" : "double",
            "description" : "The amount associated with this value (with no specific currency)."
          }
        },
        "description" : "Represents a single, precise monetary value.",
        "xml" : {
          "name" : "money"
        }
      } ]
    },
    "moneyRange" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "minValue" : {
            "type" : "number",
            "format" : "double",
            "description" : "The lower limit of the range."
          },
          "maxValue" : {
            "type" : "number",
            "format" : "double",
            "description" : "The upper limit of the range."
          }
        },
        "description" : "Represents a range of money values, between some defined minimums and maximums.",
        "xml" : {
          "name" : "moneyRange"
        }
      } ]
    },
    "moneyRate" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "cost" : {
            "description" : "The cost (including optional currency code).",
            "$ref" : "#/definitions/literal"
          }
        },
        "description" : "A base type for literals representing a rate of some monetary value over a specified basis. E.g. $5 / hour; $1-2 / GB.",
        "xml" : {
          "name" : "moneyRate"
        }
      } ]
    },
    "moneyTimeRate" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "basis" : {
            "description" : "The span of time to calculate the rate of money for.",
            "$ref" : "#/definitions/timeSpan"
          }
        },
        "description" : "Represents a rate of money over time.",
        "xml" : {
          "name" : "moneyTimeRate"
        }
      } ]
    },
    "multipleLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "elementTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The data type of the items in the list.",
            "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
          },
          "items" : {
            "type" : "array",
            "xml" : {
              "name" : "item"
            },
            "description" : "The list of specified values. NOTE: All values must be of the same data type.",
            "items" : {
              "$ref" : "#/definitions/literal"
            }
          }
        },
        "description" : "A literal which represents multiple values. All of these component values must be of the same data type.",
        "xml" : {
          "name" : "multipleLiteral"
        }
      } ]
    },
    "secureString" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "The string value."
          }
        },
        "description" : "Wraps a secured string value, such as a password.",
        "xml" : {
          "name" : "secureString"
        }
      } ]
    },
    "stringLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "The string value."
          }
        },
        "description" : "Wraps a String value.",
        "xml" : {
          "name" : "stringLiteral"
        }
      } ]
    },
    "taskStatusDetail" : {
      "type" : "object",
      "properties" : {
        "label" : {
          "type" : "string"
        },
        "dateStarted" : {
          "type" : "string",
          "format" : "date-time"
        },
        "dateCompleted" : {
          "type" : "string",
          "format" : "date-time"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "INITIALIZED", "SUBMITTED", "IN_PROGRESS", "SUCCEEDED", "FAILED", "FAILING", "CANCELLED", "CANCELLING", "REJECTED", "ABORTED", "PARTIALLY_SUCCESSFUL", "IGNORED" ]
        },
        "log" : {
          "type" : "string"
        },
        "logDescription" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "taskStatusDetail"
      }
    },
    "timeSpan" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "unit" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "description" : "The unit of measure for the time span. e.g: days.",
          "enum" : [ "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS", "WEEKS", "MONTHS", "YEARS" ]
        },
        "amount" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          },
          "description" : "The amount for the time span."
        }
      },
      "description" : "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days.",
      "xml" : {
        "name" : "timeSpan"
      }
    },
    "updateElementEntry" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "detailLayout" : {
          "$ref" : "#/definitions/layout"
        },
        "facetValues" : {
          "$ref" : "#/definitions/FacetValueMap"
        },
        "extensionRendererContext" : {
          "$ref" : "#/definitions/literalMap"
        },
        "permissibleValues" : {
          "type" : "array",
          "xml" : {
            "name" : "value",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/value"
          }
        },
        "errors" : {
          "type" : "array",
          "xml" : {
            "name" : "error",
            "wrapped" : true
          },
          "items" : {
            "type" : "string"
          }
        }
      },
      "xml" : {
        "name" : "updateElementEntry"
      }
    },
    "value" : {
      "type" : "object",
      "properties" : {
        "underlyingValue" : {
          "$ref" : "#/definitions/literal"
        },
        "label" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "value"
      }
    }
  }
}