{
  "swagger": "2.0",
  "info": {
    "description": "A list of the vRNI public APIs",
    "version": "1.0.0",
    "title": "vRNI API Documentation Center"
  },
  "host": "localhost:8000",
  "basePath": "/rest",
  "tags": [
    {
      "name": "Authentication",
      "description": "Authentication Operations"
    },
    {
      "name": "Data Sources",
      "description": "Generic data sources operations"
    },
    {
      "name": "Entities",
      "description": "Fetch an entity based on its id"
    },
    {
      "name": "Search",
      "description": "Search APIs"
    },
    {
      "name": "Infrastructure",
      "description": "Infra APIs"
    },
    {
      "name": "Applications",
      "description": "Application Operations"
    },
    {
      "name": "Microsegmentation",
      "description": "Operations related to micro-segmentation"
    }
  ],
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/auth-token": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get an auth token given for user credential",
        "description": "vRNI supports Token based Authentication. A token can be generated by passing user credentials.\nA maximum of 1000  token can be allocated per tenant. Once the limits are breached new tokens can be allocated upon deletion/expiry of old tokens. Token will get expired  after 5 hours from allocation time.\nTo authenticate a request using  the generated token, include the following header with the request\nAuthorization: NetworkInsight {token}\nAll APIs will validate token and retrieve user and customer info based on provided token. If a token is not found or is expired a 401 Unauthorized error will be thrown.\n",
        "operationId": "getAuthToken",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User Credentials",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCredential"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "412": {
            "description": "Max Token already assigned"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Authentication"
        ],
        "summary": "Deletes the auth token.",
        "description": "Deletes the auth token provided in Authorization header. Deleting an expired or invalid token shall result in 401 UnAuthorized error.",
        "operationId": "deleteAuthToken",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/infra/nodes": {
      "get": {
        "tags": [
          "Infrastructure"
        ],
        "summary": "Get list of collector and platform node ids.",
        "description": "Get nodes",
        "operationId": "getNodes",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NodeListResult"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/infra/nodes/{id}": {
      "get": {
        "tags": [
          "Infrastructure"
        ],
        "summary": "Get node details.",
        "description": "Get node details.",
        "operationId": "getNodeDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Node id",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/vcenters": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Add a VCenter Data source in vRNI.",
        "description": "Add a VCenter Data source in vRNI. User should provide one of ip or fqdn field\nin the request body. Proxy_id can be retrieved from \"/infra/nodes\" end points.",
        "operationId": "addVCDatasources",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "VCenter Credentials",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VCenterDataSourceRequest"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/VCenterDataSource"
            },
            "examples": {
              "Ex": {
                "entity_type": "VCENTER_DATA_SOURCE",
                "id": "1000:33:12890123",
                "ip": "192.168.10.1",
                "fqdn": "go.vc.org",
                "proxy_id": "1000:104:12313412",
                "username": "admin@vsphere.local",
                "password": null,
                "nickname": "vc1",
                "enabled": true,
                "notes": "VC 1"
              }
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "Location Header. Example /rest/data-sources/vcenters/1000:33:12890123"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Get a list of VCenter Data source IDs",
        "description": "Get a list of vcenter data source Ids",
        "operationId": "getVCDatasources",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "Ex": {
                "results": [
                  {
                    "entity_id": "1000:33:12213212",
                    "entity_type": "VCENTER_DATA_SOURCE"
                  }
                ],
                "total_count": 1
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/vcenters/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Get a VCenter datasource from identifier",
        "operationId": "getVCDatasource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/VCenterDataSource"
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update a data source.",
        "operationId": "updateVCDatasource",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/VCenterDataSource"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/VCenterDataSource"
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Deletes a data source",
        "description": "Delete a data source",
        "operationId": "deleteVCDatasource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/vcenters/{id}/netflowconfig": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Get netflow configuraion of VCenter Distributed Virtual Switches.",
        "description": "Netflow configuration for vcenter",
        "operationId": "getVCNetflowConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the vc datasource",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NetflowConfig"
            },
            "examples": {
              "Example1": {
                "enable_all": false,
                "dvs_configs": [
                  {
                    "name": "dvs1",
                    "mor": "dvs-10",
                    "netflow_enabled": false,
                    "vrni_managed": false,
                    "version_supported": true,
                    "dvpg_count": 1,
                    "dvpgs": [
                      {
                        "name": "dvpg-test",
                        "mor": "dvpg-10",
                        "netflow_enabled": false,
                        "uplink": false
                      }
                    ]
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update vcenter netflow config",
        "description": "Update vcenter netflow config",
        "operationId": "updateVCNetflowConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/NetflowConfig"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NetflowConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/cisco-switches": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Add a cisco switch as data source in vRNI",
        "description": "Add switch Datasource",
        "operationId": "addCiscoSwitch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add a cisco switch as datasource in vRNI",
            "schema": {
              "$ref": "#/definitions/CiscoSwitchDataSourceRequest"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/CiscoSwitchDataSource"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "Location Header. Example /rest/data-sources/cisco-switches/1000:112:12890123"
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/cisco-switches/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Get switch data source",
        "description": "Get switch data source",
        "operationId": "getSwithDatasource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CiscoSwitchDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update switch data source",
        "description": "Update switch data source",
        "operationId": "updateSwitchDatasource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CiscoSwitchDataSource"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CiscoSwitchDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Deletes a data source",
        "description": "Delete a data source",
        "operationId": "deleteSwitchDatasource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/dell-switches": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Add a dell switch as data source in vRNI",
        "description": "Add switch Datasource",
        "operationId": "addDellSwitch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add a cisco switch as datasource in vRNI",
            "schema": {
              "$ref": "#/definitions/DellSwitchDataSourceRequest"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DellSwitchDataSource"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "Location Header. Example /rest/data-sources/dell-switches/1000:112:12890123"
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/dell-switches/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Get switch data source",
        "description": "Get switch data source",
        "operationId": "getDellSwitchDataSource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DellSwitchDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update switch data source",
        "description": "Update switch data source",
        "operationId": "updateDellSwitchDatasource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DellSwitchDataSource"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DellSwitchDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Deletes a data source",
        "description": "Delete a data source",
        "operationId": "deleteDellSwitchDatasource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/brocade-switches": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Add a brocade switch as data source in vRNI",
        "description": "Add switch Datasource",
        "operationId": "addBrocadeSwitch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add a cisco switch as datasource in vRNI",
            "schema": {
              "$ref": "#/definitions/BrocadeSwitchDataSourceRequest"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/BrocadeSwitchDataSource"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "Location Header. Example /rest/data-sources/brocade-switches/1000:112:12890123"
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/brocade-switches/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Get switch data source",
        "description": "Get switch data source",
        "operationId": "getBrocadeSwitchDataSource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BrocadeSwitchDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update switch data source",
        "description": "Update switch data source",
        "operationId": "updateBrocadeSwitchDatasource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/BrocadeSwitchDataSource"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BrocadeSwitchDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Deletes a data source",
        "description": "Delete a data source",
        "operationId": "deleteBrocadeSwitchDatasource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/juniper-switches": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Add a cisco switch as data source in vRNI",
        "description": "Add switch Datasource",
        "operationId": "addJuniperSwitch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add a cisco switch as datasource in vRNI",
            "schema": {
              "$ref": "#/definitions/JuniperSwitchDataSourceRequest"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/JuniperSwitchDataSource"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "Location Header. Example /rest/data-sources/juniper-switches/1000:112:12890123"
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/juniper-switches/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Get switch data source",
        "description": "Get switch data source",
        "operationId": "getJuniperDatasource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/JuniperSwitchDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update switch data source",
        "description": "Update switch data source",
        "operationId": "updateJuniperSwitchDatasource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/JuniperSwitchDataSource"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/JuniperSwitchDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Deletes a data source",
        "description": "Delete a data source",
        "operationId": "deleteJuniperSwitchDatasource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/arista-switches": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Add a cisco switch as data source in vRNI",
        "description": "Add switch Datasource",
        "operationId": "addAristaSwitch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add a cisco switch as datasource in vRNI",
            "schema": {
              "$ref": "#/definitions/AristaSwitchDataSourceRequest"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/AristaSwitchDataSource"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "Location Header. Example /rest/data-sources/arista-switches/1000:112:12890123"
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/arista-switches/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Get switch data source",
        "description": "Get switch data source",
        "operationId": "getAristaDatasource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AristaSwitchDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update switch data source",
        "description": "Update switch data source",
        "operationId": "updateAristaSwitchDatasource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AristaSwitchDataSource"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AristaSwitchDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Deletes a data source",
        "description": "Delete a data source",
        "operationId": "deleteAristaSwitchDatasource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/checkpoint-firewalls": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Add a firewall as data source.",
        "description": "Add firewall DataSource",
        "operationId": "addCheckpointFirewallDataSource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add a vSec Checkpoint firewall  as datasource in vRNI",
            "schema": {
              "$ref": "#/definitions/FirewallDataSourceRequest"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/FirewallDataSource"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "Location Header. Example /rest/data-sources/checkpoint-firewalls/1000:112:12890123"
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/checkpoint-firewalls/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Get firewall data source",
        "description": "Get firewall data source",
        "operationId": "getCheckpointFirewallDataSource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FirewallDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update firewall data source",
        "description": "Update firewall data source",
        "operationId": "updateCheckpointFirewallDatasource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/FirewallDataSource"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FirewallDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Deletes a data source",
        "description": "Delete a data source",
        "operationId": "deleteCheckpointFirewallDatasource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/panorama-firewalls": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Add a firewall as data source.",
        "description": "Add firewall DataSource",
        "operationId": "addPanoramaFirewallDataSource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add a Panorama ma firewall  as datasource in vRNI",
            "schema": {
              "$ref": "#/definitions/FirewallDataSourceRequest"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/FirewallDataSource"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "Location Header. Example /rest/data-sources/panorama-firewalls/1000:112:12890123"
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/panorama-firewalls/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Get firewall data source",
        "description": "Get firewall data source",
        "operationId": "getPanoramaFirewallDataSource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FirewallDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update firewall data source",
        "description": "Update firewall data source",
        "operationId": "updatePanoramaFirewallDatasource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/FirewallDataSource"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FirewallDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Deletes a data source",
        "description": "Delete a data source",
        "operationId": "deletePanoramaFirewallDatasource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/ucs-managers": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Add a UCS Manager as data source in vRNI",
        "description": "Add UCS Manager Datasource",
        "operationId": "addUcsManagerDataSource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add a switch as datasource in vRNI",
            "schema": {
              "$ref": "#/definitions/UCSManagerDataSourceRequest"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/UCSManagerDataSource"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "Location Header. Example /rest/data-sources/ucs-managers/1000:112:12890123"
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/ucs-managers/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Get UCS data source",
        "description": "Get UCS data source",
        "operationId": "getUcsManagerDataSource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UCSManagerDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update switch data source",
        "description": "Update switch data source",
        "operationId": "updateUcsDatasource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UCSManagerDataSource"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UCSManagerDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Deletes a data source",
        "description": "Delete a data source",
        "operationId": "deleteUcsDatasource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/hpvc-managers": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Add a UCS Manager as data source in vRNI",
        "description": "Add UCS Manager Datasource",
        "operationId": "addHpvcManagerDataSource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add a switch as datasource in vRNI",
            "schema": {
              "$ref": "#/definitions/HPVCManagerDataSourceRequest"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/HPVCManagerDataSource"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "Location Header. Example /rest/data-sources/hpvc-managers/1000:112:12890123"
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/hpvc-managers/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Get UCS data source",
        "description": "Get UCS data source",
        "operationId": "getHpvcManagerDataSource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HPVCManagerDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update switch data source",
        "description": "Update switch data source",
        "operationId": "updateHpvcDatasource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/HPVCManagerDataSource"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HPVCManagerDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Deletes a data source",
        "description": "Delete a data source",
        "operationId": "deleteHpvcDatasource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/nsxv-managers": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Add NSX Manager as data source in vRNI",
        "description": "Add NSX Manager Data Source",
        "operationId": "addNSXManagerDatasource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/NSXManagerDataSourceRequest"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/NSXManagerDataSource"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "Location Header. Example /rest/data-sources/nsxv-managers/1000:112:12890123"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/nsxv-managers/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Get NSX Manager data source",
        "description": "Get NSX Manager data source",
        "operationId": "getNSXManagerDatasource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NSXManagerDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update NSX Mananger data source",
        "description": "Update NSX Manager data source",
        "operationId": "updateNSXManagerDatasource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/NSXManagerDataSource"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NSXManagerDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Deletes a data source",
        "description": "Delete a data source",
        "operationId": "deleteNSXManagerDatasource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/problems": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Events Polling APIs",
        "description": "Events Polling APIs",
        "operationId": "getEvents",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "size of results",
            "required": false,
            "type": "number"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "cursor from previos respose",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_time",
            "in": "query",
            "description": "start_time for query",
            "required": false,
            "type": "number"
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "end_time for query",
            "required": false,
            "type": "number"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/problems/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get an Event by id",
        "description": "Get an Event by id",
        "operationId": "getEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProblemEvent"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/vms": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get ids of all VMs.",
        "description": "Get ids for all Virtual Machines.",
        "operationId": "getVMs",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "size",
            "required": false,
            "type": "number"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "cursor from previos respose",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_time",
            "in": "query",
            "description": "start_time for query",
            "required": false,
            "type": "number"
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "end_time for query",
            "required": false,
            "type": "number"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "VMListResponse": {
                "results": [
                  {
                    "entity_id": "1000:1:1232313",
                    "entity_type": "VirtualMachine",
                    "time": 0
                  }
                ],
                "cursor": "string",
                "total_count": 100,
                "start_time": 1504739809,
                "end_time": 1504739809
              },
              "summary": "Sample Response for VMs List Response"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/vms/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get a VM by id",
        "description": "",
        "operationId": "getVMById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "time",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseVirtualMachine"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/hosts": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get ids of all Hosts.",
        "description": "Get ids for all Host Systems.",
        "operationId": "getHosts",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "size",
            "required": false,
            "type": "number"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "cursor from previos respose",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_time",
            "in": "query",
            "description": "start_time for query",
            "required": false,
            "type": "number"
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "end_time for query",
            "required": false,
            "type": "number"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "Ex": {
                "results": [
                  {
                    "entity_id": "1000:4:1232313",
                    "entity_type": "Host",
                    "time": 0
                  }
                ],
                "cursor": "string",
                "total_count": 100,
                "start_time": 1504739809,
                "end_time": 1504739809
              },
              "summary": "Sample Response for VMs List Response"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/hosts/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get a Host by id",
        "description": "",
        "operationId": "getHostById",
        "parameters": [
          {
            "name": "time",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Host"
            }
          }
        }
      }
    },
    "/entities/vmknics": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get ids of all Vmknics.",
        "description": "Get ids for all vmknics.",
        "operationId": "getVmknics",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "size",
            "required": false,
            "type": "number"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "cursor from previos respose",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_time",
            "in": "query",
            "description": "start_time for query",
            "required": false,
            "type": "number"
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "end_time for query",
            "required": false,
            "type": "number"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/vmknics/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get a Vmknic by id",
        "description": "",
        "operationId": "getVMknicsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "time",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Vmknic"
            }
          }
        }
      }
    },
    "/entities/ip-sets": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "IPSets list API",
        "description": "List IPSet ids",
        "operationId": "getIPSets",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "size",
            "required": false,
            "type": "number"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "cursor from previos respose",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_time",
            "in": "query",
            "description": "start_time for query",
            "required": false,
            "type": "number"
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "end_time for query",
            "required": false,
            "type": "number"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/ip-sets/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get an IPSet by id",
        "description": "Get an IPSet by id",
        "operationId": "getIPSetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "time",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseIPSet"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/flows": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Flows list API",
        "description": "List Flow ids",
        "operationId": "getFlows",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "size",
            "required": false,
            "type": "number"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "cursor from previos respose",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_time",
            "in": "query",
            "description": "start_time for query",
            "required": false,
            "type": "number"
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "end_time for query",
            "required": false,
            "type": "number"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/flows/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get a Flow by id",
        "description": "Get a Flow record by id",
        "operationId": "getFlowById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "time",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Flow"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/security-groups": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Security Group list API",
        "description": "List Security Group ids",
        "operationId": "getSecurityGroups",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "size",
            "required": false,
            "type": "number"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "cursor from previos respose",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_time",
            "in": "query",
            "description": "start_time for query",
            "required": false,
            "type": "number"
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "end_time for query",
            "required": false,
            "type": "number"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/security-groups/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get a Security Group by id",
        "description": "Get a Security Group record by id.",
        "operationId": "getSecurityGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "time",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseSecurityGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/applications": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Create an application",
        "description": "Create an application with tiers",
        "operationId": "addApplication",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplicationRequest"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Application"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "Location Header. Example /rest/data-sources/vcenters/1000:33:12890123"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "List Application Ids",
        "description": "List all Application Ids",
        "operationId": "getApplications",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "size",
            "required": false,
            "type": "number"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "cursor from previos respose",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_time",
            "in": "query",
            "description": "start_time for query",
            "required": false,
            "type": "number"
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "end_time for query",
            "required": false,
            "type": "number"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/applications/{id}": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get an Application by id",
        "description": "Get an Application by id",
        "operationId": "getApplicationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Application"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Applications"
        ],
        "summary": "Deletes an Application.",
        "description": "Deletes an Application",
        "operationId": "deleteApplication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/applications/{id}/tiers": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Create an tier of application",
        "description": "Create a tier of application",
        "operationId": "addApplicationTier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TierRequest"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Tier"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "Location Header. Example /rest/applications/1000:33:12890123/tiers/1000:32:33142243"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get all Application Tiers",
        "description": "Get all Application Tiers",
        "operationId": "getApplicationTiers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/applications/{id}/tiers/{tier-id}": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get an Application Tier by id",
        "description": "Get an Application Tier by id",
        "operationId": "getApplicationTierById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "tier-id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Tier"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Applications"
        ],
        "summary": "Update tier of an application",
        "description": "Update tier of an application",
        "operationId": "updateApplicationTier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "tier-id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tier"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Tier"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Applications"
        ],
        "summary": "Delete tier of an application",
        "description": "Delete tier of an application",
        "operationId": "deleteApplicationTier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "tier-id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/applications/{id}/tiers/{tier-id}/members": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get members of an Application Tier",
        "description": "Get members of an Application Tier",
        "operationId": "getApplicationTierMembers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "tier-id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TierMembers"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/micro-seg/recommended-rules": {
      "post": {
        "tags": [
          "Microsegmentation"
        ],
        "summary": "Get logical recommended rules",
        "description": "Get logical recommended rules",
        "operationId": "getLogicalRecommendedRules",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Recommended Rules Request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RecommendedRulesRequest"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RecommendedRules"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/search": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Search entities",
        "description": "<h3>Search Filter Expression Syntax</h3>\n  <p>\n  A filter expression defines search criteria in this format:\n\n  {field_name} {comparison operator} {field_value}\n  Optionally, complex expressions can be designed, using {logical operators} and parenthesis (...)\n  </p>\n  <h3>{field_name}</h3>\n  <p>The name of a field in an Object.</p>\n  <h3>{comparison operator}</h3>\n  <p>\n  Used to compare a field to a value, creating an expression.\n  Supported Operator Types:\n  <ul>\n    <li>Less then ( < )</li>\n    <li>Greather Than ( > )</li>\n    <li>Equals ( = )</li>\n    <li>Not Equals ( != )</li>\n    <li>Like (like)</li>\n    <li>Blank (not set)</li>\n  </ul>\n    </p>\n  <h3>{field_value}</h3>\n  <p>\n  A number, or string; the value of a field; for example, in Virtualmachine ip_addresses.ip_address field value will be '10.1.1.1'.\n   Quotes are needed around dates and strings. They are not needed around numbers. Only single quotes are recognized around values, not double quotes.\n  <h3>{logical operator}</h3>\n  <p>A logical operator, used to create complex filters. Supported Logical operators are:</p>\n  <ul>\n    <li>AND</li>\n    <li>OR</li>\n  </ul>\n  <h3>Examples</h3>\n\n    1. Find all VMs with ip address = 10.1.1.1\n     {\n       entity_type: \"VirtualMachine\",\n       filter = \"ip_addresses.ip_address = '10.1.1.1'\"\n     }\n\n    2. Find all VMs where num cpu > 2\n     {\n       entity_type: \"VirtualMachine\",\n       filter = \"num_cpu > 2\"\n     }\n\n    3. Find all VMs with ip address 10.1.1.1 OR ip address 10.1.1.2\n     {\n       entity_type: \"VirtualMachine\",\n       filter = \"(ip_addresses.ip_address = '10.1.1.1') OR (ip_addresses.ip_address = '10.1.1.2')\"\n     }\n\n</p>",
        "operationId": "searchEntities",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Search Request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SearchRequest"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    }
  },
  "definitions": {
    "UserCredential": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "admin@vrni.com"
        },
        "password": {
          "type": "string",
          "example": "password"
        },
        "domain": {
          "$ref": "#/definitions/Domain"
        }
      }
    },
    "Domain": {
      "type": "object",
      "properties": {
        "domain_type": {
          "type": "string",
          "enum": [
            "LDAP",
            "LOCAL"
          ],
          "example": "LDAP"
        },
        "value": {
          "type": "string",
          "description": "domain value. Not required for LOCAL domain"
        }
      }
    },
    "Token": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "example": "12hh01209uj9d=="
        },
        "expiry": {
          "description": "expiry epoch time in secs.",
          "type": "integer",
          "format": "int64",
          "example": 1502919955
        }
      }
    },
    "VCenterDataSource": {
      "type": "object",
      "required": [
        "proxy_id",
        "username",
        "password"
      ],
      "properties": {
        "entity_type": {
          "$ref": "#/definitions/DataSourceType"
        },
        "id": {
          "type": "string"
        },
        "ip": {
          "type": "string",
          "example": "192.168.10.1"
        },
        "fqdn": {
          "type": "string",
          "example": "go.vc.org"
        },
        "proxy_id": {
          "type": "string",
          "description": "proxy vm which should register this vcenter"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "nickname": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "notes": {
          "type": "string"
        }
      },
      "example": {
        "entity_type": "VCENTER_DATA_SOURCE",
        "id": "1000:33:12890123",
        "ip": "192.168.10.1",
        "fqdn": "go.vc.org",
        "proxy_id": "1000:104:12313412",
        "username": "admin@vsphere.local",
        "password": null,
        "nickname": "vc1",
        "enabled": true,
        "notes": "VC 1"
      }
    },
    "VCenterDataSourceRequest": {
      "type": "object",
      "required": [
        "proxy_id",
        "username",
        "password"
      ],
      "properties": {
        "ip": {
          "type": "string",
          "example": "192.168.10.1"
        },
        "fqdn": {
          "type": "string",
          "example": null
        },
        "proxy_id": {
          "type": "string",
          "description": "proxy vm which should register this vcenter",
          "example": "1000:104:12313412"
        },
        "username": {
          "type": "string",
          "example": "admin@vsphere.local"
        },
        "password": {
          "type": "string"
        },
        "nickname": {
          "type": "string",
          "example": "vc1"
        },
        "enabled": {
          "type": "boolean"
        },
        "notes": {
          "type": "string"
        }
      }
    },
    "AristaSwitchDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        }
      ]
    },
    "JuniperSwitchDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        }
      ]
    },
    "CiscoSwitchDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        },
        {
          "properties": {
            "switch_type": {
              "$ref": "#/definitions/CiscoSwitchType"
            }
          }
        }
      ]
    },
    "DellSwitchDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        },
        {
          "properties": {
            "switch_type": {
              "$ref": "#/definitions/DellSwitchType"
            }
          }
        }
      ]
    },
    "BrocadeSwitchDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        },
        {
          "properties": {
            "switch_type": {
              "$ref": "#/definitions/DellSwitchType"
            }
          }
        }
      ]
    },
    "UCSManagerDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        }
      ]
    },
    "HPVCManagerDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        }
      ]
    },
    "UCSManagerDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        }
      ]
    },
    "HPVCManagerDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        }
      ]
    },
    "SwitchDataSourceRequest": {
      "type": "object",
      "required": [
        "proxy_id",
        "username",
        "password",
        "nickname"
      ],
      "properties": {
        "ip": {
          "type": "string",
          "example": "192.168.10.1"
        },
        "fqdn": {
          "type": "string",
          "example": "go.vc.org"
        },
        "proxy_id": {
          "type": "string",
          "description": "proxy vm which should register this vcenter"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "nickname": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "notes": {
          "type": "string"
        },
        "snmp_config": {
          "$ref": "#/definitions/SNMPConfig"
        }
      }
    },
    "SwitchDataSource": {
      "type": "object",
      "required": [
        "proxy_id",
        "username",
        "password",
        "nickname"
      ],
      "properties": {
        "entity_type": {
          "$ref": "#/definitions/DataSourceType"
        },
        "id": {
          "type": "string"
        },
        "ip": {
          "type": "string",
          "example": "192.168.10.1"
        },
        "fqdn": {
          "type": "string",
          "example": "go.vc.org"
        },
        "proxy_id": {
          "type": "string",
          "description": "proxy vm which should register this vcenter"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "nickname": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "notes": {
          "type": "string"
        },
        "snmp_config": {
          "$ref": "#/definitions/SNMPConfig"
        }
      }
    },
    "CiscoSwitchDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSourceRequest"
        },
        {
          "properties": {
            "switch_type": {
              "$ref": "#/definitions/CiscoSwitchType"
            }
          }
        }
      ]
    },
    "JuniperSwitchDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSourceRequest"
        }
      ]
    },
    "AristaSwitchDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSourceRequest"
        }
      ]
    },
    "BrocadeSwitchDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSourceRequest"
        },
        {
          "properties": {
            "switch_type": {
              "$ref": "#/definitions/BrocadeSwitchType"
            }
          }
        }
      ]
    },
    "DellSwitchDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSourceRequest"
        },
        {
          "properties": {
            "switch_type": {
              "$ref": "#/definitions/DellSwitchType"
            }
          }
        }
      ]
    },
    "CiscoSwitchType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "CATALYST_3000",
            "CATALYST_4500",
            "CATALYST_6500",
            "NEXUS_5K",
            "NEXUS_7K",
            "NEXUS_9K",
            "N1K"
          ]
        }
      }
    },
    "BrocadeSwitchType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "MLX",
            "VDX_6740",
            "VDX_6940"
          ]
        }
      }
    },
    "DellSwitchType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "FORCE_10_MXL_10",
            "POWERCONNECT_8024",
            "S4048",
            "Z9100",
            "S6000"
          ]
        }
      }
    },
    "FirewallType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "PaloAltoPanorama",
            "CheckPointvSecManagementServer"
          ]
        }
      }
    },
    "FirewallDataSource": {
      "type": "object",
      "required": [
        "proxy_id",
        "username",
        "password",
        "nickname"
      ],
      "properties": {
        "entity_type": {
          "$ref": "#/definitions/DataSourceType"
        },
        "switch_type": {
          "$ref": "#/definitions/FirewallType"
        },
        "id": {
          "type": "string"
        },
        "ip": {
          "type": "string",
          "example": "192.168.10.1"
        },
        "fqdn": {
          "type": "string",
          "example": "go.vc.org"
        },
        "proxy_id": {
          "type": "string",
          "description": "proxy vm which should register this vcenter"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "nickname": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "notes": {
          "type": "string"
        }
      }
    },
    "FirewallDataSourceRequest": {
      "type": "object",
      "required": [
        "proxy_id",
        "username",
        "password",
        "nickname"
      ],
      "properties": {
        "firewall_type": {
          "$ref": "#/definitions/FirewallType"
        },
        "ip": {
          "type": "string",
          "example": "192.168.10.1"
        },
        "fqdn": {
          "type": "string",
          "example": "go.vc.org"
        },
        "proxy_id": {
          "type": "string",
          "description": "proxy vm which should register this vcenter"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "nickname": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "notes": {
          "type": "string"
        }
      }
    },
    "NSXManagerDataSource": {
      "type": "object",
      "required": [
        "proxy_id",
        "username",
        "password",
        "nickname"
      ],
      "properties": {
        "entity_type": {
          "$ref": "#/definitions/DataSourceType"
        },
        "id": {
          "type": "string"
        },
        "ip": {
          "type": "string",
          "example": "192.168.10.1"
        },
        "fqdn": {
          "type": "string",
          "example": "go.vc.org"
        },
        "proxy_id": {
          "type": "string",
          "description": "proxy vm which should register this vcenter"
        },
        "vcenter_id": {
          "type": "string",
          "description": "Associated VCenter data source id"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "nickname": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "notes": {
          "type": "string"
        }
      }
    },
    "NSXManagerDataSourceRequest": {
      "type": "object",
      "required": [
        "proxy_id",
        "username",
        "password",
        "nickname"
      ],
      "properties": {
        "ip": {
          "type": "string",
          "example": "10.128.1.1"
        },
        "fqdn": {
          "type": "string",
          "example": "go.vc.org"
        },
        "proxy_id": {
          "type": "string",
          "description": "proxy vm which should register this vcenter",
          "example": "1000:104:1232423"
        },
        "vcenter_id": {
          "type": "string",
          "description": "Associated VCenter data source id"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "nickname": {
          "type": "string",
          "example": "vc-1"
        },
        "enabled": {
          "type": "boolean"
        },
        "notes": {
          "type": "string"
        }
      }
    },
    "DatasourceHealth": {
      "type": "object",
      "description": "Datasource Health state",
      "properties": {
        "health_status": {
          "type": "string",
          "enum": [
            "HEALTHY",
            "HEALTHY_WITH_WARNINGS",
            "UNHEALTHY"
          ]
        },
        "health_message": {
          "type": "string"
        },
        "health_error_code": {
          "type": "string"
        }
      }
    },
    "NetflowConfig": {
      "type": "object",
      "properties": {
        "all_dvs_enabled": {
          "type": "boolean",
          "description": "Enable Ip fix on all the DVSes.",
          "default": false
        },
        "dvs_configs": {
          "type": "array",
          "description": "array of dvs ipfix configs",
          "items": {
            "$ref": "#/definitions/DvsNetflowConfig"
          }
        }
      }
    },
    "DvsNetflowConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "dvs name"
        },
        "mor": {
          "type": "string",
          "description": "dvs moref id"
        },
        "netflow_enabled": {
          "type": "boolean",
          "default": false
        },
        "vrni_managed": {
          "type": "boolean",
          "default": false
        },
        "override": {
          "type": "boolean"
        },
        "version_supported": {
          "type": "boolean"
        },
        "all_dvpg_enabled": {
          "type": "boolean"
        },
        "dvpg_count": {
          "type": "integer",
          "format": "int32"
        },
        "dvpgs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DVPGNetflowConfig"
          }
        }
      }
    },
    "DVPGNetflowConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "mor": {
          "type": "string",
          "description": "dvpg moref id"
        },
        "netflow_enabled": {
          "type": "boolean"
        },
        "uplink": {
          "type": "boolean"
        }
      }
    },
    "SNMPConfig": {
      "type": "object",
      "properties": {
        "snmp_enabled": {
          "type": "boolean"
        },
        "snmp_version": {
          "type": "string",
          "enum": [
            "v2c",
            "v3"
          ]
        },
        "config_snmp_2c": {
          "$ref": "#/definitions/SNMP2cConfig"
        },
        "config_snmp_3": {
          "$ref": "#/definitions/SNMP3Config"
        }
      }
    },
    "SNMP3Config": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "context_name": {
          "type": "string"
        },
        "authentication_type": {
          "type": "string",
          "enum": [
            "NONE",
            "MD5",
            "SHA"
          ]
        },
        "authentication_password": {
          "type": "string"
        },
        "privacy_type": {
          "type": "string",
          "enum": [
            "AES",
            "DES",
            "AES128",
            "AES192",
            "AES256",
            "3DES"
          ]
        }
      }
    },
    "SNMP2cConfig": {
      "type": "object",
      "properties": {
        "community_string": {
          "type": "string"
        }
      }
    },
    "EntityId": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string",
          "description": "Entity Identifier",
          "example": "1000:104:12213212"
        },
        "entity_type": {
          "$ref": "#/definitions/EntityType"
        }
      }
    },
    "DataSourceEntityId": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string",
          "description": "Entity Identifier",
          "example": "1000:104:12213212"
        },
        "entity_type": {
          "$ref": "#/definitions/DataSourceType"
        }
      }
    },
    "EntityIdWithTime": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string",
          "description": "Entity Identifier"
        },
        "entity_type": {
          "$ref": "#/definitions/EntityType"
        },
        "time": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "EC2Instance": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseVirtualMachine"
        },
        {
          "properties": {
            "vpc": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "VirtualMachine": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseVirtualMachine"
        },
        {
          "properties": {
            "cluster": {
              "$ref": "#/definitions/Reference"
            },
            "resource_pool": {
              "$ref": "#/definitions/Reference"
            },
            "security_tags": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "layer2_networks": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "host": {
              "$ref": "#/definitions/Reference"
            },
            "vlans": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Vlan"
              }
            }
          }
        }
      ]
    },
    "BaseVirtualMachine": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "ip_addresses": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IpV4Address"
              }
            },
            "default_gateway": {
              "type": "string"
            },
            "vnics": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "security_groups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "src_firewall_rules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleSet"
              }
            },
            "dst_firewall_rules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleSet"
              }
            },
            "ip_sets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          }
        }
      ]
    },
    "Cluster": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "total_cpus": {
              "type": "integer",
              "format": "int32"
            },
            "total_memory": {
              "type": "integer",
              "format": "int32"
            },
            "num_cpu_cores": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      ]
    },
    "SecurityTag": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "description": {
              "type": "string"
            },
            "security_groups": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "ResourcePool": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "vcenter": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "Host": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "vmknic": {
              "$ref": "#/definitions/Reference"
            },
            "pnics": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "cluster": {
              "$ref": "#/definitions/Reference"
            },
            "vcenter": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "Reference": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string"
        },
        "entity_type": {
          "$ref": "#/definitions/EntityType"
        }
      }
    },
    "IpV4Address": {
      "type": "object",
      "properties": {
        "ip_address": {
          "type": "string"
        },
        "netmask": {
          "type": "string"
        },
        "network_address": {
          "type": "string"
        }
      }
    },
    "Vmknic": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "ip_addresses": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IpV4Address"
              }
            },
            "vlan": {
              "$ref": "#/definitions/Vlan"
            },
            "host": {
              "$ref": "#/definitions/Reference"
            },
            "layer2_network": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "Vnic": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "ip_addresses": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IpV4Address"
              }
            },
            "layer2_network": {
              "$ref": "#/definitions/Reference"
            },
            "vlan": {
              "$ref": "#/definitions/Vlan"
            },
            "vm": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "LogicalSwitch": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        }
      ]
    },
    "Vlan": {
      "type": "object",
      "properties": {
        "begin": {
          "type": "integer",
          "x-searchable": true
        },
        "end": {
          "type": "integer"
        }
      }
    },
    "NSXIPSet": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseIPSet"
        },
        {
          "properties": {
            "nsx_managers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "universal": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "EC2IPSet": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseIPSet"
        }
      ]
    },
    "BaseIPSet": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "ip_addresses": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IpV4Address"
              }
            },
            "ip_ranges": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IpAddressRange"
              }
            },
            "ip_numeric_ranges": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IpNumericRange"
              }
            },
            "parent_security_groups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          }
        }
      ]
    },
    "IpAddressRange": {
      "properties": {
        "start_ip": {
          "type": "string"
        },
        "end_ip": {
          "type": "string"
        }
      }
    },
    "IpNumericRange": {
      "properties": {
        "start": {
          "type": "integer",
          "format": "int64"
        },
        "end": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "NSXSecurityGroup": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseSecurityGroup"
        },
        {
          "properties": {
            "nsx_managers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "universal": {
              "type": "boolean"
            },
            "ip_sets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "security_tags": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          }
        }
      ]
    },
    "EC2SecurityGroup": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseSecurityGroup"
        },
        {
          "properties": {
            "vpc": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "BaseSecurityGroup": {
      "allOf": [
        {
          "$ref": "#/definitions/Group"
        },
        {
          "properties": {
            "direct_source_rules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleSet"
              }
            },
            "direct_dest_rules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleSet"
              }
            },
            "indirect_source_rules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleSet"
              }
            },
            "indirect_dest_rules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleSet"
              }
            }
          }
        }
      ]
    },
    "RuleSet": {
      "type": "object",
      "properties": {
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reference"
          }
        },
        "firewall": {
          "$ref": "#/definitions/Reference"
        },
        "rule_set_type": {
          "type": "string",
          "enum": [
            "NSX_STANDARD",
            "NSX_REDIRECT",
            "AWS_STANDARD"
          ]
        }
      }
    },
    "BaseFirewallRule": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "rule_id": {
              "type": "string"
            },
            "section_id": {
              "type": "string"
            },
            "section_name": {
              "type": "string"
            },
            "sequence_number": {
              "type": "integer"
            },
            "source_any": {
              "type": "boolean"
            },
            "destination_any": {
              "type": "boolean"
            },
            "services_any": {
              "type": "boolean"
            },
            "sources": {
              "$ref": "#/definitions/Reference"
            },
            "destinations": {
              "$ref": "#/definitions/Reference"
            },
            "services": {
              "$ref": "#/definitions/Reference"
            },
            "action": {
              "$ref": "#/definitions/FirewallAction"
            },
            "disabled": {
              "type": "boolean"
            },
            "source_inversion": {
              "type": "boolean"
            },
            "destination_inversion": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "NSXFirewallRule": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseFirewallRule"
        },
        {
          "properties": {
            "logging_enabled": {
              "type": "boolean"
            },
            "direction": {
              "$ref": "#/definitions/FirewallDirection"
            }
          }
        }
      ]
    },
    "NSXRedirectRule": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseFirewallRule"
        },
        {
          "properties": {
            "service_profile": {
              "type": "string"
            }
          }
        }
      ]
    },
    "EC2SGFirewallRule": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseFirewallRule"
        },
        {
          "properties": {
            "vpc": {
              "$ref": "#/definitions/Reference"
            },
            "direction": {
              "$ref": "#/definitions/EC2FirewallDirection"
            },
            "owner_security_group": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "EC2FirewallDirection": {
      "type": "string",
      "enum": [
        "INBOUND",
        "OUTBOUND"
      ]
    },
    "FirewallDirection": {
      "type": "string",
      "enum": [
        "IN",
        "OUT",
        "IN_OUT"
      ]
    },
    "FirewallAction": {
      "type": "string",
      "enum": [
        "ALLOW",
        "ACCEPT",
        "DENY",
        "DROP",
        "REJECT",
        "REDIRECT",
        "DO_NOT_REDIRECT"
      ]
    },
    "Group": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "members": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "parent": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "Flow": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "src_vm": {
              "$ref": "#/definitions/Reference"
            },
            "dst_vm": {
              "$ref": "#/definitions/Reference"
            },
            "src_ip": {
              "$ref": "#/definitions/IpV4Address"
            },
            "dst_ip": {
              "$ref": "#/definitions/IpV4Address"
            },
            "src_l2_network": {
              "$ref": "#/definitions/Reference"
            },
            "dst_l2_network": {
              "$ref": "#/definitions/Reference"
            },
            "port": {
              "$ref": "#/definitions/PortRange"
            },
            "src_ip_set": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "dst_ip_set": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "src_security_group": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "dst_security_group": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "flow_type": {
              "$ref": "#/definitions/FlowTrafficType"
            },
            "src_security_tag": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "dst_security_tag": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "src_host": {
              "$ref": "#/definitions/Reference"
            },
            "dst_host": {
              "$ref": "#/definitions/Reference"
            },
            "src_vm_tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "dst_vm_tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "within_host": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "FlowTrafficType": {
      "type": "object",
      "properties": {
        "flow_type": {
          "type": "string",
          "enum": [
            "INTERNET",
            "EAST_WEST"
          ]
        }
      }
    },
    "PortRange": {
      "type": "object",
      "properties": {
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "end": {
          "type": "integer",
          "format": "int32"
        },
        "display": {
          "type": "string"
        },
        "ianaName": {
          "type": "string"
        },
        "ianaPortDisplay": {
          "type": "string"
        }
      }
    },
    "SearchRequest": {
      "type": "object",
      "properties": {
        "entity_type": {
          "$ref": "#/definitions/AllEntityType"
        },
        "filter": {
          "type": "string",
          "description": "query filter"
        },
        "sort_by": {
          "$ref": "#/definitions/SortByClause"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "cursor": {
          "type": "string"
        },
        "time_range": {
          "$ref": "#/definitions/TimeRange"
        }
      }
    },
    "SortByClause": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "order": {
          "type": "string",
          "enum": [
            "ASC",
            "DESC"
          ]
        }
      }
    },
    "TimeRange": {
      "type": "object",
      "properties": {
        "start_time_epoch": {
          "type": "integer",
          "format": "int64"
        },
        "end_time_epoch": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ProblemEvent": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEvent"
        },
        {
          "properties": {
            "event_close_time": {
              "type": "integer",
              "format": "int64"
            },
            "severity": {
              "type": "string",
              "enum": [
                "CRITICAL",
                "MODERATE",
                "WARNING",
                "INFO"
              ]
            },
            "state": {
              "type": "string",
              "enum": [
                "OPEN",
                "CLOSED"
              ]
            }
          }
        }
      ]
    },
    "BaseEvent": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "anchor_entities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "message": {
              "type": "string"
            },
            "event_time": {
              "type": "integer",
              "format": "int64"
            },
            "event_tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "PagedListResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityId"
          }
        },
        "cursor": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "total_count": {
          "type": "integer"
        },
        "start_time": {
          "type": "integer",
          "format": "int64"
        },
        "end_time": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DataSourceListResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataSourceEntityId"
          }
        },
        "total_count": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "NodeListResult": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeId"
          }
        },
        "total_count": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "PagedListResponseWithTime": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityIdWithTime"
          }
        },
        "cursor": {
          "type": "string",
          "example": "ML12eu02=="
        },
        "total_count": {
          "type": "integer",
          "example": 100
        },
        "start_time": {
          "type": "integer",
          "format": "int64",
          "example": 1504739809
        },
        "end_time": {
          "type": "integer",
          "format": "int64",
          "example": 1504739809
        }
      }
    },
    "BaseEntity": {
      "type": "object",
      "discriminator": "entity_type",
      "properties": {
        "entity_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "entity_type": {
          "$ref": "#/definitions/EntityType"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        }
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "DataSourceType": {
      "type": "string",
      "enum": [
        "CISCO_SWITCH_DATA_SOURCE",
        "DELL_SWITCH_DATA_SOURCE",
        "ARISTA_SWITCH_DATA_SOURCE",
        "BROCADE_SWITCH_DATA_SOURCE",
        "JUNIPER_SWITCH_DATA_SOURCE",
        "VCENTER_DATA_SOURCE",
        "NSXV_DATA_SOURCE",
        "UCS_DATA_SOURCE",
        "HPVC_DATA_SOURCE",
        "HP_ONEVIEW_DATA_SOURCE",
        "PAN_FIREWALL_DATA_SOURCE",
        "CHECKPOINT_FIREWALL_DATA_SOURCE"
      ]
    },
    "NodeId": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Entity Identifier",
          "example": "1000:104:12213212"
        },
        "entity_type": {
          "$ref": "#/definitions/NodeType"
        }
      }
    },
    "NodeType": {
      "type": "string",
      "enum": [
        "Node"
      ]
    },
    "EntityType": {
      "type": "string",
      "enum": [
        "VirtualMachine",
        "EC2Instance",
        "Host",
        "Vnic",
        "Vmknic",
        "LogicalSwitch",
        "Cluster",
        "SecurityTag",
        "ResourcePool",
        "NSXIPSet",
        "EC2IPSet",
        "NSXSecurityGroup",
        "EC2SecurityGroup",
        "Flow",
        "ProblemEvent",
        "Application",
        "Tier",
        "NSXFirewallRule",
        "EC2SGFirewallRule",
        "NSXRedirectRule"
      ]
    },
    "MetaEntityType": {
      "type": "string",
      "enum": [
        "Group",
        "BaseSecurityGroup",
        "BaseEvent",
        "BaseVirtualMachine",
        "BaseFirewallRule",
        "BaseIPSet"
      ]
    },
    "AllEntityType": {
      "type": "string",
      "enum": [
        "Group",
        "BaseSecurityGroup",
        "BaseEvent",
        "BaseVirtualMachine",
        "BaseFirewallRule",
        "BaseIPSet",
        "VirtualMachine",
        "EC2Instance",
        "Host",
        "Vnic",
        "Vmknic",
        "LogicalSwitch",
        "Cluster",
        "SecurityTag",
        "ResourcePool",
        "NSXIPSet",
        "EC2IPSet",
        "NSXSecurityGroup",
        "EC2SecurityGroup",
        "Flow",
        "ProblemEvent",
        "Application",
        "Tier",
        "NSXFirewallRule",
        "EC2SGFirewallRule",
        "NSXRedirectRule"
      ]
    },
    "Node": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "entity_type": {
          "$ref": "#/definitions/NodeType"
        },
        "node_type": {
          "type": "string",
          "enum": [
            "PROXY_VM",
            "PLATFORM_VM"
          ]
        },
        "node_id": {
          "type": "string"
        },
        "ip_address": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Application": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "create_time": {
              "type": "integer",
              "format": "int64"
            },
            "created_by": {
              "type": "string"
            },
            "last_modified_time": {
              "type": "integer",
              "format": "int64"
            },
            "last_modified_by": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ApplicationRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        }
      }
    },
    "TierRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "group_membership_criteria": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupMembershipCriteria"
          }
        }
      }
    },
    "Tier": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "group_membership_criteria": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupMembershipCriteria"
          }
        }
      }
    },
    "GroupMembershipCriteria": {
      "type": "object",
      "description": "EntityType currently restricted to VirtualMachine",
      "properties": {
        "entity_type": {
          "$ref": "#/definitions/EntityType"
        },
        "filter": {
          "type": "string",
          "description": "As defined in search end point"
        }
      }
    },
    "TierMembers": {
      "type": "object",
      "description": "Members of a tier",
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reference"
          }
        }
      }
    },
    "RecommendedRules": {
      "type": "object",
      "properties": {
        "recommended_rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecommendedRule"
          }
        }
      }
    },
    "RecommendedRule": {
      "type": "object",
      "properties": {
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reference"
          }
        },
        "destinations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reference"
          }
        },
        "protocols": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "port_ranges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PortRange"
          }
        },
        "action": {
          "type": "string",
          "enum": [
            "ALLOW",
            "DROP"
          ]
        }
      }
    },
    "RecommendedRulesRequest": {
      "type": "object",
      "properties": {
        "union_scopes": {
          "type": "array",
          "$ref": "#/definitions/Scope"
        },
        "intersection_scope": {
          "type": "array",
          "$ref": "#/definitions/Scope"
        }
      }
    },
    "Scope": {
      "type": "object",
      "properties": {
        "entity_type": {
          "$ref": "#/definitions/EntityType"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "filter": {
          "type": "string"
        }
      }
    },
    "ApiError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorDetail"
          }
        }
      }
    },
    "ErrorDetail": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "target": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  }
}