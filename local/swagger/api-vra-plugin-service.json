{
  "swagger" : "2.0",
  "info" : {
    "description" : "# Extensibility Service\n \nThis document describes how to use the Extensibility Service REST API.\n \n## What Is the Extensibility Service?\n \nThe Extensibility service enables you to manage extensions, plugins, and wizard states.  \n\n \n## Typical Use Cases\n \nYou can use the Extensibility REST API to:\n \n * Create, retrieve, update, and delete a plugin.\n \n * List all the plugins.\n \n * Retrieve and delete an extension.\n \n * List all the extensions.\n \n * List all the extensions for a plugin.\n \n * Set or get wizard state for a logged-in user.\n \n \n## Key Concepts\n\n### Host Application \n\nA host application is a web application that is being extended with a pluggable UI.  The host application discovers plugins, manages plugin life cycle, and serves the UI from the plugin extensions to the extension hosts.\n\n### Plugin \n\nA plugin is a packaged set of extensions, and possibly extension hosts. Commonly, a plugin contains JavaScript that runs in the browser along with other web resources like HTML and CSS.\n\n### Extension \n\nAn extension is a component that extends the functionality of another component based on a predefined contract.  Extensions are packaged in plugins and contain metadata that describes what component it is to be extended and how it is extended.\n\n### Extension Host \n\nAn extension host is a component that can be extended with an extension.  To become an extension host, a component defines one or more extension points.  The host application provides the framework for making the extensions available to an extension host.  In many cases, extension hosts are UI widgets, for example, a tabbed view that dynamically adds tabs defined in extensions.\n\n### Extension Point \n\nAn extension point defines the contract between an extension host and extensions.  It has a unique identifier that extensions use to hook into extension hosts.  The extension host also defines the properties that should be provided by extensions of a given extension point. \n\n### Wizard State\n\nThe application has goal based wizards to enable users to complete a number of steps to achieve a goal. Wizard state is a domain object persisting the last step visited by the user.  It does not imply that they have completed all preceding steps, nor even the current step.\n \n\n",
    "version" : "7.5.0-SNAPSHOT",
    "title" : "Extensibility Service API"
  },
  "basePath" : "/component-registry",
  "tags" : [ {
    "name" : "extensibility-plugins"
  }, {
    "name" : "extensibility-wizard-states"
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/api/plugins" : {
      "get" : {
        "summary" : "Returns a page of the resources",
        "description" : "",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "extensibility-plugins" ],
        "summary" : "Create a plugin",
        "description" : "A plugin is defined using metadata that specifies the extension it implements. An extension is a component that extends the functionality of another component based on a predefined contract. Extensions are packaged in plugins, and contain metadata that describes what component it is extending and how.",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The plugin to be created",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Plugin"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Plugin"
            }
          },
          "201" : {
            "description" : "Successfully saved a plugin"
          }
        }
      }
    },
    "/api/plugins/extensions" : {
      "get" : {
        "tags" : [ "extensibility-plugins" ],
        "summary" : "Get all the extensions",
        "description" : "Get all the extensions for pointIds.  If pointIds is empty or null, get all the extensions",
        "parameters" : [ {
          "name" : "pointId",
          "in" : "query",
          "description" : "A comma separator list of point ids",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageExtensionInfo"
            }
          }
        }
      }
    },
    "/api/plugins/extensions/{extensionId}" : {
      "get" : {
        "tags" : [ "extensibility-plugins" ],
        "summary" : "Get an extension",
        "description" : "Get an extension by extensionId",
        "parameters" : [ {
          "name" : "extensionId",
          "in" : "path",
          "description" : "The id of the extension to be retrieved",
          "required" : true,
          "type" : "string",
          "pattern" : ".*"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/extensionInfo"
            }
          }
        }
      }
    },
    "/api/plugins/{id}" : {
      "get" : {
        "tags" : [ "extensibility-plugins" ],
        "summary" : "Get a plugin",
        "description" : "Retrieve a plugin by id.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of plugin",
          "required" : true,
          "type" : "string",
          "pattern" : ".+"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Plugin"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "extensibility-plugins" ],
        "summary" : "Update a plugin",
        "description" : "Update the existing plugin identified by the input id with the input plugin.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of plugin to be updated",
          "required" : true,
          "type" : "string",
          "pattern" : ".+"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The plugin data to be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Plugin"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Plugin"
            }
          },
          "204" : {
            "description" : ""
          }
        }
      },
      "delete" : {
        "tags" : [ "extensibility-plugins" ],
        "summary" : "Delete a plugin",
        "description" : "Delete a plugin by id.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of plugin",
          "required" : true,
          "type" : "string",
          "pattern" : ".+"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully deleted plugin"
          }
        }
      }
    },
    "/api/plugins/{id}/extensions" : {
      "get" : {
        "tags" : [ "extensibility-plugins" ],
        "summary" : "List all the extensions for a plugin",
        "description" : "Get a list of all the extensions for a plugin",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of plugin",
          "required" : true,
          "type" : "string",
          "pattern" : ".*"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageExtensionInfo"
            }
          }
        }
      }
    },
    "/api/wizardstates" : {
      "get" : {
        "summary" : "Returns a page of the resources",
        "description" : "",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "extensibility-wizard-states" ],
        "summary" : "Create a wizard state for the logged in user",
        "description" : "Create a wizard state for the logged in user.  The application has goal based wizards to enable users to complete a number of steps to achieve a goal.  This domain object persists the last step visited by the user. It does not imply that they have completed all preceding steps, nor even the current step.",
        "operationId" : "createWizardState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The wizard state to be created",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WizardState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/WizardState"
            }
          },
          "201" : {
            "description" : "Successfully saved a wizard state"
          }
        }
      }
    },
    "/api/wizardstates/current" : {
      "get" : {
        "tags" : [ "extensibility-wizard-states" ],
        "summary" : "Get the current wizard state for the logged in user",
        "description" : "Get the current wizard state for the logged in user.  The application has goal based wizards to enable users to complete a number of steps to achieve a goal.  This domain object persists the last step visited by the user. It does not imply that they have completed all preceding steps, nor even the current step.",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/WizardState"
            }
          }
        }
      }
    },
    "/api/wizardstates/{id}" : {
      "get" : {
        "tags" : [ "extensibility-wizard-states" ],
        "summary" : "Gets the wizard state identified by id",
        "description" : "",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "the id of the wizard state",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/WizardState"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "extensibility-wizard-states" ],
        "summary" : "Remove a wizard state",
        "description" : "Remove the wizard state matching the provided id.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "the id of the wizard state",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      }
    }
  },
  "definitions" : {
    "PageExtensionInfo" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/extensionInfo"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "Plugin" : {
      "type" : "object",
      "required" : [ "metadata", "pluginUrl" ],
      "properties" : {
        "pluginUrl" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "metadata" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        }
      }
    },
    "Sort" : {
      "type" : "object"
    },
    "WizardState" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "userId" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "tenantId" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "goalId" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        }
      }
    },
    "extensionInfo" : {
      "type" : "object",
      "required" : [ "plugin" ],
      "properties" : {
        "plugin" : {
          "$ref" : "#/definitions/pluginInfo"
        },
        "extensionPointId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "extensionId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "label" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "iconUrl" : {
          "type" : "string"
        },
        "json" : {
          "type" : "string"
        },
        "permissions" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "xml" : {
        "name" : "extensionInfo"
      }
    },
    "pluginInfo" : {
      "type" : "object",
      "properties" : {
        "pluginId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "publisher" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "pluginInfo"
      }
    }
  }
}