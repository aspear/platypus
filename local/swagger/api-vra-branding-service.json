{
  "swagger" : "2.0",
  "info" : {
    "description" : "# Branding Service\n\nThis document describes how to use the Branding Service REST API.\n\n## What Is the Branding Service?\n\n\nThe Branding service enables the user to customize the VRA UI header and footer.  The configurable properties include logo image, company name, product name, background color, text color, copyright notice, privacy policy link, and contact link.\n\nThere are three levels of branding configuration -- default, system, and tenant.  The default branding is used when no system or tenant branding object has been created and enabled. \n\nThe system administrator or tenant administrator can create system-level and tenant-level brandings.  The effective branding is the branding that the user sees, and it is determined according the following precedence: tenant, system, default.\n\n## Typical Use Cases\n\nYou can use the Branding REST API to:\n\n * Create/update/delete a branding object.\n\n * Retrieve the default branding object.\n\n * Retrieve the system-level branding object as a system administrator.\n\n * Retrieve a tenant-level branding object as a tenant administrator.\n\n * Retrieve the effective branding object for a user. \n \n\n## Key Concepts\n\n### Branding object\n\nAn object that encapsulate all the branding properties, such as logo image, company name, product name, background color, text color, copyright notice, privacy policy link, and contact link.\n\n### Default Branding\n\nThe factory default branding object.  This branding is used if neither system branding nor tenant branding is enabled.\n\n### System Branding\n\nThe system-level branding object.  This branding is used when tenant branding is not enabled.\n\n### Tenant Branding\n\nThe tenant-level branding object.  This branding is used if it is enabled.\n",
    "version" : "7.5.0-SNAPSHOT",
    "title" : "Branding Service API"
  },
  "basePath" : "/branding-service",
  "tags" : [ {
    "name" : "branding"
  }, {
    "name" : "messsageboard"
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/api/brandings" : {
      "get" : {
        "summary" : "Returns a page of the resources",
        "description" : "",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/brandings/config" : {
      "get" : {
        "tags" : [ "branding" ],
        "summary" : "Get the branding object for the current tenant",
        "description" : "Retrieving the branding object for the current tenant.  This branding object is \nspecified to the current tenant.",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Branding"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "branding" ],
        "summary" : "Update the branding",
        "description" : "Updating the branding.",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The branding to be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Branding"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Branding"
            }
          }
        }
      }
    },
    "/api/brandings/default" : {
      "get" : {
        "tags" : [ "branding" ],
        "summary" : "Get the system default branding for a tenant",
        "description" : "Retrieving the system default branding for a tenant.",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Branding"
            }
          }
        }
      }
    },
    "/api/brandings/effective" : {
      "get" : {
        "tags" : [ "branding" ],
        "summary" : "Get effective  branding",
        "description" : "Retrieving the effective branding for a user.  This effective branding is the \nbraanding a user will see upon login",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Branding"
            }
          }
        }
      }
    },
    "/api/brandings/{id}" : {
      "delete" : {
        "tags" : [ "branding" ],
        "summary" : "Delete a branding",
        "description" : "Deleting a branding by id.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of branding",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "204" : {
            "description" : "Branding deleted successfully"
          }
        }
      }
    },
    "/api/messageboard" : {
      "get" : {
        "tags" : [ "messsageboard" ],
        "summary" : "Get the Message Board for current tenant",
        "description" : "Gets the Message Board for current tenant",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MessageBoard"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "messsageboard" ],
        "summary" : "Updates or Creates a new Message Board",
        "description" : "Updates or Creates a new Message Board ",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MessageBoard"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Content type updated successfully",
            "schema" : {
              "$ref" : "#/definitions/RestEntity"
            }
          },
          "201" : {
            "description" : "Content type created successfully"
          }
        }
      }
    },
    "/api/messageboard/whiteListedUrls" : {
      "get" : {
        "tags" : [ "messsageboard" ],
        "summary" : "Get the Message Board url white list for current tenant",
        "description" : "Gets the Message Board url white list for current tenant",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageMsgBoardUrlWhiteListEntry"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "messsageboard" ],
        "summary" : "Updates or Creates a new Message Board url whitelist  entry",
        "description" : "Updates or Creates a new Message Board url whitelist  entry",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MsgBoardUrlWhiteListEntry"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MsgBoardUrlWhiteListEntry"
            }
          }
        }
      }
    },
    "/api/messageboard/whiteListedUrls/{id}" : {
      "put" : {
        "summary" : "Update message Board url white list entry",
        "description" : "Update a message Board url white list entry upon the existence and validation.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The UUID of the message Board url white list entry to be updated",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The message Board url white list entry to be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MsgBoardUrlWhiteListEntry"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "delete" : {
        "summary" : "Delete a message Board url white list entry",
        "description" : "Delete message Board url white list entry corresponding to the given id.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The uuid of a message Board url white list entry.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      }
    }
  },
  "definitions" : {
    "Branding" : {
      "type" : "object",
      "required" : [ "tenantName" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "backgroundColor" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "textColor" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "companyLogo" : {
          "type" : "string"
        },
        "companyName" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "productName" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "disclaimer" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "copyright" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "contactUsLink" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "tenantName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "global" : {
          "type" : "boolean",
          "default" : false
        },
        "useSharedSettings" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "MessageBoard" : {
      "type" : "object",
      "properties" : {
        "url" : {
          "type" : "string"
        },
        "customMessage" : {
          "type" : "string"
        },
        "passUserId" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "MsgBoardUrlWhiteListEntry" : {
      "type" : "object",
      "required" : [ "tenant" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "url" : {
          "type" : "string"
        },
        "tenant" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        }
      }
    },
    "PageMsgBoardUrlWhiteListEntry" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MsgBoardUrlWhiteListEntry"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "RestEntity" : {
      "type" : "object",
      "properties" : {
        "body" : {
          "type" : "object"
        },
        "httpStatus" : {
          "type" : "string",
          "enum" : [ "CONTINUE", "SWITCHING_PROTOCOLS", "PROCESSING", "CHECKPOINT", "OK", "CREATED", "ACCEPTED", "NON_AUTHORITATIVE_INFORMATION", "NO_CONTENT", "RESET_CONTENT", "PARTIAL_CONTENT", "MULTI_STATUS", "ALREADY_REPORTED", "IM_USED", "MULTIPLE_CHOICES", "MOVED_PERMANENTLY", "FOUND", "MOVED_TEMPORARILY", "SEE_OTHER", "NOT_MODIFIED", "USE_PROXY", "TEMPORARY_REDIRECT", "PERMANENT_REDIRECT", "BAD_REQUEST", "UNAUTHORIZED", "PAYMENT_REQUIRED", "FORBIDDEN", "NOT_FOUND", "METHOD_NOT_ALLOWED", "NOT_ACCEPTABLE", "PROXY_AUTHENTICATION_REQUIRED", "REQUEST_TIMEOUT", "CONFLICT", "GONE", "LENGTH_REQUIRED", "PRECONDITION_FAILED", "PAYLOAD_TOO_LARGE", "REQUEST_ENTITY_TOO_LARGE", "URI_TOO_LONG", "REQUEST_URI_TOO_LONG", "UNSUPPORTED_MEDIA_TYPE", "REQUESTED_RANGE_NOT_SATISFIABLE", "EXPECTATION_FAILED", "I_AM_A_TEAPOT", "INSUFFICIENT_SPACE_ON_RESOURCE", "METHOD_FAILURE", "DESTINATION_LOCKED", "UNPROCESSABLE_ENTITY", "LOCKED", "FAILED_DEPENDENCY", "UPGRADE_REQUIRED", "PRECONDITION_REQUIRED", "TOO_MANY_REQUESTS", "REQUEST_HEADER_FIELDS_TOO_LARGE", "INTERNAL_SERVER_ERROR", "NOT_IMPLEMENTED", "BAD_GATEWAY", "SERVICE_UNAVAILABLE", "GATEWAY_TIMEOUT", "HTTP_VERSION_NOT_SUPPORTED", "VARIANT_ALSO_NEGOTIATES", "INSUFFICIENT_STORAGE", "LOOP_DETECTED", "BANDWIDTH_LIMIT_EXCEEDED", "NOT_EXTENDED", "NETWORK_AUTHENTICATION_REQUIRED" ]
        },
        "httpHeaders" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "setLocation" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "Sort" : {
      "type" : "object"
    }
  }
}