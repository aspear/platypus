{
  "swagger" : "2.0",
  "info" : {
    "description" : "# Property Service API Specification\n\n## What Is the Property Service?\n\nThe property service provides APIs to manage property definitions and property groups.\n\n## Typical Use Cases\n\nYou can use the property service REST API to:\n\n* Create, update, and delete property definitions.\n* Retrieve permissible values for property definitions.\n* Create, update, and delete property groups.\n\n## Key Concepts\n\n### Custom Property\n\nA custom property is a string key-value pair that can be associated with some object types in vRealize Automation. Custom properties provide a mechanism to annotate objects with custom attributes and can be used to invoke custom behavior during provisioning.\n\nCustom properties have the following attributes:\n\n* Name - the identifier for this custom property. It is a user-provided string value and must be unique within the object on which the property is defined.\n* Value - the value to assign to this property. The value is optional.\n* Show in Request - a flag indicating whether this property should be shown on a request form. If true, the request form will present this property as an input for the requesting user.\n* Encrypted - a flag indicating whether the value of the property should be encrypted.\n\n### Property Definition\n\nA property definition provides request-time enhancement for custom properties. Without a corresponding property definition, a custom property that is displayed on a request form appears as a simple text input field.\n\n Property definitions allow you to customize the way a property appears to show a type-specific control. For example, by defining a property definition, you can configure a custom property that represents a true or false value to appear as a checkbox.\n\n### Property Groups\n\nA property group is a named collection of custom properties. Some vRealize Automation objects (for example, blueprints) allow linking property groups as well as individual custom properties. This allows properties to be grouped into logically dependent sets. For example, a property group might define a set of custom properties that configure a virtual machine to be deployed into a particular environment.\n\nCustom properties in property groups behave the same way as custom properties defined directly on any other type of vRealize Automation object.\n\n### Tenancy\n\nProperty groups and property definitions may be either tenanted or global:\n\n* Tenanted property groups and definitions are accessible only in the tenant they are defined in. Tenanted property groups and definitions may be created by tenant administrators.\n* Global property groups and definitions are accessible to any tenant. Global property groups and definitions may be created by fabric group administrators and system administrators.\n\nA user who is both a tenant administrator and a fabric group administrator or system administrator can create either global or tenanted property groups and definitions.\n\n### Unique Identifiers\n\nProperty groups and property definitions have user-specified unique identifiers. This supports referencing both types of object in blueprints as code. However, to maximize portability of both types of object across tenants and vRealize Automation systems, the tenant ID is not part of the reference. This requires that unique identifiers satisfy the following uniqueness constraint:\n\n* A tenanted property group cannot have the same ID as another global property group. It may, however, have the same ID as a property group in another tenant.\n* A global property group cannot have the same ID as another tenanted property group in any tenant.\n\nIn effect, a property group's identifier can be used by either:\n\n* Any number of tenanted property groups but no global ones.\n* A single global property group but no tenanted ones.\n\nThe same rules apply for property definitions.\n\n### Permissible Values\n\nA property definition may define a field as a dropdown. In this case, the definition must also define the values of that dropdown. It may do this in one of two ways:\n\n* A static list of values.\n* A list of values retrieved by executing a vRealize Orchestrator (vRO) script action.\n\nThe property service provides an API to retrieve the permissible values of a property definition. In the case of a static list, this is redundant, because the list is also provided as part of the property definition object itself. However, in the case where the list if populated by a vRO script action, the action is invoked every time the list must be rendered and so the values API must be called to retrieve these values.\n\n## How the Property Service Works\n\nThe property service works as follows:\n\n1. Tenant administrators and fabric administrators define property groups and property definitions as required.\n2. Blueprint authors link property groups to their blueprints and define other custom properties as required.\n3. At request time, references to property groups are resolved and properties from any linked property groups are unwrapped and set directly on the component to which the property group was attached.\n4. At request time, the request form queries the property dictionary for any property definitions matching custom properties that are to be displayed on the request form.\n5. The request form renders the custom properties according to their corresponding property definitions\n\n## API Usage Examples\n\n### Retrieve Dropdown Values for a Property Definition\n\nFirst, create a property definition. In this example, the property definition is for a property called \"costcenter\" that retrieves a set of cost centers from an external system via a vRO script action.\n\n    PUT /api/propertydefinitions/costcenter\n\n    {\n     \"id\" : \"costcenter\",\n     \"label\" : \"Cost Center\",\n     \"description\" : null,\n     \"dataType\" : {\n       \"type\" : \"primitive\",\n       \"typeId\" : \"STRING\"\n     },\n     \"isMultiValued\" : false,\n     \"displayAdvice\" : \"DROPDOWN\",\n     \"tenantId\" : \"tenant1\",\n     \"orderIndex\" : null,\n     \"permissibleValues\" : {\n       \"type\" : \"dynamic\",\n       \"customAllowed\" : false,\n       \"dependencies\" : [ ],\n       \"context\" : {\n         \"providerEntityId\" : \"org.example.accounts/getCostCenters\"\n       }\n     }\n    }\n\nNow, the values associated with this property definition can be retrieved by calling the API below:\n\n    POST /api/propertydefinitions/costcenter/values\n\n    {\n      \"tenantId\" : \"pepsi\",\n      \"dependencyValues\" : {\n        \"entries\" : [ ]\n      },\n      \"associateValue\" : null\n    }\n\nThe response from this call is the list of values:\n\n    {\n     \"values\": [\n       {\n         \"underlyingValue\": {\n           \"type\": \"string\",\n           \"value\": \"1003\"\n         },\n         \"label\": \"Research & Development\"\n       },\n       {\n         \"underlyingValue\": {\n           \"type\": \"string\",\n           \"value\": \"4896\"\n         },\n         \"label\": \"Human Resources\"\n       },\n       {\n         \"underlyingValue\": {\n           \"type\": \"string\",\n           \"value\": \"6783\"\n         },\n         \"label\": \"Manufacturing\"\n       }\n     ]\n    }\n\n## Additional Information\n\nFor more detailed information on using the property service API, refer to:\n\n* The *Custom Properties Reference* topic in the VMWare vRealize Automation Information Center documentation.\n\n* The *vRA Programming Guide*.\n\n* The *vRO User Guide*.\n",
    "version" : "7.5.0-SNAPSHOT",
    "title" : "Properties Service API"
  },
  "basePath" : "/properties-service",
  "schemes" : [ "https" ],
  "paths" : {
    "/api/propertydefinitions" : {
      "get" : {
        "summary" : "Get Property Definitions",
        "description" : "Retrieve Property Definitions that the current user may access. This API returns Property Definitions in the current tenant and global Property Definitions.",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageContextPropertyDefinition"
            }
          }
        }
      },
      "post" : {
        "summary" : "Create a Property Definition",
        "description" : "Creates a new Property Definition. If the Property Definition to create conflicts with an existing definition, an error is raised.",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The Property Definition to create or update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContextPropertyDefinition"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "201" : {
            "description" : "Successfully created Property Definition",
            "schema" : {
              "$ref" : "#/definitions/ContextPropertyDefinition"
            }
          },
          "400" : {
            "description" : "Property Definition already exists"
          }
        }
      }
    },
    "/api/propertydefinitions/ids" : {
      "post" : {
        "summary" : "Get Multiple Property Definitions",
        "description" : "Retrieve mulitple Property Definitions by a set of IDs. Searches within the specified tenant and the global scope.",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The ids of the property definitions to retrieve",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "tenantId",
          "in" : "query",
          "description" : "The tenant to search",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ContextPropertyDefinition"
              }
            }
          }
        }
      }
    },
    "/api/propertydefinitions/{id}" : {
      "get" : {
        "summary" : "Get Property Definition",
        "description" : "Retrieve a single Property Definition by its id. Searches the current tenant. If no tenant specific definition is found, searches within the global scope.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the Property Definition",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ContextPropertyDefinition"
            }
          }
        }
      },
      "put" : {
        "summary" : "Create or update a Property Definition",
        "description" : "Creates or updates a Property Definition",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the Property Definition to create or update",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The Property Definition to create or update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContextPropertyDefinition"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "201" : {
            "description" : "Successfully created Property Definition",
            "schema" : {
              "$ref" : "#/definitions/ContextPropertyDefinition"
            }
          },
          "204" : {
            "description" : "Successfully updated Property Definition",
            "schema" : {
              "$ref" : "#/definitions/ContextPropertyDefinition"
            }
          }
        }
      },
      "delete" : {
        "summary" : "Delete a Property Definition",
        "description" : "Deletes a Property Definition. If the tenantId is supplied, only a Property Definition that matches on id and tenant will be deleted. If tenantId is not supplied, this API will try to find a matching Property Definition in the current tenant. If no such Property Definition was found and the user has permission to manage global Property Definitions, find a matching global Property Definition.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the Property Definition to delete",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "name" : "tenantId",
          "in" : "query",
          "description" : "The tenant in which to delete the Property Definition. Optional.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully deleted Property Definition"
          },
          "404" : {
            "description" : "Could not find specified Property Definition"
          }
        }
      }
    },
    "/api/propertydefinitions/{id}/values" : {
      "post" : {
        "summary" : "Get permissible values for a Property Definition",
        "description" : "Retrieve the permissible values for a Property Definition with display advice of Dropdown. When the dropdown is backed by a vRO Script Action, the body must contain values for any parameters bound to other properties.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the Property Definition",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The values of any bound properties",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/elementValuesRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/propertygroups" : {
      "get" : {
        "summary" : "Get Property Groups",
        "description" : "Retrieve Property Groups that the current user may access. This API returns Property Groups in the current tenant and global Property Groups.",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageContextPropertyGroup"
            }
          }
        }
      },
      "post" : {
        "summary" : "Create a Property Group",
        "description" : "Creates a new Property Group. If the Property Group to create conflicts with an existing Property Group, an error is raised",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The Property Group to create",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContextPropertyGroup"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "201" : {
            "description" : "Successfully created Property Group",
            "schema" : {
              "$ref" : "#/definitions/ContextPropertyGroup"
            }
          },
          "400" : {
            "description" : "Property Group already exists"
          }
        }
      }
    },
    "/api/propertygroups/ids" : {
      "post" : {
        "summary" : "Get multiple Property Groups",
        "description" : "Retrieve mulitple Property Groups by a set of ids. Searches within the specified tenant and in the global scope.",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The ids of the Property Groups to retrieve",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "tenantId",
          "in" : "query",
          "description" : "The tenant to search",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ContextPropertyGroup"
              }
            }
          }
        }
      }
    },
    "/api/propertygroups/{id}" : {
      "get" : {
        "summary" : "Get a Property Group",
        "description" : "Retrieve a Property Group by its id. Searches the current tenant. If no tenant specific group is found, searches within the global scope.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "the id of the Property Group",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ContextPropertyGroup"
            }
          }
        }
      },
      "put" : {
        "summary" : "Create or update a Property Group",
        "description" : "Creates or updates a Property Group. If no Property Group with the specified id exists, it will be created. Else the existing Property Group will be updated",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the Property Group to create or update",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The Property Group to create or update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContextPropertyGroup"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "201" : {
            "description" : "Successfully created Property Group",
            "schema" : {
              "$ref" : "#/definitions/ContextPropertyGroup"
            }
          },
          "204" : {
            "description" : "Successfully updated Property Group",
            "schema" : {
              "$ref" : "#/definitions/ContextPropertyGroup"
            }
          }
        }
      },
      "delete" : {
        "summary" : "Delete a Property Group",
        "description" : "Deletes a Property Group. If the tenantId is supplied, only a Property Group that matches on id and tenant will be deleted. If tenantId is not supplied, this API will try to find a matching Property Group in teh current tenant. If no such Property Group was found and the user has permission to manage global Property Groups, find a matching global Property Group",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the Property Group to delete",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "name" : "",
          "in" : "query",
          "description" : "The tenant in which to delete the PropertyGroup. Optional.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully deleted Propery Group"
          },
          "404" : {
            "description" : "Could not find specified Property Group"
          }
        }
      }
    }
  },
  "definitions" : {
    "AndClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "subClauses" : {
            "type" : "array",
            "xml" : {
              "name" : "clause"
            },
            "items" : {
              "$ref" : "#/definitions/Clause"
            }
          }
        }
      } ]
    },
    "BooleanLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "description" : "Wraps a boolean value.",
        "xml" : {
          "name" : "booleanLiteral"
        }
      } ]
    },
    "CallbackEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object"
      } ]
    },
    "Clause" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "CoalesceEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "arguments" : {
            "type" : "array",
            "xml" : {
              "name" : "argument",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "ComplexDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object",
        "properties" : {
          "schema" : {
            "$ref" : "#/definitions/Schema"
          }
        }
      } ]
    },
    "ComplexEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "componentTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "typeFilter" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "values" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "ConditionalEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "cases" : {
            "type" : "array",
            "xml" : {
              "name" : "case"
            },
            "items" : {
              "$ref" : "#/definitions/ConditionalEvaluatorCase"
            }
          },
          "defaulValue" : {
            "$ref" : "#/definitions/Evaluator"
          }
        }
      } ]
    },
    "ConditionalEvaluatorCase" : {
      "type" : "object",
      "properties" : {
        "condition" : {
          "$ref" : "#/definitions/Clause"
        },
        "value" : {
          "$ref" : "#/definitions/Evaluator"
        }
      }
    },
    "ConstantClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/booleanLiteral"
          }
        }
      } ]
    },
    "ConstantValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/literal"
          }
        }
      } ]
    },
    "Constraint" : {
      "type" : "object",
      "required" : [ "value" ],
      "discriminator" : "type",
      "properties" : {
        "value" : {
          "$ref" : "#/definitions/Evaluator"
        }
      }
    },
    "ContainsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "ContextPermissibleValueList" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PermissibleValueList"
      }, {
        "type" : "object"
      } ]
    },
    "ContextProperty" : {
      "type" : "object",
      "properties" : {
        "facets" : {
          "type" : "object",
          "xml" : {
            "wrapped" : true
          },
          "additionalProperties" : {
            "$ref" : "#/definitions/Evaluator"
          }
        }
      }
    },
    "ContextPropertyDefinition" : {
      "type" : "object",
      "required" : [ "dataType" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "label" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2000
        },
        "dataType" : {
          "$ref" : "#/definitions/DataType"
        },
        "isMultiValued" : {
          "type" : "boolean",
          "default" : false
        },
        "displayAdvice" : {
          "type" : "string",
          "enum" : [ "TEXTBOX", "HYPERLINK", "EMAIL", "TEXTAREA", "DATE_TIME_PICKER", "CHECKBOX", "YES_NO", "CHECKBOX_GROUP", "DUAL_LIST", "RADIO_GROUP", "DROPDOWN", "LIST", "SEARCHER", "TREE", "FORM", "IMAGE", "SLIDER", "DATA_TABLE", "VALUE_PICKER", "CONFIRM_PASSWORD" ]
        },
        "tenantId" : {
          "type" : "string"
        },
        "orderIndex" : {
          "type" : "integer",
          "format" : "int32"
        },
        "permissibleValues" : {
          "$ref" : "#/definitions/PermissibleValueList"
        },
        "facets" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/Evaluator"
          }
        },
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "ContextPropertyGroup" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "label" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2000
        },
        "properties" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ContextProperty"
          }
        },
        "tenantId" : {
          "type" : "string"
        },
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "CriteriaOperator" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "CustomPropertyDefinitionMetadata" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object",
        "required" : [ "field" ],
        "properties" : {
          "field" : {
            "$ref" : "#/definitions/Field"
          }
        }
      } ]
    },
    "CustomValidationConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "DataType" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "typeId" : {
          "type" : "string",
          "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
        }
      }
    },
    "DefaultValueBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "DisplayTextBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "DynamicPermissibleValueList" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PermissibleValueList"
      }, {
        "type" : "object",
        "properties" : {
          "context" : {
            "$ref" : "#/definitions/DynamicValueContext"
          },
          "dependencies" : {
            "type" : "array",
            "xml" : {
              "name" : "dependency",
              "wrapped" : true
            },
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "DynamicValueContext" : {
      "type" : "object",
      "required" : [ "parameterMappings" ],
      "properties" : {
        "providerEntityId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "parameterMappings" : {
          "$ref" : "#/definitions/ParameterMappingCollection"
        }
      }
    },
    "EditableBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "ElementState" : {
      "type" : "object",
      "properties" : {
        "dependencies" : {
          "type" : "array",
          "xml" : {
            "name" : "dependency",
            "wrapped" : true
          },
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "facets" : {
          "type" : "array",
          "xml" : {
            "name" : "facet",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/Constraint"
          }
        }
      }
    },
    "ElementValuesPagingInfo" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "EncryptedBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "EndsWithOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "EntityReferenceDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object"
      } ]
    },
    "EqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "Evaluator" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "Expression" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "operator" : {
            "$ref" : "#/definitions/CriteriaOperator"
          },
          "leftOperand" : {
            "$ref" : "#/definitions/Evaluator"
          },
          "rightOperand" : {
            "$ref" : "#/definitions/Evaluator"
          }
        }
      } ]
    },
    "ExternalValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "required" : [ "dynamicValueProviderInfo" ],
        "properties" : {
          "dynamicValueProviderInfo" : {
            "$ref" : "#/definitions/DynamicValueContext"
          }
        }
      } ]
    },
    "Field" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "label" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "dataType" : {
          "$ref" : "#/definitions/DataType"
        },
        "displayAdvice" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "TEXTBOX", "HYPERLINK", "EMAIL", "TEXTAREA", "DATE_TIME_PICKER", "CHECKBOX", "YES_NO", "CHECKBOX_GROUP", "DUAL_LIST", "RADIO_GROUP", "DROPDOWN", "LIST", "SEARCHER", "TREE", "FORM", "IMAGE", "SLIDER", "DATA_TABLE", "VALUE_PICKER", "CONFIRM_PASSWORD" ]
        },
        "orderIndex" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        },
        "permissibleValues" : {
          "$ref" : "#/definitions/PermissibleValueList"
        },
        "state" : {
          "$ref" : "#/definitions/ElementState"
        },
        "isMultiValued" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "columns" : {
          "type" : "array",
          "xml" : {
            "name" : "column",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/Field"
          }
        }
      }
    },
    "FieldReference" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "path" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        }
      } ]
    },
    "FixedValueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "GreaterThanOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "GreaterThanOrEqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "IaasPropertyNameBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "IncrementBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "InternalConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "IsDefinedOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "LessThanOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "LessThanOrEqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "LiteralMapEntry" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "value" : {
          "$ref" : "#/definitions/literal"
        }
      }
    },
    "MandatoryConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaxCardinalityConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaxLengthConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaxValueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaximumValueEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "arguments" : {
            "type" : "array",
            "xml" : {
              "name" : "argument",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "MinCardinalityConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MinLengthConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MinValueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MinimumValueEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "arguments" : {
            "type" : "array",
            "xml" : {
              "name" : "argument",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "MonetaryValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "currencyCode" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The ISO 4217 code used to identify the currency (if any) associated with this value."
          }
        },
        "description" : "Base type for representing monetary values, encapsulating both some kind of quantity and a currency.",
        "xml" : {
          "name" : "literal"
        }
      } ]
    },
    "MultipleEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "required" : [ "items" ],
        "properties" : {
          "elementTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "NotClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "subClause" : {
            "$ref" : "#/definitions/Clause"
          }
        }
      } ]
    },
    "NotEqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "NullDisplayTextBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "ObjectDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object",
        "properties" : {
          "componentTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "typeFilter" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "label" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        }
      } ]
    },
    "OrClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "subClauses" : {
            "type" : "array",
            "xml" : {
              "name" : "clause"
            },
            "items" : {
              "$ref" : "#/definitions/Clause"
            }
          }
        }
      } ]
    },
    "PageContextPropertyDefinition" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ContextPropertyDefinition"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageContextPropertyGroup" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ContextPropertyGroup"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ParameterMapping" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "value" : {
          "$ref" : "#/definitions/Evaluator"
        }
      }
    },
    "ParameterMappingCollection" : {
      "type" : "object",
      "properties" : {
        "params" : {
          "type" : "array",
          "xml" : {
            "name" : "param",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/ParameterMapping"
          }
        }
      }
    },
    "PermissibleValueList" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "customAllowed" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        }
      }
    },
    "PrimitiveDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object",
        "properties" : {
          "typeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
          }
        }
      } ]
    },
    "ReadOnlyConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "RefreshOnChangeBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "RegexpConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object",
        "properties" : {
          "errorMessage" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ResetValueBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "Schema" : {
      "type" : "object",
      "properties" : {
        "fields" : {
          "type" : "array",
          "xml" : {
            "name" : "field"
          },
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Field"
          }
        }
      }
    },
    "SkipExportBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "Sort" : {
      "type" : "object"
    },
    "StartsWithOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "StaticPermissibleValueList" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PermissibleValueList"
      }, {
        "type" : "object",
        "properties" : {
          "values" : {
            "type" : "array",
            "xml" : {
              "name" : "value"
            },
            "items" : {
              "$ref" : "#/definitions/value"
            }
          }
        }
      } ]
    },
    "SubsetOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "SupersetOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "TimeSpan" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "description" : "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days.",
        "xml" : {
          "name" : "timeSpan"
        }
      } ]
    },
    "UniqueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "UnspecifiedEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object"
      } ]
    },
    "VisibilityConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "WithinOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "WrapperClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/Evaluator"
          }
        }
      } ]
    },
    "booleanLiteral" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "value" : {
          "type" : "boolean",
          "description" : "The boolean value.",
          "default" : false
        }
      },
      "description" : "Wraps a boolean value.",
      "xml" : {
        "name" : "booleanLiteral"
      }
    },
    "complexLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "componentTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's component type."
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's component."
          },
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's class."
          },
          "typeFilter" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The type filter for this literal."
          },
          "values" : {
            "description" : "Map of values, keyed by the field ids of some complex type.",
            "$ref" : "#/definitions/literalMap"
          }
        },
        "description" : "A complex value composed of multiple values keyed by the field ids of some complex type.",
        "xml" : {
          "name" : "complexLiteral"
        }
      } ]
    },
    "dateTimeLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date."
          }
        },
        "description" : "Wraps a Date & Time value. This is a wrapper for the Java {@link Date} class.",
        "xml" : {
          "name" : "dateTimeLiteral"
        }
      } ]
    },
    "decimalLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "number",
            "format" : "double",
            "description" : "The decimal value."
          }
        },
        "description" : "Wraps a decimal value.",
        "xml" : {
          "name" : "decimalLiteral"
        }
      } ]
    },
    "elementValues" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "array",
          "xml" : {
            "name" : "value",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/value"
          }
        }
      },
      "xml" : {
        "name" : "elementValues"
      }
    },
    "elementValuesRequest" : {
      "type" : "object",
      "properties" : {
        "text" : {
          "type" : "string"
        },
        "tenantId" : {
          "type" : "string"
        },
        "userId" : {
          "type" : "string"
        },
        "dependencyValues" : {
          "$ref" : "#/definitions/literalMap"
        },
        "pagingInfo" : {
          "$ref" : "#/definitions/ElementValuesPagingInfo"
        },
        "associateValue" : {
          "$ref" : "#/definitions/literal"
        },
        "headers" : {
          "$ref" : "#/definitions/literalMap"
        }
      },
      "xml" : {
        "name" : "elementValuesRequest"
      }
    },
    "entityRef" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier of the type or category to which the referenced entity belongs."
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The unique identifier of the referenced entity, encoded as a string"
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The durable identifier of a component registered in the suite component registry that owns and manages the referenced entity. This can be omitted if this component can be derived from the context within which this entity reference occurs. It must be specified, if no such context exists or if the component differs from that defined by the context."
          },
          "label" : {
            "type" : "string"
          }
        },
        "description" : "Represents a reference to an entity defined somewhere in the suite.",
        "xml" : {
          "name" : "entityRef"
        }
      } ]
    },
    "entityRefEx" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "href" : {
            "type" : "string",
            "description" : "the Href"
          }
        },
        "description" : "Represents a reference to an entity by uri",
        "xml" : {
          "name" : "entityRefEx"
        }
      } ]
    },
    "integerLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The integer value."
          }
        },
        "description" : "Wraps a signed 64-bit integer value.",
        "xml" : {
          "name" : "integerLiteral"
        }
      } ]
    },
    "literal" : {
      "type" : "object",
      "discriminator" : "type",
      "description" : "Wraps a value such that values of different types can be treated generically.",
      "xml" : {
        "name" : "literal"
      }
    },
    "literalMap" : {
      "type" : "object",
      "properties" : {
        "entries" : {
          "type" : "array",
          "xml" : {
            "name" : "entry"
          },
          "items" : {
            "$ref" : "#/definitions/LiteralMapEntry"
          }
        }
      },
      "description" : "Equivalent of java.util.Map",
      "xml" : {
        "name" : "literalMap"
      }
    },
    "money" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "format" : "double",
            "description" : "The amount associated with this value (with no specific currency)."
          }
        },
        "description" : "Represents a single, precise monetary value.",
        "xml" : {
          "name" : "money"
        }
      } ]
    },
    "moneyRange" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "minValue" : {
            "type" : "number",
            "format" : "double",
            "description" : "The lower limit of the range."
          },
          "maxValue" : {
            "type" : "number",
            "format" : "double",
            "description" : "The upper limit of the range."
          }
        },
        "description" : "Represents a range of money values, between some defined minimums and maximums.",
        "xml" : {
          "name" : "moneyRange"
        }
      } ]
    },
    "moneyRate" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "cost" : {
            "description" : "The cost (including optional currency code).",
            "$ref" : "#/definitions/literal"
          }
        },
        "description" : "A base type for literals representing a rate of some monetary value over a specified basis. E.g. $5 / hour; $1-2 / GB.",
        "xml" : {
          "name" : "moneyRate"
        }
      } ]
    },
    "moneyTimeRate" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "basis" : {
            "description" : "The span of time to calculate the rate of money for.",
            "$ref" : "#/definitions/timeSpan"
          }
        },
        "description" : "Represents a rate of money over time.",
        "xml" : {
          "name" : "moneyTimeRate"
        }
      } ]
    },
    "multipleLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "elementTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The data type of the items in the list.",
            "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
          },
          "items" : {
            "type" : "array",
            "xml" : {
              "name" : "item"
            },
            "description" : "The list of specified values. NOTE: All values must be of the same data type.",
            "items" : {
              "$ref" : "#/definitions/literal"
            }
          }
        },
        "description" : "A literal which represents multiple values. All of these component values must be of the same data type.",
        "xml" : {
          "name" : "multipleLiteral"
        }
      } ]
    },
    "secureString" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "The string value."
          }
        },
        "description" : "Wraps a secured string value, such as a password.",
        "xml" : {
          "name" : "secureString"
        }
      } ]
    },
    "stringLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "The string value."
          }
        },
        "description" : "Wraps a String value.",
        "xml" : {
          "name" : "stringLiteral"
        }
      } ]
    },
    "timeSpan" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "unit" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "description" : "The unit of measure for the time span. e.g: days.",
          "enum" : [ "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS", "WEEKS", "MONTHS", "YEARS" ]
        },
        "amount" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          },
          "description" : "The amount for the time span."
        }
      },
      "description" : "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days.",
      "xml" : {
        "name" : "timeSpan"
      }
    },
    "value" : {
      "type" : "object",
      "properties" : {
        "underlyingValue" : {
          "$ref" : "#/definitions/literal"
        },
        "label" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "value"
      }
    }
  }
}