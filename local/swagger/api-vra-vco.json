{
  "swagger" : "2.0",
  "info" : {
    "description" : "## Overview\r\n\r\nvRealize Orchestrator Server API",
    "version" : "7.1.0",
    "title" : "vRealize Orchestrator Server API"
  },
  "basePath" : "/vco/api",
  "tags" : [ {
    "name" : "Actions Service"
  }, {
    "name" : "Catalog Service"
  }, {
    "name" : "Category Service"
  }, {
    "name" : "Configuration Service"
  }, {
    "name" : "Content Service"
  }, {
    "name" : "Custom Event Service"
  }, {
    "name" : "Inventory Service"
  }, {
    "name" : "Packages Service"
  }, {
    "name" : "Plugin Service"
  }, {
    "name" : "Policy Service"
  }, {
    "name" : "Resource Service"
  }, {
    "name" : "Server Configuration Service"
  }, {
    "name" : "Service Descriptor Service"
  }, {
    "name" : "Tagging Service"
  }, {
    "name" : "Task Service"
  }, {
    "name" : "User Interaction Service"
  }, {
    "name" : "User Service"
  }, {
    "name" : "Workflow Presentation Service"
  }, {
    "name" : "Workflow Run Service"
  }, {
    "name" : "Workflow Service"
  }, {
    "name" : "Workflow User Interaction Presentation Service"
  }, {
    "name" : "Orchestrator Server Instance Service"
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/" : {
      "get" : {
        "tags" : [ "Service Descriptor Service" ],
        "summary" : "Enumerate services",
        "description" : "Lists the available top-level service entry points.",
        "operationId" : "enumerateServices",
        "produces" : [ "application/xml", "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The request is successful.",
            "schema" : {
              "$ref" : "#/definitions/service-descriptors"
            }
          },
          "401" : {
            "description" : "User is not authorized."
          }
        }
      }
    },
    "/about" : {
      "get" : {
        "tags" : [ "Service Descriptor Service" ],
        "summary" : "Get about info",
        "description" : "A REST endpoint for retrieving server build properties",
        "operationId" : "aboutInfo",
        "produces" : [ "application/xml", "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The request is successful.",
            "schema" : {
              "$ref" : "#/definitions/about-info"
            }
          },
          "401" : {
            "description" : "User is not authorized."
          }
        }
      }
    },
    "/actions" : {
      "get" : {
        "tags" : [ "Actions Service" ],
        "summary" : "Retrieves a list of all actions",
        "description" : "Retrieves a list of all actions",
        "operationId" : "listAllActions",
        "produces" : [ "application/xml", "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/actions"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          }
        }
      },
      "post" : {
        "tags" : [ "Actions Service" ],
        "summary" : "Import an action in the given category",
        "description" : "<p>Imports an action in a given category. The action binary content should be available as multi-part content (see RFC-2387 for details).</p><p>Details of working with multi-part resources depend on the used client's HTTP/REST library. For example, in Spring it will look like:</p><pre>Sample client code:<br />-------------------<br />String url = \"https://localhost:8281/vco/api/actions/\";<br />MultiValueMap<String, Resource> parts = new LinkedMultiValueMap<String, Resource>();<br />Resource r = new FileSystemResource(\"D:/path/to/some.action\");<br />parts.put(\"file\", Arrays.asList(r));<br />parts.put(\"categoryName\", \"com.vmware.basic\");<br />new RestTemplate().postForLocation(url, parts);<br />------------------- </pre>",
        "operationId" : "importAction",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "categoryName",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "overwrite",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "file",
          "in" : "formData",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "202" : {
            "description" : "Action successfully imported"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find an action category with the specified name"
          }
        }
      }
    },
    "/actions/{actionId}" : {
      "get" : {
        "tags" : [ "Actions Service" ],
        "summary" : "Export an action with given id",
        "description" : "<p>Exports an action by its ID. If the request is successful, the action binary content is available as an attachment with MIME type application/zip (that is, a normal ZIP file) with a default file name {actionname}.action.</p><p>It is up to the client application to properly fetch and process this attachment, i.e. by saving it to the local file system.</p><p>The exported action has the same internal format as the actions exported by using the Orchestrator client.</p>",
        "operationId" : "exportAction",
        "produces" : [ "application/octet-stream", "application/zip" ],
        "parameters" : [ {
          "name" : "actionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find an action with the specified id"
          }
        }
      },
      "delete" : {
        "tags" : [ "Actions Service" ],
        "summary" : "Delete an action",
        "description" : "<p>Deletes an action with a given id.</p><p>If the action is referenced by some workflows, it is considered to be 'in use'and the delete operation will fail, unless the 'force' option is provided.</p>",
        "operationId" : "deleteAction",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "actionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "force",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "Action successfully deleted"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find an action with the specified id"
          }
        }
      }
    },
    "/actions/{actionId}/executions" : {
      "post" : {
        "tags" : [ "Actions Service" ],
        "summary" : "Runs an action with given id",
        "description" : "Runs an action with given id",
        "operationId" : "executeActionById",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "actionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/execution-context"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/parameter"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find an action with the specified id"
          }
        }
      }
    },
    "/actions/{categoryName}/{actionName}" : {
      "get" : {
        "tags" : [ "Actions Service" ],
        "summary" : "Retrieves the definition of an action by categoryName and actionName",
        "description" : "The returned definition contains base data for the action, as well the input parameter's definitions and the output type.",
        "operationId" : "getAction",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "categoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "actionName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/action"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find an action with the specified name"
          }
        }
      }
    },
    "/actions/{categoryName}/{actionName}/executions" : {
      "post" : {
        "tags" : [ "Actions Service" ],
        "summary" : "Runs an action with given category and name",
        "description" : "Runs an action with given category and name",
        "operationId" : "executeActionByName",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "categoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "actionName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/execution-context"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/parameter"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find an action with the specified name"
          }
        }
      }
    },
    "/actions/{id}/permissions" : {
      "get" : {
        "tags" : [ "Actions Service" ],
        "summary" : "Retrieves action permissions",
        "description" : "Retrieves action permissions",
        "operationId" : "getPermissionsForObject",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/permissions"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find an action with the specified id"
          }
        }
      },
      "post" : {
        "tags" : [ "Actions Service" ],
        "summary" : "Sets permissions for an action with given id",
        "description" : "Sets permissions for an action with given id",
        "operationId" : "insertPermissionsForObject",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/permissions"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/permissions"
            }
          },
          "201" : {
            "description" : "The request is successful"
          },
          "204" : {
            "description" : "No content"
          },
          "400" : {
            "description" : "Request is not valid (validation error)"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find an action with the specified id"
          }
        }
      },
      "delete" : {
        "tags" : [ "Actions Service" ],
        "summary" : "Deletes all permissions for an action with a given id",
        "description" : "Deletes all permissions for an action with a given id",
        "operationId" : "deletePermissionsForObject",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find an action with the specified id"
          }
        }
      }
    },
    "/actions/{id}/permissions/{ruleId}" : {
      "get" : {
        "tags" : [ "Actions Service" ],
        "summary" : "Retrieves details for a specific permission rule",
        "description" : "Each rule contains information about the principal and he access rights assigned.",
        "operationId" : "getPermissionRule",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/permission"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find an action with the specified ID, the user does not have 'read' access rights for that action, or the permission rule with the specified ID does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "Actions Service" ],
        "summary" : "Updates principal or access rights for a single permission rule with a given id",
        "description" : "Updates principal or access rights for a single permission rule with a given id",
        "operationId" : "updatePermissionRule",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/permission"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "400" : {
            "description" : "Request is not valid (validation error)"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find an action with the specified ID, the user does not have 'read' access rights for that action, or the permission rule with the specified ID does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Actions Service" ],
        "summary" : "Deletes a single permission rule with a given id",
        "description" : "Deletes a single permission rule with a given id",
        "operationId" : "deletePermissionRule",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find an action with the specified ID, the user does not have 'read' access rights for that action, or the permission rule with the specified ID does not exist"
          }
        }
      }
    },
    "/catalog" : {
      "get" : {
        "tags" : [ "Catalog Service" ],
        "summary" : "List namespaces",
        "description" : "A REST endpoint for listing all catalog entry points. Each Orchestrator plug-in exposes its own catalog entry point that is accessible at /catalog/{pluginname}. The Orchestrator server exposes a separate catalog entry point that is accessible at /catalog/System",
        "operationId" : "listNamespaces",
        "produces" : [ "application/xml", "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/inventory-item"
            }
          },
          "401" : {
            "description" : "User is not authorized"
          }
        }
      }
    },
    "/catalog/{namespace}" : {
      "get" : {
        "tags" : [ "Catalog Service" ],
        "summary" : "Find root element",
        "description" : "A REST endpoint for retrieving the root elements in a namespace. All Orchestrator plug-ins that have an inventory, usually provide a single root element. The Orchestrator server does not have a single root. Instead, for the System namespace, the Orchestrator REST API returns a list that contains links to all system types (workflows, tasks, etc.)",
        "operationId" : "findRootElement",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "keys",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/inventory-item"
            }
          },
          "401" : {
            "description" : "User is not authorized"
          }
        }
      }
    },
    "/catalog/{namespace}/metadata" : {
      "get" : {
        "tags" : [ "Catalog Service" ],
        "summary" : "Fetch plugin metadata",
        "description" : "Plug-in metadata contains information about the types that this plug-in defines and their attributes or relations.",
        "operationId" : "fetchPluginMetadata",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "showHiddenTypes",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/module-metadata"
            }
          },
          "401" : {
            "description" : "User is not authorized"
          }
        }
      }
    },
    "/catalog/{namespace}/metadata/icon" : {
      "get" : {
        "tags" : [ "Catalog Service" ],
        "summary" : "Download icon for module",
        "description" : "If the request is successful, the API responds with an HTTP 200 OK status code and the requested icon image as a downloadable attachment that has an 'image/png' MIME type.",
        "operationId" : "downloadIconForModule",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "401" : {
            "description" : "User is not authorized"
          }
        }
      }
    },
    "/catalog/{namespace}/{parentType}/{parentId}/{relationName}" : {
      "get" : {
        "tags" : [ "Catalog Service" ],
        "summary" : "Find by relation",
        "description" : "Every Orchestrator plug-in can define relations between its types. For example, hierarchy structures can be defined as 'CHILDREN' relations between parent and children types. If the request is successful, the API responds with an HTTP 200 OK status code and a list containing the child objects that are accessible through a given relation, if any.",
        "operationId" : "findByRelation",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "parentType",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "parentId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "relationName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "maxResult",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "default" : 2147483647,
          "format" : "int32"
        }, {
          "name" : "startIndex",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "queryCount",
          "in" : "query",
          "required" : true,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "keys",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "conditions",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/inventory-items"
            }
          },
          "401" : {
            "description" : "User is not authorized"
          }
        }
      }
    },
    "/catalog/{namespace}/{type}" : {
      "get" : {
        "tags" : [ "Catalog Service" ],
        "summary" : "List objects for specific type",
        "description" : "If the request is successful, the API responds with an HTTP 200 OK status code and the requested list of objects",
        "operationId" : "findSimpleListQuery",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "maxResult",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "default" : 2147483647,
          "format" : "int32"
        }, {
          "name" : "startIndex",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "queryCount",
          "in" : "query",
          "required" : true,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "keys",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "conditions",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "rootObject",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tags",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/inventory-items"
            }
          },
          "401" : {
            "description" : "User is not authorized"
          }
        }
      }
    },
    "/catalog/{namespace}/{type}/metadata/icon" : {
      "get" : {
        "tags" : [ "Catalog Service" ],
        "summary" : "Download icon for type",
        "description" : "All types that a Orchestrator plug-in defines, and the system types that the Orchestrator server defines, have default icon images. If the request is successful, the API responds with an HTTP 200 OK status code and the requested icon image as a downloadable attachment that has an 'image/png' MIME type.",
        "operationId" : "downloadIconForType",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "401" : {
            "description" : "User is not authorized"
          }
        }
      }
    },
    "/catalog/{namespace}/{type}/{id}" : {
      "get" : {
        "tags" : [ "Catalog Service" ],
        "summary" : "Find by id",
        "description" : "A REST endpoint for retrieving an element by its type and ID. All Orchestrator objects can be accessed or identified by their unique combination of namespace, type and ID.",
        "operationId" : "findById",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "keys",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/inventory-item"
            }
          },
          "401" : {
            "description" : "User is not authorized"
          }
        }
      }
    },
    "/catalog/{namespace}/{type}/{id}/tags" : {
      "get" : {
        "tags" : [ "Catalog Service" ],
        "summary" : "List object tags",
        "description" : "A REST endpoint to retrieve tags attached to an element.",
        "operationId" : "listObjectTags",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "searchScope",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "GLOBAL_AND_PRIVATE"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/tag-instances"
            }
          },
          "401" : {
            "description" : "User is not authorized"
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog Service" ],
        "summary" : "Attach tag to entity",
        "description" : "A REST endpoint for attaching tag to entity.",
        "operationId" : "tagObject",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/tag-instance"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "400" : {
            "description" : "Request is not valid (validation error)"
          },
          "401" : {
            "description" : "User is not authorized"
          }
        }
      }
    },
    "/catalog/{namespace}/{type}/{id}/tags/{tagname}" : {
      "delete" : {
        "tags" : [ "Catalog Service" ],
        "summary" : "Remove tag from entity",
        "description" : "To remove global tag form entity tag name must be prefixed with \":\".",
        "operationId" : "untagObject",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tagname",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "401" : {
            "description" : "User is not authorized"
          }
        }
      }
    },
    "/categories" : {
      "get" : {
        "tags" : [ "Category Service" ],
        "summary" : "Get all categories",
        "description" : "Endpoint for retrieving all categories.",
        "operationId" : "listCategories",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "categoryType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "isRoot",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/categories"
            }
          },
          "401" : {
            "description" : "User is not authorized"
          }
        }
      },
      "post" : {
        "tags" : [ "Category Service" ],
        "summary" : "Add root category",
        "description" : "Endpoint for adding categories in root.",
        "operationId" : "addRootCategory",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/category-context"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/category"
            }
          },
          "201" : {
            "description" : "The request is successful"
          },
          "400" : {
            "description" : "Category name must be specified"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find a category with the specified name"
          }
        }
      }
    },
    "/categories/{id}" : {
      "get" : {
        "tags" : [ "Category Service" ],
        "summary" : "Get category",
        "description" : "Endpoint for retrieving details for a category.",
        "operationId" : "getCategory",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/category"
            }
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find a category with the specified ID"
          }
        }
      },
      "post" : {
        "tags" : [ "Category Service" ],
        "summary" : "Add child category",
        "description" : "Endpoint for adding child categories.",
        "operationId" : "addChildCategory",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/category-context"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/category"
            }
          },
          "400" : {
            "description" : "Category name must be specified"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find a category with the specified ID"
          }
        }
      },
      "delete" : {
        "tags" : [ "Category Service" ],
        "summary" : "Delete category",
        "description" : "Deletes a category with a given ID.",
        "operationId" : "deleteCategory",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "deleteNonEmptyContent",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "204" : {
            "description" : "Delete operation completed OK"
          },
          "403" : {
            "description" : "User doesn't have permission to delete the category"
          },
          "404" : {
            "description" : "Cannot find a category with the specified ID,"
          },
          "409" : {
            "description" : "Category has child elements"
          }
        }
      }
    },
    "/categories/{id}/permissions" : {
      "get" : {
        "tags" : [ "Category Service" ],
        "summary" : "Get category permissions",
        "description" : "Retrieves category permissions.",
        "operationId" : "getPermissionsForObject",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/permissions"
            }
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find a category with the specified ID,"
          }
        }
      },
      "post" : {
        "tags" : [ "Category Service" ],
        "summary" : "Insert permissions",
        "description" : "Sets permissions for a category with a given ID. Access rights : 'r' - VIEW,  'x' - EXECUTE, 'i' - INSPECT,  'c' - EDIT, 'a' - ADMIN",
        "operationId" : "insertPermissionsForObject",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/permissions"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/permissions"
            }
          },
          "201" : {
            "description" : "The request is successful"
          },
          "400" : {
            "description" : "Request is not valid (validation error)"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find a category with the specified ID"
          }
        }
      },
      "delete" : {
        "tags" : [ "Category Service" ],
        "summary" : "Deletes all permissions",
        "description" : "Deletes all permissions for a category with a given ID.",
        "operationId" : "deletePermissionsForObject",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful."
          },
          "401" : {
            "description" : "User is not authorized."
          },
          "404" : {
            "description" : "Cannot find a category with the specified ID,"
          }
        }
      }
    },
    "/categories/{id}/permissions/{ruleId}" : {
      "get" : {
        "tags" : [ "Category Service" ],
        "summary" : "Get permission rule",
        "description" : "Retrieves details for a specific permission rule. Each rule contains information about the principal and he access rights assigned.",
        "operationId" : "getPermissionRule",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful.",
            "schema" : {
              "$ref" : "#/definitions/permission"
            }
          },
          "401" : {
            "description" : "User is not authorized."
          },
          "404" : {
            "description" : "Cannot find a category with the specified ID, the user does not have 'read' access rights for that category, or the permission rule with the specified ID does not exist."
          }
        }
      },
      "put" : {
        "tags" : [ "Category Service" ],
        "summary" : "Update permission rule",
        "description" : "Updates principal or access rights for a single permission rule with a given ID.",
        "operationId" : "updatePermissionRule",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/permission"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "400" : {
            "description" : "Request is not valid (validation error)"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find a category with the specified ID, the user does not have 'admin' access rights for that category, or the permission rule with the specified ID does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Category Service" ],
        "summary" : "Delete permission rule",
        "description" : "Deletes a single permission rule with a given ID.",
        "operationId" : "deletePermissionRule",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find a category with the specified ID, the user does not have 'admin' access rights for that category, or the permission rule with the specified ID does not exist"
          }
        }
      }
    },
    "/configurations" : {
      "get" : {
        "tags" : [ "Configuration Service" ],
        "summary" : "List all configurations",
        "description" : "Retrieves a list of all configurations.",
        "operationId" : "listAllConfigurations",
        "produces" : [ "application/xml", "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/configurations"
            }
          },
          "400" : {
            "description" : "Request is not valid (validation error)"
          },
          "401" : {
            "description" : "User is not authorized"
          }
        }
      },
      "post" : {
        "tags" : [ "Configuration Service" ],
        "summary" : "Import configuration",
        "description" : "Imports configuration in a given category. The configuration binary content should be available as multi-part content (see RFC-2387 for details). Details of working with multi-part resources depend on the used client's HTTP/REST library. For example, in Spring it will look like:<br /><pre>Sample client code:<br />-------------------<br />String url = \"https://localhost:8281/vco/api/configurations/\";<br />MultiValueMap<String, Resource> parts = new LinkedMultiValueMap<String, Resource>();<br />Resource r = new FileSystemResource(\"D:/path/to/some.vsoconf\");<br />parts.put(\"file\", Arrays.asList(r));<br />parts.put(\"categoryId\", \"828080808080808080808080808080807F818080013217004819830adebdb10ea\");<br />new RestTemplate().postForLocation(url, parts);<br />-------------------<br /></pre>",
        "operationId" : "importConfiguration",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "categoryId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "formData",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "202" : {
            "description" : "Configuration successfully imported"
          },
          "400" : {
            "description" : "Request is not valid (validation error)"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find configuration with the specified name"
          }
        }
      }
    },
    "/configurations/{id}" : {
      "get" : {
        "tags" : [ "Configuration Service" ],
        "summary" : "Export configuration",
        "description" : "Exports a configuration by its ID. If the request is successful, the configuration binary content is available in the body of the response message. It is up to the client application to properly fetch and process this attachment, for example, by saving it to the local file system. The exported configuration has the same internal format as the configurations exported by using the Orchestrator client.",
        "operationId" : "exportConfiguration",
        "produces" : [ "application/vcoobject+xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find configuration with the specified name"
          }
        }
      },
      "delete" : {
        "tags" : [ "Configuration Service" ],
        "summary" : "Delete configuration",
        "description" : "Deletes a configuration with a given ID. If the configuration is referenced by some workflow, it is considered to be 'in use' and the delete operation will fail, unless the 'force' option is provided.",
        "operationId" : "deleteConfiguration",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "force",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find configuration with the specified name"
          }
        }
      }
    },
    "/configurations/{id}/permissions" : {
      "get" : {
        "tags" : [ "Configuration Service" ],
        "summary" : "Get configuration permissions",
        "description" : "Retrieves configuration permissions.",
        "operationId" : "getPermissionsForObject",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/permissions"
            }
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find configuration with the specified ID"
          }
        }
      },
      "post" : {
        "tags" : [ "Configuration Service" ],
        "summary" : "Insert configuration permissions",
        "description" : "Sets permissions for a configuration with given ID. Access rights : 'r' - VIEW,  'x' - EXECUTE, 'i' - INSPECT,  'c' - EDIT, 'a' - ADMIN",
        "operationId" : "insertPermissionsForObject",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/permissions"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/permissions"
            }
          },
          "201" : {
            "description" : "The request is successful"
          },
          "400" : {
            "description" : "Request is not valid (validation error)"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find configuration with the specified ID"
          }
        }
      },
      "delete" : {
        "tags" : [ "Configuration Service" ],
        "summary" : "Delete configuration permissions",
        "description" : "Deletes all permissions for configuration with a given ID.",
        "operationId" : "deletePermissionsForObject",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find configuration with the specified ID"
          }
        }
      }
    },
    "/configurations/{id}/permissions/{ruleId}" : {
      "get" : {
        "tags" : [ "Configuration Service" ],
        "summary" : "Get permission rule",
        "description" : "Retrieves details for a specific permission rule.",
        "operationId" : "getPermissionRule",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/permission"
            }
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find a configuration with the specified ID, the user does not have 'read' access rights for that configuration, or the permission rule with the specified ID does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "Configuration Service" ],
        "summary" : "Update permission rule",
        "description" : "Updates principal or access rights for a single permission rule with a given ID.",
        "operationId" : "updatePermissionRule",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/permission"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "400" : {
            "description" : "Request is not valid (validation error)"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find a configuration with the specified ID, the user does not have 'admin' access rights for that configuration, or the permission rule with the specified ID does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Configuration Service" ],
        "summary" : "Delete permission rule",
        "description" : "Deletes a single permission rule with a given ID.",
        "operationId" : "deletePermissionRule",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find a configuration with the specified ID, the user does not have 'admin' access rights for that configuration, or the permission rule with the specified ID does not exist"
          }
        }
      }
    },
    "/content" : {
      "get" : {
        "tags" : [ "Content Service" ],
        "summary" : "List content types",
        "description" : "Returns links to entity type that can be exported, imported, or deleted from the Orchestrator database content. Currently, only packages, workflows, and actions are supported. Other Orchestrator objects, for example resources, can be imported or exported by wrapping them inside a package.",
        "operationId" : "listContentTypes",
        "produces" : [ "application/xml", "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/inventory-items"
            }
          },
          "401" : {
            "description" : "User is not authorized"
          }
        }
      }
    },
    "/content/actions" : {
      "get" : {
        "tags" : [ "Content Service" ],
        "summary" : "List actions",
        "description" : "Returns a list of all deployed actions.",
        "operationId" : "listActions",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "maxResult",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "default" : 2147483647,
          "format" : "int32"
        }, {
          "name" : "startIndex",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "queryCount",
          "in" : "query",
          "required" : true,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "keys",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "conditions",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "tags",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/inventory-items"
            }
          },
          "401" : {
            "description" : "User is not authorized"
          }
        }
      }
    },
    "/content/actions/{actionName}" : {
      "get" : {
        "tags" : [ "Content Service" ],
        "summary" : "Export action",
        "description" : "Export an action by its fully qualified name (category name + action name). If the request is successful, the action binary content is available as attachment with MIME type application/zip (that is, a normal ZIP file) with a default file name {actionname}.action. It is up to the client application to properly fetch and process this attachment, for example by saving it to the local file system. The exported action has the same internal format as the actions exported by using the Orchestrator client.",
        "operationId" : "exportAction",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "actionName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find an action with the specified name."
          }
        }
      },
      "delete" : {
        "tags" : [ "Content Service" ],
        "summary" : "Delete action",
        "description" : "Deletes an action with a given fully qualified name. If the action is referenced by some workflows, it is considered to be 'in use' and the delete operation will fail, unless the 'force' option is provided.",
        "operationId" : "deleteAction",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "actionName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "force",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find an action with the specified name."
          }
        }
      }
    },
    "/content/actions/{categoryName}" : {
      "post" : {
        "tags" : [ "Content Service" ],
        "summary" : "Import action",
        "description" : "Imports an action in a given category. The action binary content should be available as multi-part content (see RFC-2387 for details). Details of working with multi-part resources depend on the used client's HTTP/REST library. For example, in Spring it will look like:<br /><pre>Sample client code:<br />-------------------<br />String url = \"https://localhost:8281/vco/api/content/packages/\";<br />MultiValueMap<String, Resource> parts = new LinkedMultiValueMap<String, Resource>();<br />Resource r = new FileSystemResource(\"D:/path/to/some.action\");<br />parts.put(\"file\", Arrays.asList(r));<br />new RestTemplate().postForLocation(url, parts);<br />-------------------</pre>",
        "operationId" : "importAction",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "categoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "formData",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "400" : {
            "description" : "Request is not valid (validation error)"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find an action category with the specified name."
          }
        }
      }
    },
    "/content/packages" : {
      "get" : {
        "tags" : [ "Content Service" ],
        "summary" : "List all packages",
        "description" : "Returns a list of all deployed packages.",
        "operationId" : "listAllPackages",
        "produces" : [ "application/xml", "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/inventory-items"
            }
          },
          "401" : {
            "description" : "User is not authorized"
          }
        }
      },
      "post" : {
        "tags" : [ "Content Service" ],
        "summary" : "Import package",
        "description" : "Imports a package. The package binary content should be available as multi-part content (see RFC-2387 for details). Details of working with multi-part resources depend on the used client's HTTP/REST library. For example, in Spring it will look like:<br /><pre>Sample client code:<br />-------------------<br />String url = \"https://localhost:8281/vco/api/content/packages/\";<br />MultiValueMap<String, Resource> parts = new LinkedMultiValueMap<String, Resource>();<br />Resource r = new FileSystemResource(\"D:/path/to/some.package\");<br />parts.put(\"file\", Arrays.asList(r));<br />new RestTemplate().postForLocation(url, parts);<br />-------------------</pre>",
        "operationId" : "importPackage",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "file",
          "in" : "formData",
          "required" : true,
          "type" : "file"
        }, {
          "name" : "overwrite",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "importConfigurationAttributeValues",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "tagImportMode",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "ImportButPreserveExistingValue",
          "enum" : [ "DoNotImport", "ImportAndOverwriteExistingValue", "ImportButPreserveExistingValue" ]
        } ],
        "responses" : {
          "202" : {
            "description" : "Package successfully imported"
          },
          "400" : {
            "description" : "Request is not valid (validation error)"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "409" : {
            "description" : "One or more package elements have an older version."
          }
        }
      }
    },
    "/content/packages/{packageName}" : {
      "get" : {
        "tags" : [ "Content Service" ],
        "summary" : "Export package",
        "description" : "Exports a package by its name. If the request is successful, the package binary content is available as an attachment with MIME type application/zip (that is, a normal ZIP file) with a default file name {packagename}.package. It is up to the client application to properly fetch and process this attachment, for example by saving it to the local file system. The exported package has the same internal format as the packages exported by using the Orchestrator client",
        "operationId" : "exportPackage",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "packageName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "exportConfigurationAttributeValues",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "exportGlobalTags",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find a package with the specified name."
          }
        }
      },
      "delete" : {
        "tags" : [ "Content Service" ],
        "summary" : "Delete package",
        "description" : "Deletes a package with a given name. If a package has some content (workflows, actions or other elements put inside it), it is considered to be 'in use' and the delete operation will fail, unless the 'force' option is provided.",
        "operationId" : "deletePackage",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "packageName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "force",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find a package with the specified name."
          }
        }
      }
    },
    "/content/workflows" : {
      "get" : {
        "tags" : [ "Content Service" ],
        "summary" : "List workflows",
        "description" : "Returns a list of all deployed workflows.",
        "operationId" : "listWorkflows",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "maxResult",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "default" : 2147483647,
          "format" : "int32"
        }, {
          "name" : "startIndex",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "queryCount",
          "in" : "query",
          "required" : true,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "keys",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "conditions",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "tags",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/inventory-items"
            }
          },
          "401" : {
            "description" : "User is not authorized"
          }
        }
      }
    },
    "/content/workflows/{categoryId}" : {
      "post" : {
        "tags" : [ "Content Service" ],
        "summary" : "Import workflow",
        "description" : "Imports a workflow in a given category. The workflow binary content should be available as multi-part content (see RFC-2387 for details). Details of working with multi-part resources depend on the used client's HTTP/REST library. For example, in Spring it will look like: <br /><pre>Sample client code:<br />-------------------<br />String url = \"https://localhost:8281/vco/api/content/packages/\";<br />MultiValueMap<String, Resource> parts = new LinkedMultiValueMap<String, Resource>();<br />Resource r = new FileSystemResource(\"D:/path/to/some.workflow\");<br />parts.put(\"file\", Arrays.asList(r));<br />new RestTemplate().postForLocation(url, parts);<br />-------------------</pre>",
        "operationId" : "importWorkflow",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "categoryId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "formData",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "400" : {
            "description" : "Request is not valid (validation error)"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find a category with the specified ID."
          }
        }
      }
    },
    "/content/workflows/{workflowId}" : {
      "get" : {
        "tags" : [ "Content Service" ],
        "summary" : "Export workflow",
        "description" : "Exports a package by its ID. If the request is successful, the package binary content is available as an attachment with MIME type application/zip (that is, a normal ZIP file) with a default file name {workflowname}.workflow. It is up to the client application to properly fetch and process this attachment, for example by saving it to the local file system. The exported package has the same internal format as the workflows exported by using the Orchestrator client.",
        "operationId" : "exportWorkflow",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find a workflow with the specified ID."
          }
        }
      },
      "delete" : {
        "tags" : [ "Content Service" ],
        "summary" : "Delete workflow",
        "description" : "Deletes a workflow with a given ID. If the workflow is referenced by some other workflows, or is running, it is considered to be 'in use' and the delete operation will fail, unless the 'force' option is provided.",
        "operationId" : "deleteWorkflow",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "force",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find a workflow with the specified ID."
          }
        }
      }
    },
    "/customevent/{eventname}" : {
      "post" : {
        "tags" : [ "Custom Event Service" ],
        "summary" : "Send custom event",
        "description" : "Send custom event",
        "operationId" : "sendCustomEvent",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "eventname",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "401" : {
            "description" : "The user is not authorized"
          }
        }
      }
    },
    "/docs" : {
      "get" : {
        "tags" : [ "Service Descriptor Service" ],
        "summary" : "Redirect docs to docs/index.html",
        "description" : "Redirect '/vco/api/docs' to '/vco/api/docs/index.html'",
        "operationId" : "docs",
        "produces" : [ "application/xml", "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The request is successful.",
            "schema" : {
              "type" : "string"
            }
          },
          "401" : {
            "description" : "User is not authorized."
          }
        }
      }
    },
    "/healthstatus" : {
      "get" : {
        "tags" : [ "Service Descriptor Service" ],
        "summary" : "Get health status",
        "description" : "A REST endpoint for retrieving server health status calculated on its health components (DB, authentication and etc.).",
        "operationId" : "healthStatus",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "query",
          "required" : true,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful.",
            "schema" : {
              "$ref" : "#/definitions/node-status"
            }
          },
          "401" : {
            "description" : "User is not authorized."
          }
        }
      }
    },
    "/interactions" : {
      "get" : {
        "tags" : [ "User Interaction Service" ],
        "summary" : "Get all user interactions",
        "description" : "Returns a list of all deployed packages.",
        "operationId" : "getAllUserInteractions",
        "produces" : [ "application/xml", "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/interactions"
            }
          },
          "400" : {
            "description" : "Request is not valid (validation error)."
          },
          "401" : {
            "description" : "User is not authorized."
          }
        }
      }
    },
    "/inventory/**" : {
      "get" : {
        "tags" : [ "Inventory Service" ],
        "summary" : "Browse inventory path",
        "description" : "If the request is successful, the API responds with an HTTP 200 OK status code and a list containing the child objects that are located at this hierarchy level. The user can navigate hierarchy using 'up'/'down' links in the result. If there is no 'up' link, you are at the root level. If there is no 'down' link, you have reached a leaf object which is not a parent or other objects in this hierarchy. Depending on the level where you invoke the service, the results should be interpreted differently.",
        "operationId" : "browseInventoryPath",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "maxResult",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "default" : 2147483647,
          "format" : "int32"
        }, {
          "name" : "startIndex",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "queryCount",
          "in" : "query",
          "required" : true,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "keys",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "conditions",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful.",
            "schema" : {
              "$ref" : "#/definitions/inventory-item"
            }
          },
          "401" : {
            "description" : "User is not authorized."
          }
        }
      }
    },
    "/packages" : {
      "get" : {
        "tags" : [ "Packages Service" ],
        "summary" : "List all packages",
        "description" : "Returns a list of all deployed packages.",
        "operationId" : "listAllPackages",
        "produces" : [ "application/xml", "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/packages"
            }
          },
          "400" : {
            "description" : "Request is not valid (validation error)"
          },
          "401" : {
            "description" : "User is not authorized"
          }
        }
      },
      "post" : {
        "tags" : [ "Packages Service" ],
        "summary" : "Import package",
        "description" : "Imports a package. The package binary content should be available as multi-part content (see RFC-2387 for details). Details of working with multi-part resources depend on the used client's HTTP/REST library. For example, in Spring it will look like:<br /><pre>Sample client code:<br />-------------------<br />String url = \"https://localhost:8281/vco/api/packages/\";<br />MultiValueMap<String, Resource> parts = new LinkedMultiValueMap<String, Resource>();<br />Resource r = new FileSystemResource(\"D:/path/to/some.package\");<br />parts.put(\"file\", Arrays.asList(r));<br />new RestTemplate().postForLocation(url, parts);<br />------------------- </pre>",
        "operationId" : "importPackage",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "file",
          "in" : "formData",
          "required" : true,
          "type" : "file"
        }, {
          "name" : "overwrite",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "importConfigurationAttributeValues",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "tagImportMode",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "ImportButPreserveExistingValue",
          "enum" : [ "DoNotImport", "ImportAndOverwriteExistingValue", "ImportButPreserveExistingValue" ]
        } ],
        "responses" : {
          "201" : {
            "description" : "Package successfully imported"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "409" : {
            "description" : "One or more package elements have an older version."
          }
        }
      }
    },
    "/packages/{packageName}" : {
      "get" : {
        "tags" : [ "Packages Service" ],
        "summary" : "Package details",
        "description" : "Returns details of the package, with list all contained workflows and actions.",
        "operationId" : "packageDetails",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "packageName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/package-details"
            }
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find a package with the specified name"
          }
        }
      },
      "delete" : {
        "tags" : [ "Packages Service" ],
        "summary" : "Delete package",
        "description" : "<p>Deletes a package with a given name.</p><p>Takes 3 options for deleting a package:</p><ul><li>deletePackage - deletes the package without the content</li><li>deletePackageWithContent - deletes the package along with the content. If other packages share elements with this package, they will be deleted</li><li>deletePackageKeepingShared - deletes the package along with the content. If other packages share elements with this package, the elements will not be removed.</li></ul><p>If no option parameter is provided, the default one is used: deletePackage</p>",
        "operationId" : "deletePackage",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "packageName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "option",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "deletePackage"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find a package with the specified name"
          }
        }
      }
    },
    "/packages/{packageName}/permissions" : {
      "get" : {
        "tags" : [ "Packages Service" ],
        "summary" : "Get package permissions",
        "description" : "Retrieves package permissions.",
        "operationId" : "getPermissionsForObject",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful.",
            "schema" : {
              "$ref" : "#/definitions/permissions"
            }
          },
          "401" : {
            "description" : "User is not authorized"
          }
        }
      },
      "post" : {
        "tags" : [ "Packages Service" ],
        "summary" : "Set permissions for package",
        "description" : "Set permissions for package with given name.",
        "operationId" : "insertPermissionsForObject",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/permissions"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/permissions"
            }
          },
          "201" : {
            "description" : "The request is successful"
          },
          "400" : {
            "description" : "Request is not valid (validation error)"
          },
          "401" : {
            "description" : "User is not authorized"
          }
        }
      },
      "delete" : {
        "tags" : [ "Packages Service" ],
        "summary" : "Deletes all permissions",
        "description" : "Deletes all permissions for a package with a given name.",
        "operationId" : "deletePermissionsForObject",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "401" : {
            "description" : "User is not authorized"
          }
        }
      }
    },
    "/packages/{packageName}/permissions/{ruleId}" : {
      "get" : {
        "tags" : [ "Packages Service" ],
        "summary" : "Get permission rule",
        "description" : "Retrieves details for a specific permission rule. Each rule contains information about the principal and he access rights assigned.",
        "operationId" : "getPermissionRule",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/permission"
            }
          },
          "400" : {
            "description" : "Request is not valid (validation error)"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find a package with the specified name, the user does not have 'read' access rights for that package, or the permission rule with the specified ID does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "Packages Service" ],
        "summary" : "Update permission rule",
        "description" : "Updates principal or access rights for single permission rule with given ID.",
        "operationId" : "updatePermissionRule",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/permission"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "400" : {
            "description" : "Request is not valid (validation error)"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find a package with the specified name, the user does not have 'admin' access rights for that package, or the permission rule with the specified ID does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Packages Service" ],
        "summary" : "Delete permission rule",
        "description" : "",
        "operationId" : "deletePermissionRule",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find a package with the specified name, the user does not have 'admin' access rights for that package, or the permission rule with the specified ID does not exist"
          }
        }
      }
    },
    "/plugins" : {
      "get" : {
        "tags" : [ "Plugin Service" ],
        "summary" : "List all plugins",
        "description" : "Returns metadata information for all installed plug-ins.",
        "operationId" : "listAllPlugins",
        "produces" : [ "application/xml", "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/plugins"
            }
          },
          "401" : {
            "description" : "User is not authenticated"
          },
          "403" : {
            "description" : "User is not authorized"
          }
        }
      },
      "post" : {
        "tags" : [ "Plugin Service" ],
        "summary" : "Import plugin",
        "description" : "Imports a plug-in. If a plug-in with the same name is already installed, the import will fail unless the overwrite parameter is set to true. The plug-in binary content must be available as multi-part content (see RFC-2387 for details). Details of working with multi-part resources depend on the used client HTTP/REST library. For example, in Spring it will look like:<br /><pre>Sample client code:<br />-------------------<br />String url = \"https://localhost:8281/vco/api/plugins/\";<br />MultiValueMap<String, Resource> parts = new LinkedMultiValueMap<String, Resource>();<br />Resource r = new FileSystemResource(\"D:/path/to/plugin.dar\");<br />parts.put(\"file\", Arrays.asList(r));<br />parts.put(\"categoryId\", \"\");<br />new RestTemplate().postForLocation(url, parts);<br />-------------------</pre>",
        "operationId" : "importPlugin",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "file",
          "in" : "formData",
          "required" : true,
          "type" : "file"
        }, {
          "name" : "format",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "default" : "dar"
        }, {
          "name" : "overwrite",
          "in" : "query",
          "required" : true,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "401" : {
            "description" : "User is not authenticated"
          },
          "403" : {
            "description" : "User is not authorized"
          },
          "409" : {
            "description" : "Plug-in already exists"
          }
        }
      }
    },
    "/plugins/installPluginDynamically" : {
      "post" : {
        "tags" : [ "Plugin Service" ],
        "summary" : "Install plugin dynamically",
        "description" : "Imports a plug-in. If a plug-in with the same name is already installed, the import will fail unless the overwrite parameter is set to true. The plug-in binary content must be available as multi-part content (see RFC-2387 for details). Details of working with multi-part resources depend on the used client HTTP/REST library. For example, in Spring it will look like:<br /><pre>Sample client code:<br />-------------------<br />String url = \"https://localhost:8281/vco/api/plugins/\";<br />MultiValueMap<String, Resource> parts = new LinkedMultiValueMap<String, Resource>();<br />Resource r = new FileSystemResource(\"D:/path/to/plugin.dar\");<br />parts.put(\"file\", Arrays.asList(r));<br />parts.put(\"categoryId\", \"\");<br />new RestTemplate().postForLocation(url, parts);<br />-------------------</pre>",
        "operationId" : "installPluginDynamically",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "file",
          "in" : "formData",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "400" : {
            "description" : "Request is not valid (validation error)"
          },
          "401" : {
            "description" : "User is not authenticated"
          },
          "403" : {
            "description" : "User is not authorized"
          },
          "409" : {
            "description" : "Plug-in already exists"
          }
        }
      }
    },
    "/plugins/{pluginName}" : {
      "get" : {
        "tags" : [ "Plugin Service" ],
        "summary" : "Export plugin",
        "description" : "Exports a plug-in by name. If the request is successful, the plug-in binary content is available as an attachment with MIME type application/zip (that is, a normal ZIP file). It is up to the client application to properly fetch and process this attachment, for example by saving it to local file system. The exported plug-in has the same format as that needed by the configurator when uploading a plug-in.",
        "operationId" : "exportPlugin",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "pluginName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "401" : {
            "description" : "User is not authenticated"
          },
          "403" : {
            "description" : "User is not authorized"
          }
        }
      }
    },
    "/plugins/{pluginName}/state" : {
      "put" : {
        "tags" : [ "Plugin Service" ],
        "summary" : "Enable/disable plugin",
        "description" : "Enables/disables plug-in.",
        "operationId" : "disablePlugin",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "pluginName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/state-context"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "400" : {
            "description" : "Request is not valid (validation error)"
          },
          "401" : {
            "description" : "User is not authenticated"
          },
          "403" : {
            "description" : "User is not authorized"
          }
        }
      }
    },
    "/policies" : {
      "get" : {
        "tags" : [ "Policy Service" ],
        "summary" : "Get all policies",
        "description" : "Get all policies",
        "operationId" : "getAllPolicies",
        "produces" : [ "application/xml", "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/WsPolicyList"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          }
        }
      },
      "post" : {
        "tags" : [ "Policy Service" ],
        "summary" : "Create policy",
        "description" : "Create policy",
        "operationId" : "createPolicy",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WsPolicy"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "The request is successful"
          },
          "400" : {
            "description" : "The request is invalid(validation error)"
          },
          "401" : {
            "description" : "The user is not authorized"
          }
        }
      }
    },
    "/policies/{id}" : {
      "get" : {
        "tags" : [ "Policy Service" ],
        "summary" : "Get policy",
        "description" : "Get policy",
        "operationId" : "getPolicy",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/WsPolicy"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Cannot find a policy with the specified ID or the user does not have 'read' rights over it"
          }
        }
      },
      "delete" : {
        "tags" : [ "Policy Service" ],
        "summary" : "Delete policy",
        "description" : "Delete policy",
        "operationId" : "deletePolicy",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Cannot find a policy with the specified ID or the user does not have 'delete' rights over it"
          }
        }
      }
    },
    "/resources" : {
      "get" : {
        "tags" : [ "Resource Service" ],
        "summary" : "List all resources",
        "description" : "Retrieves a list of all resources.",
        "operationId" : "listAllresources",
        "produces" : [ "application/xml", "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/resources"
            }
          },
          "401" : {
            "description" : "User is not authorized"
          }
        }
      },
      "post" : {
        "tags" : [ "Resource Service" ],
        "summary" : "Import resource",
        "description" : "Imports a resource in a given category. The resource binary content should be available as multi-part content (see RFC-2387 for details). Details of working with multi-part resources depend on the used client's HTTP/REST library. For example, in Spring it will look like:<br /><pre>Sample client code:<br />-------------------<br />String url = \"https://localhost:8281/vco/api/resources/\";<br />MultiValueMap<String, Resource> parts = new LinkedMultiValueMap<String, Resource>();<br />Resource r = new FileSystemResource(\"D:/path/to/some.vsoconf\");<br />parts.put(\"file\", Arrays.asList(r));<br />parts.put(\"categoryId\", \"828080808080808080808080808080807F818080013217004819830adebdb10ea\");<br />new RestTemplate().postForLocation(url, parts);<br />-------------------</pre>",
        "operationId" : "importResource",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "categoryId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "formData",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "202" : {
            "description" : "Resource successfully imported"
          },
          "400" : {
            "description" : "Request is not valid (validation error)"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find resource category with the specified name"
          }
        }
      }
    },
    "/resources/{id}" : {
      "get" : {
        "tags" : [ "Resource Service" ],
        "summary" : "Export resource",
        "description" : "Exports a resource by its ID. If the request is successful, the resource binary content is available in the body of response message. It is up to the client application to properly fetch and process this attachment, for example by saving it to local file system. The exported resource has the same internal format as the resource exported using Orchestrator client.",
        "operationId" : "exportResource",
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find resource with the specified ID"
          }
        }
      },
      "delete" : {
        "tags" : [ "Resource Service" ],
        "summary" : "Delete resource",
        "description" : "If the resource is referenced by some workflow, it is considered to be 'in use' and the delete operation will fail, unless the 'force' option is provided.",
        "operationId" : "deleteResource",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "force",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find an resource with the specified ID"
          }
        }
      }
    },
    "/resources/{id}/permissions" : {
      "get" : {
        "tags" : [ "Resource Service" ],
        "summary" : "Get permissions",
        "description" : "Retrieves resource permissions.",
        "operationId" : "getPermissionsForObject",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/permissions"
            }
          },
          "401" : {
            "description" : "User is not authorized"
          }
        }
      },
      "post" : {
        "tags" : [ "Resource Service" ],
        "summary" : "Insert permissions",
        "description" : "Sets permissions for a resource with a given ID. Access rights : 'r' - VIEW,  'x' - EXECUTE, 'i' - INSPECT,  'c' - EDIT, 'a' - ADMIN ",
        "operationId" : "insertPermissionsForObject",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/permissions"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/permissions"
            }
          },
          "201" : {
            "description" : "The request is successful"
          },
          "400" : {
            "description" : "Request is not valid (validation error)"
          },
          "401" : {
            "description" : "User is not authorized"
          }
        }
      },
      "delete" : {
        "tags" : [ "Resource Service" ],
        "summary" : "Delete permissions",
        "description" : "Deletes all permissions for resource with a given ID.",
        "operationId" : "deletePermissionsForObject",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "401" : {
            "description" : "User is not authorized"
          }
        }
      }
    },
    "/resources/{id}/permissions/{ruleId}" : {
      "get" : {
        "tags" : [ "Resource Service" ],
        "summary" : "Get permission rule",
        "description" : "Retrieves details for a specific permission rule. Each rule contains information about the principal and the access rights assigned.",
        "operationId" : "getPermissionRule",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful.",
            "schema" : {
              "$ref" : "#/definitions/permission"
            }
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find a resource with the specified ID, the user does not have 'read' access rights for that resource, or the permission rule with the specified ID does not exist."
          }
        }
      },
      "put" : {
        "tags" : [ "Resource Service" ],
        "summary" : "Update permission rule",
        "description" : "Updates principal or access rights for a single permission rule with a given ID.",
        "operationId" : "updatePermissionRule",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/permission"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "400" : {
            "description" : "Request is not valid (validation error)"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find a resource with the specified ID, the user does not have 'admin' access rights for that resource, or the permission rule with the specified ID does not exist."
          }
        }
      },
      "delete" : {
        "tags" : [ "Resource Service" ],
        "summary" : "Delete permission rule",
        "description" : "Deletes a single permission rule with a given ID.",
        "operationId" : "deletePermissionRule",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "401" : {
            "description" : "User is not authorized"
          },
          "404" : {
            "description" : "Cannot find a resource with the specified ID, the user does not have 'admin' access rights for that resource, or the permission rule with the specified ID does not exist."
          }
        }
      }
    },
    "/schema" : {
      "get" : {
        "tags" : [ "Service Descriptor Service" ],
        "summary" : "Get REST XSD schema file",
        "description" : "The XSD schema file defines the elements and types used by the REST service. You can use it to generate stub classes (in Java or other programming language).",
        "operationId" : "getXmlSchema",
        "produces" : [ "application/xml", "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The request is successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "byte"
              }
            }
          },
          "401" : {
            "description" : "User is not authorized."
          }
        }
      }
    },
    "/schema/{name}" : {
      "get" : {
        "tags" : [ "Service Descriptor Service" ],
        "summary" : "Get REST XSD schema file",
        "description" : "The XSD schema file defines the elements and types used by the REST service. You can use it to generate stub classes (in Java or other programming language)",
        "operationId" : "getXmlSchema",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "byte"
              }
            }
          },
          "401" : {
            "description" : "User is not authorized."
          }
        }
      }
    },
    "/server" : {
      "get" : {
        "tags" : [ "Orchestrator Server Instance Service" ],
        "summary" : "Enumerate services",
        "description" : "A REST endpoint for listing Orchestrator Server instance services.",
        "operationId" : "enumerateServices",
        "produces" : [ "application/xml" ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/server-object"
            }
          },
          "401" : {
            "description" : "The user is not authorized."
          }
        }
      }
    },
    "/server-configuration" : {
      "get" : {
        "tags" : [ "Server Configuration Service" ],
        "summary" : "Get server configuration",
        "description" : "Returns a human-readable representation of the Orchestrator server configuration.",
        "operationId" : "getServerConfiguration",
        "produces" : [ "application/xml", "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The request is successful.",
            "schema" : {
              "$ref" : "#/definitions/config-entries"
            }
          },
          "401" : {
            "description" : "User is not authenticated."
          },
          "403" : {
            "description" : "User is not authorized."
          }
        }
      },
      "post" : {
        "tags" : [ "Server Configuration Service" ],
        "summary" : "Import server configuration",
        "description" : "Imports/exports the server configuration. The exported file is available as an attachment with MIME type application/zip. To perform an export request, an empty file must be attached to the request. Otherwise, the server tries to import a configuration.<br /><br />The format of the exported or imported file is same as that of files exported or imported by using the Orchestrator configuration interface. The configuration binary content must be available as multi-part content (see RFC-2387 for details). Details of working with multi-part resources depend on the used client HTTP/REST library. For example, in Spring it will look like:<br /><pre>Sample client code that imports a server configuration:<br /> -----------------------<br />MultiValueMap<String, Object> parts = new LinkedMultiValueMap<String, Object>();<br />parts.add(\"file\", new FileSystemResource(\"/path/to/vco_config_file.config\"))<br />;parts.add(\"password\", \"secret\")<br />;parts.add(\"importIdentity\", Boolean.FALSE);<br /><br />getRestTemplate().postForEntity(\"https://localhost:8281/vco/api/server-configuration\", parts, Void.class);<br />-----------------------</pre>",
        "operationId" : "importServerConfiguration",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "password",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "importIdentity",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "isUpgradeBackup",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful."
          },
          "400" : {
            "description" : "Request is not valid (validation error)."
          },
          "401" : {
            "description" : "User is not authenticated."
          },
          "403" : {
            "description" : "User is not authorized."
          }
        }
      }
    },
    "/server/authentication" : {
      "get" : {
        "tags" : [ "Orchestrator Server Instance Service" ],
        "summary" : "Get authentication",
        "description" : "Retrieve the Orchestrator Server Authentication configuration type and login url.",
        "operationId" : "getAuthentication",
        "produces" : [ "application/xml", "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/server-authentication"
            }
          },
          "401" : {
            "description" : "The user is not authorized."
          }
        }
      }
    },
    "/server/groups" : {
      "get" : {
        "tags" : [ "Orchestrator Server Instance Service" ],
        "summary" : "Get groups",
        "description" : "A REST endpoint for getting all available user groups that can be used for setting permissions. If maxResult request parameters is not used the groups returned will be limited to 200.",
        "operationId" : "getGroups",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maxResult",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "default" : 200,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/user-groups"
            }
          },
          "401" : {
            "description" : "The user is not authorized."
          }
        }
      }
    },
    "/server/permissions" : {
      "get" : {
        "tags" : [ "Orchestrator Server Instance Service" ],
        "summary" : "Get Orchestrator server permissions",
        "description" : "Retrieve the Orchestrator Server permissions.",
        "operationId" : "getPermissionsForObject",
        "produces" : [ "application/xml", "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/permissions"
            }
          },
          "401" : {
            "description" : "The user is not authorized."
          }
        }
      },
      "post" : {
        "tags" : [ "Orchestrator Server Instance Service" ],
        "summary" : "Insert permissions for Orchestrator server",
        "description" : "Adds new permissions for the Orchestrator Server or updates the current ones if such permission rules exist. Access rights : 'r' - VIEW,  'x' - EXECUTE, 'i' - INSPECT,  'c' - EDIT, 'a' - ADMIN ",
        "operationId" : "insertPermissionsForObject",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/permissions"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/permissions"
            }
          },
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "The request is invalid(validation error)."
          },
          "401" : {
            "description" : "The user is not authorized."
          }
        }
      },
      "delete" : {
        "tags" : [ "Orchestrator Server Instance Service" ],
        "summary" : "Delete all permissions for the Orchestrator server",
        "description" : "Deletes all permissions for the Orchestrator Server.",
        "operationId" : "deletePermissionsForObject",
        "produces" : [ "application/xml", "application/json" ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "401" : {
            "description" : "The user is not authorized."
          }
        }
      }
    },
    "/server/permissions/{ruleId}" : {
      "get" : {
        "tags" : [ "Orchestrator Server Instance Service" ],
        "summary" : "Get permission rule",
        "description" : "Retrieves details for a specific permission rule. Each rule contains information about the principal and the access rights assigned.",
        "operationId" : "getPermissionRule",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/permission"
            }
          },
          "401" : {
            "description" : "The user is not authorized."
          },
          "404" : {
            "description" : "The user does not have 'read' access rights for the server object, or the permission rule with the specified ID does not exist."
          }
        }
      },
      "put" : {
        "tags" : [ "Orchestrator Server Instance Service" ],
        "summary" : "Update permission rule",
        "description" : "Updates principal or access rights for a single permission rule with a given ID.",
        "operationId" : "updatePermissionRule",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/permission"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "400" : {
            "description" : "The request is invalid(validation error)."
          },
          "401" : {
            "description" : "The user is not authorized."
          },
          "404" : {
            "description" : "The user does not have 'admin' access rights for the server object, or the permission rule with the specified ID does not exist."
          }
        }
      },
      "delete" : {
        "tags" : [ "Orchestrator Server Instance Service" ],
        "summary" : "Delete permission rule",
        "description" : "Deletes a single permission rule with a given ID.",
        "operationId" : "deletePermissionRule",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "401" : {
            "description" : "The user is not authorized."
          },
          "404" : {
            "description" : "The user does not have 'read' access rights for the server object, or the permission rule with the specified ID does not exist."
          }
        }
      }
    },
    "/status" : {
      "get" : {
        "tags" : [ "Service Descriptor Service" ],
        "summary" : "Get vRA registration state",
        "description" : "Returns the registration state of Orchestrator in vRA component registry.",
        "operationId" : "status",
        "produces" : [ "application/xml", "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The request is successful.",
            "schema" : {
              "$ref" : "#/definitions/ServiceRegistryStatus"
            }
          },
          "401" : {
            "description" : "User is not authorized."
          }
        }
      }
    },
    "/tags" : {
      "get" : {
        "tags" : [ "Tagging Service" ],
        "summary" : "List tag owners",
        "description" : "Returned list contains users created at least one tag. Global tags are listed under system user __GLOBAL__.",
        "operationId" : "listTagOwners",
        "produces" : [ "application/xml", "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/owners"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          }
        }
      }
    },
    "/tags/{owner}" : {
      "get" : {
        "tags" : [ "Tagging Service" ],
        "summary" : "List tags by owner",
        "description" : "Retrieves list of tag created by specific user. Global tags are listed under system user __GLOBAL__.",
        "operationId" : "listTagsByOwner",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/tags"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          }
        }
      },
      "delete" : {
        "tags" : [ "Tagging Service" ],
        "summary" : "Untag object",
        "description" : "Removes all tags created by specified owner.",
        "operationId" : "untagObjectsByTagNameAndOwner",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "401" : {
            "description" : "Only admin users can delete tags owned by a different user"
          }
        }
      }
    },
    "/tags/{owner}/{tagName}" : {
      "get" : {
        "tags" : [ "Tagging Service" ],
        "summary" : "Get tags by tag name and owner",
        "description" : "Retrieves list of tag instance created by specific user. Retrieved information is composed of reference to tagged object, tag name, tag value and is this instance global or private.",
        "operationId" : "getTagsByTagNameAndOwner",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tagName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/tag-instances"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          }
        }
      }
    },
    "/tasks" : {
      "get" : {
        "tags" : [ "Task Service" ],
        "summary" : "Get tasks",
        "description" : "Endpoint for retrieving all tasks.",
        "operationId" : "getTasks",
        "produces" : [ "application/xml", "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/tasks"
            }
          },
          "400" : {
            "description" : "The request is invalid(validation error)"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : ""
          }
        }
      },
      "post" : {
        "tags" : [ "Task Service" ],
        "summary" : "Create task",
        "description" : "Use this endpoint to schedule a new task.",
        "operationId" : "createTask",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/task"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "The request is successful"
          },
          "400" : {
            "description" : "The request is invalid(validation error)"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
          }
        }
      }
    },
    "/tasks/{id}" : {
      "get" : {
        "tags" : [ "Task Service" ],
        "summary" : "Get task",
        "description" : "Endpoint for retrieving a single task.",
        "operationId" : "getTask",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/task"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find a task with the specified ID or the user does not have 'read' access rights for that workflow"
          }
        }
      },
      "post" : {
        "tags" : [ "Task Service" ],
        "summary" : "Update task",
        "description" : "Use this endpoint to update an already scheduled task. If the scheduling date is changed, the original task is rescheduled. It is not allowed to update the scheduled workflow. To update the scheduled workflow, remove the current task and schedule a new one.",
        "operationId" : "updateTask",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/task-data"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/task"
            }
          },
          "400" : {
            "description" : "The request is invalid(validation error)"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find a task with the specified ID or the user does not have 'read' access rights for that workflow"
          }
        }
      },
      "delete" : {
        "tags" : [ "Task Service" ],
        "summary" : "Delete task",
        "description" : "Use this endpoint to delete a scheduled task.",
        "operationId" : "deleteTask",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find a Task with the specified ID or the user does not have 'read' access rights for that task"
          }
        }
      }
    },
    "/tasks/{id}/executions" : {
      "get" : {
        "tags" : [ "Task Service" ],
        "summary" : "Get task executions",
        "description" : "Endpoint for retrieving all task executions until the current date. ",
        "operationId" : "getExecutions",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/executions"
            }
          },
          "400" : {
            "description" : "The request is invalid(validation error)"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find a task with the specified ID or the user does not have 'read' access rights for that workflow"
          }
        }
      }
    },
    "/tasks/{id}/permissions" : {
      "get" : {
        "tags" : [ "Task Service" ],
        "summary" : "Get task permissions",
        "description" : "Retrieves task permissions.",
        "operationId" : "getPermissionsForObject",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/permissions"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find a task with the specified ID or the user does not have 'read' access rights for that workflow"
          }
        }
      },
      "post" : {
        "tags" : [ "Task Service" ],
        "summary" : "Set task permissions",
        "description" : "Sets permissions for a task with a given ID.<br />Access rights : 'r' - VIEW,  'x' - EXECUTE, 'i' - INSPECT,  'c' - EDIT, 'a' - ADMIN ",
        "operationId" : "insertPermissionsForObject",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/permissions"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/permissions"
            }
          },
          "400" : {
            "description" : "The request is invalid(validation error)"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find a task with the specified id"
          }
        }
      },
      "delete" : {
        "tags" : [ "Task Service" ],
        "summary" : "Delete task permissions",
        "description" : "Deletes all permissions for a task with a given ID.",
        "operationId" : "deletePermissionsForObject",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "202" : {
            "description" : "No content"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find a task with the specified ID or the user does not have 'read' access rights for that workflow"
          }
        }
      }
    },
    "/tasks/{id}/permissions/{ruleId}" : {
      "get" : {
        "tags" : [ "Task Service" ],
        "summary" : "Get permission rule",
        "description" : "Retrieves details for a specific permission rule. Each rule contains information about the principal and the access rights assigned.",
        "operationId" : "getPermissionRule",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/permission"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find a task with the specified ID, the user does not have 'read' access rights for that task, or the permission rule with the specified ID does not exist."
          }
        }
      },
      "put" : {
        "tags" : [ "Task Service" ],
        "summary" : "Update permission rule",
        "description" : "Updates principal or access rights for a single permission rule with a given ID.",
        "operationId" : "updatePermissionRule",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/permission"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "No content"
          },
          "400" : {
            "description" : "The request is invalid(validation error)"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find a task with the specified ID, the user does not have 'admin' access rights for that task, or the permission rule with the specified ID does not exist."
          }
        }
      },
      "delete" : {
        "tags" : [ "Task Service" ],
        "summary" : "Delete permission rule",
        "description" : "Deletes a single permission rule with a given ID.",
        "operationId" : "deletePermissionRule",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "202" : {
            "description" : "No content"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find a task with the specified ID, the user does not have 'admin' access rights for that task, or the permission rule with the specified ID does not exist."
          }
        }
      }
    },
    "/users" : {
      "get" : {
        "tags" : [ "User Service" ],
        "summary" : "Get user information",
        "description" : "Returns the solution user and whether the current user has admin rights as well as its member groups.",
        "operationId" : "userMeta",
        "produces" : [ "application/xml", "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/user"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          }
        }
      }
    },
    "/versions" : {
      "get" : {
        "tags" : [ "Service Descriptor Service" ],
        "summary" : "List supported API versions",
        "description" : "Currently, there is only one version.",
        "operationId" : "supportedApiVersions",
        "produces" : [ "application/xml", "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The request is successful.",
            "schema" : {
              "$ref" : "#/definitions/supported-versions"
            }
          },
          "401" : {
            "description" : "User is not authorized."
          }
        }
      }
    },
    "/workflows" : {
      "get" : {
        "tags" : [ "Workflow Service" ],
        "summary" : "Get all workflows",
        "description" : "Get all workflows",
        "operationId" : "getAllWorkflows",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "maxResult",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "default" : 2147483647,
          "format" : "int32"
        }, {
          "name" : "startIndex",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "queryCount",
          "in" : "query",
          "required" : true,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "keys",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "conditions",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "tags",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/inventory-items"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          }
        }
      },
      "post" : {
        "tags" : [ "Workflow Service" ],
        "summary" : "Import/upload a workflow",
        "description" : "Imports a workflow in a given category. The workflow binary content should be available as multi-part content (see RFC-2387 for details).<br />Details of working with multi-part resources depend on the used client HTTP/REST library. For example, in Spring it will look like:<br /><pre>Sample client code:-------------------String url = \"https://localhost:8281/vco/api/workflows/\";MultiValueMap<String, Resource> parts = new LinkedMultiValueMap<String, Resource>();Resource r = new FileSystemResource(\"D:/path/to/some.workflow\");parts.put(\"file\", Arrays.asList(r));parts.put(\"categoryId\", \"\");new RestTemplate().postForLocation(url, parts); ------------------- </pre>",
        "operationId" : "importWorkflow",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "categoryId",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "overwrite",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "file",
          "in" : "formData",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Cannot find a category with the specified ID."
          }
        }
      }
    },
    "/workflows/{id}" : {
      "get" : {
        "tags" : [ "Workflow Service" ],
        "summary" : "Retrieves the definition of a workflow",
        "description" : "The returned definition contains base data for the workflow, as well the input and output parameter definitions. It also has links to the workflow presentation and workflow category in which this workflow is located.<p>To retrieve the input and output parameter definitions localized, add Accept-Language header, with the appropriate locale. In advance, localization resource should be present for the workflow, otherwise it defaults to the standard input and output parameter definitions.</p>",
        "operationId" : "getWorkflow",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/workflow"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find a workflow with the specified id or the user does not have 'read' access rights for that workflow"
          }
        }
      }
    },
    "/workflows/{id}/icon" : {
      "get" : {
        "tags" : [ "Workflow Service" ],
        "summary" : "Access workflow's icon",
        "description" : "The icon's binary data is returned and response Content-type is set to correct media type, for example \"Content-Type:image/png\"",
        "operationId" : "downloadWorkflowIcon",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
          }
        }
      }
    },
    "/workflows/{id}/permissions" : {
      "get" : {
        "tags" : [ "Workflow Service" ],
        "summary" : "Retrieve workflow permissions",
        "description" : "Retrieve workflow permissions.",
        "operationId" : "getPermissionsForObject",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/permissions"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find a workflow with the specified ID."
          }
        }
      },
      "post" : {
        "tags" : [ "Workflow Service" ],
        "summary" : "Set workflow permissions",
        "description" : "Sets permissions for a workflow with a given ID.",
        "operationId" : "insertPermissionsForObject",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/permissions"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/permissions"
            }
          },
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "The request is invalid(validation error)"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Cannot find an action with the specified name"
          }
        }
      },
      "delete" : {
        "tags" : [ "Workflow Service" ],
        "summary" : "Deletes all permissions",
        "description" : "Deletes all permissions for a workflow with a given ID.",
        "operationId" : "deletePermissionsForObject",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Cannot find an action with the specified name"
          }
        }
      }
    },
    "/workflows/{id}/permissions/{ruleId}" : {
      "get" : {
        "tags" : [ "Workflow Service" ],
        "summary" : "Retrieves permission rule",
        "description" : "Each rule contains information about the principal and the access rights assigned.",
        "operationId" : "getPermissionRule",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/permission"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find a workflow with the specified ID, the user does not have 'read' access rights for that workflow, or the permission rule with the specified ID does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "Workflow Service" ],
        "summary" : "Updates permission rule",
        "description" : "Updates principal or access rights for a single permission rule with a given ID.",
        "operationId" : "updatePermissionRule",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/permission"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "400" : {
            "description" : "The request is invalid(validation error)"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find a workflow with the specified ID, the user does not have 'admin' access rights for that workflow, or the permission rule with the specified ID does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Workflow Service" ],
        "summary" : "Delete permission rule",
        "description" : "Deletes a single permission rule with a given ID.",
        "operationId" : "deletePermissionRule",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find a workflow with the specified ID, the user does not have 'admin' access rights for that workflow, or the permission rule with the specified ID does not exist"
          }
        }
      }
    },
    "/workflows/{id}/schema" : {
      "get" : {
        "tags" : [ "Workflow Service" ],
        "summary" : "Access workflow's schema image",
        "description" : "The icon's schema image binary data is returned and response Content-type is set to correct media type, for example \"Content-Type:image/png\"",
        "operationId" : "downloadWorkflowSchema",
        "produces" : [ "image/png" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
          }
        }
      }
    },
    "/workflows/{workflowId}" : {
      "delete" : {
        "tags" : [ "Workflow Service" ],
        "summary" : "Delete a workflow",
        "description" : "Deletes a workflow with a given ID. If the workflow is referenced by some other workflows, or is running, it is considered to be 'in use' and the delete operation will fail, unless the 'force' option is provided.",
        "operationId" : "deleteWorkflow",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "force",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "forceDeleteLocked",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find a workflow with the specified ID."
          }
        }
      }
    },
    "/workflows/{workflowId}/executions" : {
      "get" : {
        "tags" : [ "Workflow Run Service" ],
        "summary" : "Get all executions",
        "description" : "Retrieves all workflow runs for a given workflow and filters by current user's permissions.",
        "operationId" : "getAllExecutionsFor",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "maxResult",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "default" : 2147483647,
          "format" : "int32"
        }, {
          "name" : "startIndex",
          "in" : "query",
          "required" : true,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "keys",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "conditions",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "sortOrders",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/executions"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Cannot find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
          }
        }
      },
      "post" : {
        "tags" : [ "Workflow Run Service" ],
        "summary" : "Start workflow execution",
        "description" : "Creates a new instance of a workflow's run, by using the passed parameters. The workflow run is an asynchronous, so the call does not return a response body.",
        "operationId" : "startWorkflowExecution",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/execution-context"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "The request is successful"
          },
          "400" : {
            "description" : "The request is invalid(validation error)"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Cannot find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
          }
        }
      }
    },
    "/workflows/{workflowId}/executions/{executionId}" : {
      "get" : {
        "tags" : [ "Workflow Run Service" ],
        "summary" : "Get workflow execution",
        "description" : "Retrieves a workflow run for a given workflow. When request parameter showDetails is set to true additional information will be retrieved. In this case the result contains current execution stack of the workflow run.",
        "operationId" : "getWorkflowExecution",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "executionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "showDetails",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "expand",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/workflow-execution"
            }
          },
          "204" : {
            "description" : "No content"
          },
          "400" : {
            "description" : "The request is invalid(validation error)"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Cannot find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
          }
        }
      },
      "delete" : {
        "tags" : [ "Workflow Run Service" ],
        "summary" : "Delete workflow run",
        "description" : "Deletes a specific workflow run",
        "operationId" : "deleteWorkflowExecution",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "executionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "400" : {
            "description" : "The request is invalid(validation error)"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
          }
        }
      }
    },
    "/workflows/{workflowId}/executions/{executionId}/interaction" : {
      "get" : {
        "tags" : [ "Workflow Run Service" ],
        "summary" : "Get user interaction",
        "description" : "Retrieves user interaction details for a workflow run. If a workflow run with ID: <b>executionId</b> has a user interaction request, the workflow run is suspended until a user answers the interaction request. This API call returns the user interaction parameter, which has to be filled to answer it.",
        "operationId" : "getUserInteraction",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "executionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/user-interaction"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
          }
        }
      },
      "post" : {
        "tags" : [ "Workflow Run Service" ],
        "summary" : "Answers user interaction",
        "description" : "Answers a user interaction for a specific workflow run. If a workflow run with ID: <b>executionId</b> has a user interaction request, the workflow run is suspended until a user answers the interaction request. To answer a user interaction, use this API call with appropriate parameters.",
        "operationId" : "answerUserInteraction",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "executionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/execution-context"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "400" : {
            "description" : "The request is invalid(validation error)"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
          }
        }
      }
    },
    "/workflows/{workflowId}/executions/{executionId}/interaction/presentation" : {
      "get" : {
        "tags" : [ "Workflow User Interaction Presentation Service" ],
        "summary" : "Get presentation for interaction",
        "description" : "Retrieves the definition of a user interaction presentation. To retrieve the definition of a user interaction presentation, make an HTTP GET request at the URL of the presentation. Pass the workflow and execution IDs as a path variable. To retrieve the user interaction presentation definition localized, add Accept-Language header, with the appropriate locale. In advance, localization resource should be present for the workflow of the user interaction, otherwise it defaults to the standard user interaction presentation definition.",
        "operationId" : "getPresentationForInteraction",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "executionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/presentation"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Cannot find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
          }
        }
      }
    },
    "/workflows/{workflowId}/executions/{executionId}/interaction/presentation/instances" : {
      "get" : {
        "tags" : [ "Workflow User Interaction Presentation Service" ],
        "summary" : "Get all interaction presentations",
        "description" : "Retrieves a list of all user interaction presentations for a specified workflow execution. The returned list contains all currently running workflow execution user interaction presentation instances. If the user has admin rights, all presentation instances for all users are returned.",
        "operationId" : "allInteractionPresentations",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "executionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/executions"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Cannot find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
          }
        }
      },
      "post" : {
        "tags" : [ "Workflow User Interaction Presentation Service" ],
        "summary" : "Start interaction presentation",
        "description" : "Creates a new instance of a workflow user interaction presentation by using the passed parameters. To create a new instance of a workflow user interaction presentation, make an HTTP GET request at the URL that contains the instances of that workflow user interaction presentation. Presentation fields are populated with input parameter values and are validated. If there are any validation errors, they are collected and attached to each field. The presentation is marked as invalid. In order the returned workflow user interaction presentation to be localized, add Accept-Language header, with the appropriate locale. In advance, localization resource should be present for the workflow, otherwise it defaults to the standard workflow user interaction presentation.",
        "operationId" : "startInteractionPresentation",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "executionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/execution-context"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/execution"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Cannot find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
          }
        }
      }
    },
    "/workflows/{workflowId}/executions/{executionId}/interaction/presentation/instances/{presentationExecutionId}" : {
      "get" : {
        "tags" : [ "Workflow User Interaction Presentation Service" ],
        "summary" : "Load execution",
        "description" : "Retrieves a specific workflow execution user interaction presentation instance. To retrieve the user interaction presentation localized, add Accept-Language header, with the appropriate locale. In advance, localization resource should be present for the workflow of the user interaction, otherwise it defaults to the standard user interaction presentation.",
        "operationId" : "loadExecution",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "executionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "presentationExecutionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/execution"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "403" : {
            "description" : "The user does not have 'read' access rights for that workflow"
          },
          "404" : {
            "description" : "Cannot find a workflow with the specified ID"
          }
        }
      },
      "post" : {
        "tags" : [ "Workflow User Interaction Presentation Service" ],
        "summary" : "Update presentation",
        "description" : "Update a specific workflow execution user interaction presentation instance. Presentation fields are populated with input parameter values and are validated. If there are any validation errors, they are collected and attached to each field. The presentation is marked as invalid.",
        "operationId" : "updatePresentation",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "executionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "presentationExecutionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/execution-context"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/execution"
            }
          },
          "400" : {
            "description" : "The request is invalid (there's a validation error)"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "403" : {
            "description" : "The user does not have 'read' access rights for that workflow"
          },
          "404" : {
            "description" : "Cannot find a workflow with the specified ID, or presentation instance for executionId does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "Workflow User Interaction Presentation Service" ],
        "summary" : "Update presentation",
        "description" : "Update a specific workflow execution user interaction presentation instance. Presentation fields are populated with input parameter values and are validated. If there are any validation errors, they are collected and attached to each field. The presentation is marked as invalid.",
        "operationId" : "updatePresentation",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "executionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "presentationExecutionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/execution-context"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/execution"
            }
          },
          "400" : {
            "description" : "The request is invalid (there's a validation error)"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "403" : {
            "description" : "The user does not have 'read' access rights for that workflow"
          },
          "404" : {
            "description" : "Cannot find a workflow with the specified ID, or presentation instance for executionId does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Workflow User Interaction Presentation Service" ],
        "summary" : "Delete workflow execution",
        "description" : "Cancels a workflow execution user interaction presentation instance. This API call cancels only the workflow execution user interaction presentation. To cancel the workflow execution use APIs under <b>/api/workflows/{workflowId}/instances</b>",
        "operationId" : "deleteWorkflowExecution",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "executionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "presentationExecutionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "401" : {
            "description" : "The user is not authorized."
          },
          "404" : {
            "description" : "Cannot find presentation instance for executionId"
          }
        }
      }
    },
    "/workflows/{workflowId}/executions/{executionId}/logs" : {
      "get" : {
        "tags" : [ "Workflow Run Service" ],
        "summary" : "Get workflow run logs",
        "description" : "Provides information about each individual event that occurs when the workflow runs. This information includes a description of the event, the user who triggered it, the type and origin of the event, and the time and date when it occurred.",
        "operationId" : "getWorkflowExecutionLogs",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "executionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/logs"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
          }
        }
      }
    },
    "/workflows/{workflowId}/executions/{executionId}/state" : {
      "get" : {
        "tags" : [ "Workflow Run Service" ],
        "summary" : "Get workflow execution state",
        "description" : "Retrieves the current state for a requested workflow run",
        "operationId" : "getWorkflowExecutionState",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "executionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/state"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Cannot find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
          }
        }
      },
      "delete" : {
        "tags" : [ "Workflow Run Service" ],
        "summary" : "Cancel workflow run",
        "description" : "Cancels a workflow run",
        "operationId" : "cancelWorkflowExecution",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "executionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "400" : {
            "description" : "The request is invalid(validation error)"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
          }
        }
      }
    },
    "/workflows/{workflowId}/interactions" : {
      "get" : {
        "tags" : [ "Workflow Service" ],
        "summary" : " Retrieves all user interactions for a requested workflow",
        "description" : " Retrieves all user interactions for a requested workflow.",
        "operationId" : "getAllUserInteractionsForWorkflow",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/interactions"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
          }
        }
      }
    },
    "/workflows/{workflowId}/presentation" : {
      "get" : {
        "tags" : [ "Workflow Presentation Service" ],
        "summary" : "Get presentation",
        "description" : "Retrieves the definition of a workflow presentation. To retrieve the workflow presentation definition localized, add Accept-Language header, with the appropriate locale. In advance, localization resource should be present for the workflow, otherwise it defaults to the standard workflow presentation definition.",
        "operationId" : "getPresentationFor",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/presentation"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Cannot find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
          }
        }
      }
    },
    "/workflows/{workflowId}/presentation/instances" : {
      "get" : {
        "tags" : [ "Workflow Presentation Service" ],
        "summary" : "Get all presentations",
        "description" : "Retrieves a list of the presentations for a workflow that you specify. To retrieve the list of workflow presentations, make an HTTP GET request at the workflow presentations list URL. The returned list contains all of the currently running workflow presentation instances, and all completed instances based on the data from the workflow executions. If the user has admin rights, all presentation instances for all users are returned.",
        "operationId" : "allPresentation",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/executions"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Cannot find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
          }
        }
      },
      "post" : {
        "tags" : [ "Workflow Presentation Service" ],
        "summary" : "Start presentation",
        "description" : " Creates a new instance of the presentation of a workflow, by using the passed parameters. To create a new instance of a workflow presentation, make an HTTP GET request at the URL that contains the instances of the workflow presentation. Presentation's fields are populated with input parameter values and are validated. If there are any validation errors, they are collected and attached to each field. The presentation is marked as invalid. In order the returned workflow presentation to be localized, add Accept-Language header, with the appropriate locale. In advance, localization resource should be present for the workflow, otherwise it defaults to the standard workflow presentation.",
        "operationId" : "startPresentation",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/execution-context"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/execution"
            }
          },
          "400" : {
            "description" : "The request is invalid(validation error)"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Cannot find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
          }
        }
      }
    },
    "/workflows/{workflowId}/presentation/instances/{executionId}" : {
      "get" : {
        "tags" : [ "Workflow Presentation Service" ],
        "summary" : "Load Execution",
        "description" : "Retrieves a specific workflow presentation instance. Presentation instances are removed after the workflow starts. If the presentation instance under requested <b>executionId</b> does not exists, a new presentation instance is created by using the parameters from the workflow execution with the same ID. To retrieve the workflow presentation localized, add Accept-Language header, with the appropriate locale. In advance, localization resource should be present for the workflow, otherwise it defaults to the standard workflow presentation.",
        "operationId" : "loadExecution",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "executionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/execution"
            }
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "403" : {
            "description" : "The user does not have 'read' access rights for that workflow"
          },
          "404" : {
            "description" : "Cannot find a workflow with the specified ID"
          }
        }
      },
      "post" : {
        "tags" : [ "Workflow Presentation Service" ],
        "summary" : "Update presentation",
        "description" : "Update a specific workflow presentation instance. Presentation fields are populated with input parameter values and are validated. If there are any validation errors, they are collected and attached to each field. The presentation is marked as invalid. If the parameter's 'updated' flag is set to true, the dependent field values are recalculated.",
        "operationId" : "updatePresentation",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "executionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/execution-context"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/execution"
            }
          },
          "400" : {
            "description" : "The request is invalid(validation error)"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "403" : {
            "description" : "The user does not have 'read' access rights for that workflow"
          },
          "404" : {
            "description" : "Cannot find a workflow with the specified ID"
          }
        }
      },
      "put" : {
        "tags" : [ "Workflow Presentation Service" ],
        "summary" : "Update presentation",
        "description" : "Update a specific workflow presentation instance. Presentation fields are populated with input parameter values and are validated. If there are any validation errors, they are collected and attached to each field. The presentation is marked as invalid. If the parameter's 'updated' flag is set to true, the dependent field values are recalculated.",
        "operationId" : "updatePresentation",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "executionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/execution-context"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/execution"
            }
          },
          "400" : {
            "description" : "The request is invalid(validation error)"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "403" : {
            "description" : "The user does not have 'read' access rights for that workflow"
          },
          "404" : {
            "description" : "Cannot find a workflow with the specified ID"
          }
        }
      },
      "delete" : {
        "tags" : [ "Workflow Presentation Service" ],
        "summary" : "Delete workflow execution",
        "description" : "Cancels the execution of a workflow presentation instance. This API call cancels only the workflow presentation execution. To cancel the workflow execution, use APIs under <b>/api/workflows/{workflowId}/instances</b>.",
        "operationId" : "deleteWorkflowExecution",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "executionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Cannot find presentation instance for executionId"
          }
        }
      }
    },
    "/workflows/{workflowId}/tasks" : {
      "get" : {
        "tags" : [ "Workflow Service" ],
        "summary" : "Retrieves all scheduled tasks for a requested workflow",
        "description" : "Retrieves all scheduled tasks for a requested workflow.",
        "operationId" : "getAllTasksForWorkflow",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request is successful",
            "schema" : {
              "$ref" : "#/definitions/tasks"
            }
          },
          "204" : {
            "description" : "No content"
          },
          "400" : {
            "description" : "The request is invalid(validation error)"
          },
          "401" : {
            "description" : "The user is not authorized"
          },
          "404" : {
            "description" : "Can not find a workflow with the specified ID or the user does not have 'read' access rights for that workflow"
          }
        }
      }
    }
  },
  "definitions" : {
    "AffectedField" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "BaseConstraint" : {
      "type" : "object"
    },
    "BaseDecorator" : {
      "type" : "object",
      "properties" : {
        "kind" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "CertificateInfo" : {
      "type" : "object",
      "properties" : {
        "issuerName" : {
          "type" : "string"
        },
        "notValidAfter" : {
          "type" : "string",
          "format" : "date-time"
        },
        "notValidBefore" : {
          "type" : "string",
          "format" : "date-time"
        },
        "principalName" : {
          "type" : "string"
        },
        "thumbprint" : {
          "type" : "string"
        },
        "identityCertificateExists" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "Field" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "constraints" : {
          "type" : "array",
          "xml" : {
            "name" : "constraints",
            "wrapped" : true
          },
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/BaseConstraint"
          }
        },
        "affected-fields" : {
          "type" : "array",
          "xml" : {
            "name" : "affected-fields",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/AffectedField"
          }
        },
        "decorators" : {
          "type" : "array",
          "xml" : {
            "name" : "decorators",
            "wrapped" : true
          },
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/BaseDecorator"
          }
        },
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "description" : {
          "type" : "string"
        },
        "display-name" : {
          "type" : "string"
        },
        "hidden" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "messages" : {
          "type" : "array",
          "xml" : {
            "name" : "messages",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/PresentationMessageInfo"
          }
        }
      }
    },
    "Group" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PresentationElement"
      }, {
        "type" : "object",
        "properties" : {
          "fields" : {
            "type" : "array",
            "xml" : {
              "name" : "fields",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/PrimaryField"
            }
          }
        }
      } ]
    },
    "Link" : {
      "type" : "object",
      "properties" : {
        "attribute" : {
          "type" : "array",
          "xml" : {
            "name" : "attributes",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/WsAttribute"
          }
        },
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "type" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "rel" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "PluginBundleMetadata" : {
      "type" : "object",
      "properties" : {
        "url" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string"
        },
        "buildNumber" : {
          "type" : "integer",
          "format" : "int64"
        },
        "moduleName" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "infoText" : {
          "type" : "string"
        },
        "enabled" : {
          "type" : "boolean",
          "default" : false
        },
        "hasValidation" : {
          "type" : "boolean",
          "default" : false
        },
        "configurable" : {
          "type" : "boolean",
          "default" : false
        },
        "hasInstallActions" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "PresentationElement" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "hidden" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "display-name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "messages" : {
          "type" : "array",
          "xml" : {
            "name" : "messages",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/PresentationMessageInfo"
          }
        }
      }
    },
    "PresentationMessageInfo" : {
      "type" : "object",
      "required" : [ "Summary" ],
      "properties" : {
        "Summary" : {
          "type" : "string"
        },
        "Details" : {
          "type" : "string"
        },
        "severity" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "INFO", "WARN", "ERROR" ]
        },
        "code" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "PrimaryField" : {
      "type" : "object",
      "properties" : {
        "fields" : {
          "type" : "array",
          "xml" : {
            "name" : "fields",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/Field"
          }
        },
        "value" : {
          "$ref" : "#/definitions/Value"
        },
        "decorators" : {
          "type" : "array",
          "xml" : {
            "name" : "decorators",
            "wrapped" : true
          },
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/BaseDecorator"
          }
        },
        "type" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "description" : {
          "type" : "string"
        },
        "display-name" : {
          "type" : "string"
        },
        "hidden" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "messages" : {
          "type" : "array",
          "xml" : {
            "name" : "messages",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/PresentationMessageInfo"
          }
        },
        "affected-fields" : {
          "type" : "array",
          "xml" : {
            "name" : "affected-fields",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/AffectedField"
          }
        },
        "constraints" : {
          "type" : "array",
          "xml" : {
            "name" : "constraints",
            "wrapped" : true
          },
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/BaseConstraint"
          }
        }
      }
    },
    "Relations" : {
      "type" : "object",
      "properties" : {
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        },
        "start" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        },
        "link" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        }
      }
    },
    "ServiceRegistryStatus" : {
      "type" : "object",
      "properties" : {
        "defaultServiceEndpointType" : {
          "type" : "string"
        },
        "errorMessage" : {
          "type" : "string"
        },
        "identityCertificateInfo" : {
          "$ref" : "#/definitions/CertificateInfo"
        },
        "serviceInitializationStatus" : {
          "type" : "string"
        },
        "serviceName" : {
          "type" : "string"
        },
        "serviceRegistrationId" : {
          "type" : "string"
        },
        "solutionUser" : {
          "type" : "string"
        },
        "sslCertificateInfo" : {
          "$ref" : "#/definitions/CertificateInfo"
        },
        "startedTime" : {
          "type" : "string",
          "format" : "date-time"
        },
        "initialized" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "StepInfo" : {
      "type" : "object",
      "properties" : {
        "readOnly" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "elements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PresentationElement"
          }
        },
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "description" : {
          "type" : "string"
        },
        "display-name" : {
          "type" : "string"
        },
        "hidden" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "messages" : {
          "type" : "array",
          "xml" : {
            "name" : "messages",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/PresentationMessageInfo"
          }
        }
      }
    },
    "Value" : {
      "type" : "object",
      "properties" : {
        "objectType" : {
          "type" : "string"
        }
      }
    },
    "WsAttribute" : {
      "type" : "object",
      "properties" : {
        "displayValue" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "value" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "name" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "WsAttributeMetadata" : {
      "type" : "object",
      "properties" : {
        "description" : {
          "type" : "string"
        },
        "possible-result-type" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "display-name" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "name" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "WsLog" : {
      "type" : "object",
      "properties" : {
        "long-description" : {
          "type" : "string"
        },
        "short-description" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "user" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "time-stamp" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "severity" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "UNKNOWN", "DEBUG", "INFO", "WARNING", "ERROR" ]
        }
      }
    },
    "WsPolicy" : {
      "type" : "object",
      "properties" : {
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "relations" : {
          "$ref" : "#/definitions/Relations"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "priority" : {
          "type" : "string",
          "enum" : [ "VERY_LOW", "LOW", "MEDIUM", "HIGH", "VERY_HIGH" ]
        },
        "startup" : {
          "type" : "string",
          "enum" : [ "MANUAL", "AUTOMATIC" ]
        },
        "state" : {
          "type" : "string"
        },
        "policy-item" : {
          "type" : "array",
          "xml" : {
            "name" : "policy-items",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/WsPolicyItem"
          }
        },
        "parameter" : {
          "type" : "array",
          "xml" : {
            "name" : "parameters",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/parameter"
          }
        }
      }
    },
    "WsPolicyEventHandler" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "TRIGGER", "GAUGE" ]
        },
        "event-id" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "script" : {
          "type" : "string"
        },
        "workflow" : {
          "$ref" : "#/definitions/workflow"
        }
      }
    },
    "WsPolicyEventSource" : {
      "type" : "object"
    },
    "WsPolicyItem" : {
      "type" : "object",
      "properties" : {
        "eventSource" : {
          "$ref" : "#/definitions/WsPolicyEventSource"
        },
        "handlers" : {
          "type" : "array",
          "xml" : {
            "name" : "event-handlers",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/WsPolicyEventHandler"
          }
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        }
      }
    },
    "WsPolicyList" : {
      "type" : "object",
      "properties" : {
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "relations" : {
          "$ref" : "#/definitions/Relations"
        }
      }
    },
    "WsRelationMetadata" : {
      "type" : "object",
      "properties" : {
        "display-name" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "type" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "name" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "WsTypeMetadata" : {
      "type" : "object",
      "properties" : {
        "attribute" : {
          "type" : "array",
          "xml" : {
            "name" : "attributes",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/WsAttributeMetadata"
          }
        },
        "relation" : {
          "type" : "array",
          "xml" : {
            "name" : "relations",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/WsRelationMetadata"
          }
        },
        "icon-href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "name" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "WsWorkflowExecutionStackItem" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "displayName" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "relations" : {
          "$ref" : "#/definitions/Relations"
        }
      }
    },
    "about-info" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "type" : "string"
        },
        "build-number" : {
          "type" : "string"
        },
        "build-date" : {
          "type" : "string"
        },
        "api-version" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "about-info"
      }
    },
    "action" : {
      "type" : "object",
      "properties" : {
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "relations" : {
          "$ref" : "#/definitions/Relations"
        },
        "id" : {
          "type" : "string"
        },
        "parameter" : {
          "type" : "array",
          "xml" : {
            "name" : "input-parameters",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/parameter"
          }
        },
        "output-type" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "fqn" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "action"
      }
    },
    "actions" : {
      "type" : "object",
      "properties" : {
        "link" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "start" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "actions"
      }
    },
    "categories" : {
      "type" : "object",
      "properties" : {
        "link" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "start" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "categories"
      }
    },
    "category" : {
      "type" : "object",
      "properties" : {
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "relations" : {
          "$ref" : "#/definitions/Relations"
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "path" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "ResourceElementCategory", "ConfigurationElementCategory", "WorkflowCategory", "ScriptModuleCategory" ]
        }
      },
      "xml" : {
        "name" : "category"
      }
    },
    "category-context" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "ResourceElementCategory", "ConfigurationElementCategory", "WorkflowCategory", "ScriptModuleCategory" ]
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "category-context"
      }
    },
    "config-entries" : {
      "type" : "object",
      "properties" : {
        "config-entry" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/configEntry"
          }
        }
      },
      "xml" : {
        "name" : "config-entries"
      }
    },
    "configEntry" : {
      "type" : "object",
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "plugin" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "remote" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "title" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "data" : {
          "type" : "string"
        },
        "tooltip" : {
          "type" : "string"
        },
        "dependencies" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "configEntry"
      }
    },
    "configuration" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "relations" : {
          "$ref" : "#/definitions/Relations"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "attribute" : {
          "type" : "array",
          "xml" : {
            "name" : "attributes",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/parameter"
          }
        }
      },
      "xml" : {
        "name" : "configuration"
      }
    },
    "configurations" : {
      "type" : "object",
      "properties" : {
        "link" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "start" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "configurations"
      }
    },
    "descriptor" : {
      "type" : "object",
      "properties" : {
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "description" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "descriptor"
      }
    },
    "execution" : {
      "type" : "object",
      "properties" : {
        "steps" : {
          "type" : "array",
          "xml" : {
            "name" : "steps",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/StepInfo"
          }
        },
        "parameters" : {
          "type" : "array",
          "xml" : {
            "name" : "output-parameters",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/parameter"
          }
        },
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "relations" : {
          "$ref" : "#/definitions/Relations"
        },
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "name" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "description" : {
          "type" : "string"
        },
        "object-id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "valid" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "start-date" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "started-by" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "execution"
      }
    },
    "execution-context" : {
      "type" : "object",
      "properties" : {
        "parameter" : {
          "type" : "array",
          "xml" : {
            "name" : "parameters",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/parameter"
          }
        }
      },
      "xml" : {
        "name" : "execution-context"
      }
    },
    "executions" : {
      "type" : "object",
      "properties" : {
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "relations" : {
          "$ref" : "#/definitions/Relations"
        }
      },
      "xml" : {
        "name" : "executions"
      }
    },
    "health-status" : {
      "type" : "object",
      "properties" : {
        "childs" : {
          "type" : "array",
          "xml" : {
            "name" : "health-status-providers",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/health-status-provider"
          }
        },
        "state" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "UNKNOWN", "OK", "WARN", "ERROR" ]
        },
        "description" : {
          "type" : "string"
        },
        "time" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "health-status"
      }
    },
    "health-status-provider" : {
      "type" : "object",
      "properties" : {
        "state" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "UNKNOWN", "OK", "WARN", "ERROR" ]
        },
        "isCritical" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "health-status-provider"
      }
    },
    "interactions" : {
      "type" : "object",
      "properties" : {
        "link" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "start" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "interactions"
      }
    },
    "inventory-item" : {
      "type" : "object",
      "properties" : {
        "attribute" : {
          "type" : "array",
          "xml" : {
            "name" : "attributes",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/WsAttribute"
          }
        },
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "relations" : {
          "$ref" : "#/definitions/Relations"
        }
      },
      "xml" : {
        "name" : "inventory-item"
      }
    },
    "inventory-items" : {
      "type" : "object",
      "properties" : {
        "link" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "start" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "inventory-items"
      }
    },
    "logs" : {
      "type" : "object",
      "properties" : {
        "logs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/WsLog"
          }
        }
      },
      "xml" : {
        "name" : "logs"
      }
    },
    "module-metadata" : {
      "type" : "object",
      "properties" : {
        "namespace" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "type" : {
          "type" : "array",
          "xml" : {
            "name" : "types",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/WsTypeMetadata"
          }
        }
      },
      "xml" : {
        "name" : "module-metadata"
      }
    },
    "node-status" : {
      "type" : "object",
      "properties" : {
        "state" : {
          "type" : "string"
        },
        "health-status" : {
          "$ref" : "#/definitions/health-status"
        },
        "instance-id" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "node-status"
      }
    },
    "owners" : {
      "type" : "object",
      "properties" : {
        "link" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "start" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "owners"
      }
    },
    "package-details" : {
      "type" : "object",
      "properties" : {
        "workflows" : {
          "type" : "array",
          "xml" : {
            "name" : "workflows",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "actions" : {
          "type" : "array",
          "xml" : {
            "name" : "actions",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "configurations" : {
          "type" : "array",
          "xml" : {
            "name" : "configurations",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "resources" : {
          "type" : "array",
          "xml" : {
            "name" : "resources",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "name" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "description" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "package-details"
      }
    },
    "packages" : {
      "type" : "object",
      "properties" : {
        "link" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "start" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "packages"
      }
    },
    "parameter" : {
      "type" : "object",
      "properties" : {
        "description" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "value" : {
          "$ref" : "#/definitions/Value"
        },
        "type" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "name" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "scope" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "LOCAL", "TOKEN" ]
        },
        "updated" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        }
      },
      "xml" : {
        "name" : "parameter"
      }
    },
    "permission" : {
      "type" : "object",
      "properties" : {
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "relations" : {
          "$ref" : "#/definitions/Relations"
        },
        "principal" : {
          "type" : "string"
        },
        "rights" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "permission"
      }
    },
    "permissions" : {
      "type" : "object",
      "properties" : {
        "permissions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/permission"
          }
        }
      },
      "xml" : {
        "name" : "permissions"
      }
    },
    "plugins" : {
      "type" : "object",
      "properties" : {
        "plugin" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PluginBundleMetadata"
          }
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "plugins"
      }
    },
    "presentation" : {
      "type" : "object",
      "properties" : {
        "steps" : {
          "type" : "array",
          "xml" : {
            "name" : "steps",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/StepInfo"
          }
        },
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "relations" : {
          "$ref" : "#/definitions/Relations"
        },
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "name" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "description" : {
          "type" : "string"
        },
        "inputParameters" : {
          "type" : "array",
          "xml" : {
            "name" : "parameter",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/parameter"
          }
        },
        "outputParameters" : {
          "type" : "array",
          "xml" : {
            "name" : "parameter",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/parameter"
          }
        }
      },
      "xml" : {
        "name" : "presentation"
      }
    },
    "resource" : {
      "type" : "object",
      "properties" : {
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "relations" : {
          "$ref" : "#/definitions/Relations"
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "mime-type" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "resource"
      }
    },
    "resources" : {
      "type" : "object",
      "properties" : {
        "link" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "start" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "resources"
      }
    },
    "server-authentication" : {
      "type" : "object",
      "properties" : {
        "mode" : {
          "type" : "string"
        },
        "url" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "server-authentication"
      }
    },
    "server-object" : {
      "type" : "object",
      "properties" : {
        "sslCertificate" : {
          "$ref" : "#/definitions/CertificateInfo"
        },
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "relations" : {
          "$ref" : "#/definitions/Relations"
        }
      },
      "xml" : {
        "name" : "server-object"
      }
    },
    "service-descriptors" : {
      "type" : "object",
      "properties" : {
        "service" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/descriptor"
          }
        }
      },
      "xml" : {
        "name" : "service-descriptors"
      }
    },
    "state" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string",
          "enum" : [ "CANCELED", "COMPLETED", "RUNNING", "SUSPENDED", "WAITING", "STATE_WAITING_ON_SIGNAL", "FAILED", "INITIALIZING" ]
        }
      },
      "xml" : {
        "name" : "state"
      }
    },
    "state-context" : {
      "type" : "object",
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        }
      },
      "xml" : {
        "name" : "state-context"
      }
    },
    "supported-versions" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/version"
          }
        }
      },
      "xml" : {
        "name" : "supported-versions"
      }
    },
    "tag-instance" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "relations" : {
          "$ref" : "#/definitions/Relations"
        },
        "name" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        },
        "owner" : {
          "type" : "string"
        },
        "global" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "objectHref" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "tag-instance"
      }
    },
    "tag-instances" : {
      "type" : "object",
      "properties" : {
        "tag" : {
          "type" : "array",
          "xml" : {
            "name" : "tags",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/tag-instance"
          }
        }
      },
      "xml" : {
        "name" : "tag-instances"
      }
    },
    "tags" : {
      "type" : "object",
      "properties" : {
        "link" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "start" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "tags"
      }
    },
    "task" : {
      "type" : "object",
      "required" : [ "recurrence-start-date", "workflow" ],
      "properties" : {
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "relations" : {
          "$ref" : "#/definitions/Relations"
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "user" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "recurrence-pattern" : {
          "type" : "string"
        },
        "recurrence-cycle" : {
          "type" : "string",
          "enum" : [ "ONE_TIME", "EVERY_MINUTES", "EVERY_HOURS", "EVERY_DAYS", "EVERY_WEEKS", "EVERY_MONTHS" ]
        },
        "parameter" : {
          "type" : "array",
          "xml" : {
            "name" : "input-parameters",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/parameter"
          }
        },
        "state" : {
          "type" : "string",
          "enum" : [ "FINISHED", "CANCELED", "ERROR", "PENDING", "RUNNING", "SUSPENDED", "UNKNOWN" ]
        },
        "recurrence-start-date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "recurrence-end-date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "workflow" : {
          "$ref" : "#/definitions/workflow"
        },
        "start-mode" : {
          "type" : "string",
          "enum" : [ "NORMAL", "START_IN_THE_PAST" ]
        }
      },
      "xml" : {
        "name" : "task"
      }
    },
    "task-data" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string",
          "enum" : [ "FINISHED", "CANCELED", "ERROR", "PENDING", "RUNNING", "SUSPENDED", "UNKNOWN" ]
        },
        "recurrence-start-date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "recurrence-pattern" : {
          "type" : "string"
        },
        "recurrence-cycle" : {
          "type" : "string",
          "enum" : [ "ONE_TIME", "EVERY_MINUTES", "EVERY_HOURS", "EVERY_DAYS", "EVERY_WEEKS", "EVERY_MONTHS" ]
        },
        "recurrence-end-date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "start-mode" : {
          "type" : "string",
          "enum" : [ "NORMAL", "START_IN_THE_PAST" ]
        }
      },
      "xml" : {
        "name" : "task-data"
      }
    },
    "tasks" : {
      "type" : "object",
      "properties" : {
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "relations" : {
          "$ref" : "#/definitions/Relations"
        }
      },
      "xml" : {
        "name" : "tasks"
      }
    },
    "user" : {
      "type" : "object",
      "properties" : {
        "admin-rights" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "solution-user" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "solution-user-domain" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "user-group" : {
          "type" : "array",
          "xml" : {
            "name" : "member-groups",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/user-group"
          }
        }
      },
      "xml" : {
        "name" : "user"
      }
    },
    "user-group" : {
      "type" : "object",
      "properties" : {
        "display-name" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "cn" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "dn" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "info" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "sid" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "email" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "relations" : {
          "$ref" : "#/definitions/Relations"
        }
      },
      "xml" : {
        "name" : "user-group"
      }
    },
    "user-groups" : {
      "type" : "object",
      "properties" : {
        "groups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/user-group"
          }
        },
        "partial-result" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        }
      },
      "xml" : {
        "name" : "user-groups"
      }
    },
    "user-interaction" : {
      "type" : "object",
      "properties" : {
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "relations" : {
          "$ref" : "#/definitions/Relations"
        },
        "parameter" : {
          "type" : "array",
          "xml" : {
            "name" : "input-parameters",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/parameter"
          }
        },
        "assignee" : {
          "type" : "array",
          "xml" : {
            "name" : "assignees",
            "wrapped" : true
          },
          "items" : {
            "type" : "string"
          }
        },
        "name" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string",
          "enum" : [ "WAITING", "FINISHED" ]
        },
        "id" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "user-interaction"
      }
    },
    "version" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string"
        },
        "latest" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        }
      },
      "xml" : {
        "name" : "version"
      }
    },
    "workflow" : {
      "type" : "object",
      "properties" : {
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "relations" : {
          "$ref" : "#/definitions/Relations"
        },
        "id" : {
          "type" : "string"
        },
        "inputParameters" : {
          "type" : "array",
          "xml" : {
            "name" : "parameter",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/parameter"
          }
        },
        "outputParameters" : {
          "type" : "array",
          "xml" : {
            "name" : "parameter",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/parameter"
          }
        },
        "customized-icon" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "name" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "workflow"
      }
    },
    "workflow-execution" : {
      "type" : "object",
      "properties" : {
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "relations" : {
          "$ref" : "#/definitions/Relations"
        },
        "id" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string",
          "enum" : [ "CANCELED", "COMPLETED", "RUNNING", "SUSPENDED", "WAITING", "STATE_WAITING_ON_SIGNAL", "FAILED", "INITIALIZING" ]
        },
        "inputParameters" : {
          "type" : "array",
          "xml" : {
            "name" : "parameter",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/parameter"
          }
        },
        "outputParameters" : {
          "type" : "array",
          "xml" : {
            "name" : "parameter",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/parameter"
          }
        },
        "start-date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "end-date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "business-state" : {
          "type" : "string"
        },
        "started-by" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "content-exception" : {
          "type" : "string"
        },
        "current-item-display-name" : {
          "type" : "string"
        },
        "workflow-item" : {
          "type" : "array",
          "xml" : {
            "name" : "execution-stack",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/WsWorkflowExecutionStackItem"
          }
        }
      },
      "xml" : {
        "name" : "workflow-execution"
      }
    }
  }
}