{
  "swagger" : "2.0",
  "info" : {
    "description" : "# Content Management Service API Specification\n\n## What Is the Content Management Service?\n\nYou can use the content management service REST API to import and export content, such as\nblueprints, software components, and other artifacts, from vRealize Automation systems.\n\nvRealize Automation customers often experiment with system artifacts in their\ndevelopment or staging environments. When appropriate, users need to move the artifacts to\ntheir production environments or between different tenants.\n\nIncreasingly, customers who have adopted the DevOps philosophy have developers who are responsible not only for their application code but for every aspect of how their application is deployed\ninto machines and how the OS and application software is configured. Such development teams generally manage OS and application configurations as human readable text files, often using Domain Specific Language (DSL). Chef, Puppet, and Salt are the most widely used DSLs. Developers use DSLs to manage OS and application configurations almost exactly\nas they manage their own application code.\n\nFor example, they:\n\n* Check the configurations into source control\nsystems.\n* May have different branches corresponding to development, test, staging, and production deployments of their applications.\n* Diff these branches to see what's different between such deployments and\n send out diffs of config changes when they send review requests.\n\nThis approach solves the key problem of providing full visibility into what's different between\ndifferent deployments and helps understand why an application works in one deployment\nbut not in another.\n\nThe content exported from the content service can be treated as the \"as-code\" representation of\nthe content artifacts and can be managed using any popular source control systems.\n\n## Typical Use Cases\n\nDepending on the type of content that is being processed, an application architect, infrastructure architect,  software architect, tenant administrator, or XaaS architect can:\n\n  * Import or export data into an environment.\n  * Move content between tenants or environment; for example, moves data from a staging environment to a production environment.\n  * An application architect can import/export blueprint data.\n  * An infrastructure architect can import/export machine blueprints, application blueprints, and base blueprints.\n  * A software architect can import/export software, XaaS blueprints, and application blueprints.\n  * An XaaS architect can import/export XaaS blueprints.\n\nAn application developer uses the REST API to perform these activities from application code.\n      \n\n## Important Notes\n\n1. Rollback of data is not supported.\n2. We  highly recommend that you validate data before importing it.\n\nTwo APIs are provided to validate data:\n\n`POST /api/packages/validate` Validates the content in a zip package.\n\n`GET /api/packages/{id}/validate` Performs dry run validation of the contents of a package prior to exporting it.\n\n\n## Key Concepts\n\n### Content\n\nContent is an artifact or entity or information that provides value for an\nend-user/audience in specific context. Currently vRealize Automation supports artifacts like composite blueprints,\nsoftware components, XaaS blueprints, property groups, and property definitions. Individual\ncontent artifacts are represented in YAML (YAML Ain't Markup Language) format.\n\n### Content Provider\n\nThe service/provider that wants to work with the content\nmanagement service and provide content to it, i.e, manage its content.\n\n### Content Type\n\nA type is that contains metadata about the content provider and\ncontent itself. such as type information, service type ID, and so on. Usually, this is provided by the content provider. vRealize Automation has built-in content types ready to go for the content artifacts mentioned above.\n\n### Domain Specific Language\n\nA domain specific language (DSL) is a special set of words related to a particular task. Some DevOps tools provide DSLs so that engineers can script automation actions using terminology that is directly related to the task at hand. \n\n## Additional Information\n\nFor more detailed information on using the the API, refer to the *vRA Programming Guide*.",
    "version" : "7.5.0-SNAPSHOT",
    "title" : "Content Service API"
  },
  "tags" : [ {
    "name" : "consumer-content"
  }, {
    "name" : "consumer-content-type"
  }, {
    "name" : "consumer-package"
  }, {
    "name" : "provider-content"
  }, {
    "name" : "provider-content-type"
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/api/contents" : {
      "get" : {
        "tags" : [ "consumer-content" ],
        "summary" : "Get content list",
        "description" : "Get all content with specified paging, sorting and filtering parameters.",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageContent"
            }
          }
        }
      }
    },
    "/api/contents/{contentTypeId}/{contentId}/data" : {
      "post" : {
        "tags" : [ "consumer-content" ],
        "summary" : "Upload content data",
        "description" : "This API is generally used to upload the raw data directly and not deal with any of its dependencies.",
        "parameters" : [ {
          "name" : "contentTypeId",
          "in" : "path",
          "description" : "The contentTypeId corresponding to a content provider",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "contentId",
          "in" : "path",
          "description" : "The contentId for which data is being uploaded",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Content-Type",
          "in" : "header",
          "description" : "The mimeType identifying format of content being uploaded",
          "required" : true,
          "type" : "string",
          "default" : ""
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Raw content to be uploaded.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "byte"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Upload raw data successful",
            "schema" : {
              "$ref" : "#/definitions/OperationResult"
            }
          }
        }
      }
    },
    "/api/contents/{id}" : {
      "get" : {
        "tags" : [ "consumer-content" ],
        "summary" : "Get content",
        "description" : "The content here only contains high level information about the underlying artifact like - name, description, type, etc.\n\nHaving permission to content's metadata doesn't mean that the user will have access its raw content since it is governed by specific permissions defined by the content provider.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The UUID of the content",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Content"
            }
          }
        }
      }
    },
    "/api/contents/{id}/data" : {
      "get" : {
        "tags" : [ "consumer-content" ],
        "summary" : "Get content data",
        "description" : "This API is generally used to download the raw data directly associated with the content and will not download any dependencies along with it.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The UUID of the content",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "secureValueFormat",
          "in" : "query",
          "description" : "The format in which secure values should be sent",
          "required" : false,
          "type" : "string",
          "default" : "BLANKOUT",
          "enum" : [ "ENCRYPT", "DECRYPT", "BLANKOUT" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "byte"
              }
            }
          }
        }
      }
    },
    "/api/packages" : {
      "get" : {
        "tags" : [ "consumer-package" ],
        "summary" : "List packages",
        "description" : "This API will list all packages in the system with specified paging, sorting and filtering parameters.",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PagePackage"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "consumer-package" ],
        "summary" : "Import package",
        "description" : "Import content of a zip package. The zip file will be validated and import will be performed based on the 'dependencies' specified in the metadata file. The result of the import operation will be captured in OperationInfo object.\nAt this point, we don't support any form of rollback strategies. A failed import may potentially leave the system in an inconsistent state. Hence, its highly recommend to run a precheck/dry-run before the import to validate the package.\nSee HTTP POST /api/packages/validate for more details. This will help catch most of the errors upfront.\nAlthough the API looks similar to create package API but differs in the 'Content-Type' header where it expects 'multipart/form-data'.",
        "parameters" : [ {
          "name" : "file",
          "in" : "formData",
          "description" : "The file to be imported",
          "required" : true,
          "type" : "file"
        }, {
          "name" : "resolutionMode",
          "in" : "query",
          "description" : "The resolution mode to be used when the same entity is found to exist in the system",
          "required" : false,
          "type" : "string",
          "default" : "OVERWRITE",
          "enum" : [ "SKIP", "OVERWRITE" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Upload raw data successful",
            "schema" : {
              "$ref" : "#/definitions/OperationInfo"
            }
          }
        }
      }
    },
    "/api/packages/validate" : {
      "post" : {
        "tags" : [ "consumer-package" ],
        "summary" : "Validate package import",
        "description" : "Validate content of a zip package. The zip file will be validated for all of its content, dependencies, etc. However, no import will be performed in this operation. It is highly recommended to use this operation before performing an import. See the import API for more details.",
        "parameters" : [ {
          "name" : "file",
          "in" : "formData",
          "description" : "The file to be validated",
          "required" : true,
          "type" : "file"
        }, {
          "name" : "resolutionMode",
          "in" : "query",
          "description" : "The resolution mode to be used when the same entity is found to exist in the system",
          "required" : false,
          "type" : "string",
          "default" : "OVERWRITE",
          "enum" : [ "SKIP", "OVERWRITE" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Upload raw data successful",
            "schema" : {
              "$ref" : "#/definitions/OperationInfo"
            }
          }
        }
      }
    },
    "/api/packages/{id}" : {
      "get" : {
        "tags" : [ "consumer-package" ],
        "summary" : "Export package",
        "description" : "Exports the contents of a Package compressed in a ZIP file. The content type of the response is \"application/octet-stream\".The exported zip contains the entities that the user has access to. Based on the requested package for export, the content graph is built. However, if the user does not have access to some of the entities then they are skipped from the export. It is recommended to use the export dry run to get details about the entities that were skipped from the export.\nAlthough the API looks similar to retrieve package API but differs in the 'Accept' header where it expects 'application/octet-stream' or 'application/zip'.",
        "produces" : [ "application/octet-stream", "application/zip" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The UUID of the package",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "secureValueFormat",
          "in" : "query",
          "description" : "The format in which secure values should be sent",
          "required" : false,
          "type" : "string",
          "default" : "BLANKOUT",
          "enum" : [ "ENCRYPT", "DECRYPT", "BLANKOUT" ]
        } ],
        "responses" : {
          "201" : {
            "description" : "Package export successful",
            "schema" : {
              "type" : "file"
            }
          }
        }
      }
    },
    "/api/packages/{id}/contents" : {
      "get" : {
        "tags" : [ "consumer-package" ],
        "summary" : "List package contents",
        "description" : "API to list content items for a given package id. This API can be used to see information of content associated with the given package.\n\nNote: This will not list content that is deleted but still referenced by the package.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The UUID of the package",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageContent"
            }
          }
        }
      }
    },
    "/api/packages/{id}/validate" : {
      "get" : {
        "tags" : [ "consumer-package" ],
        "summary" : "Validate package export",
        "description" : "Performs a dry run/validation operation for export. It gathers the metadata about all the entities in the content graph that will be exported as part of the package export. In case of any permission exceptions where certain entities are skipped from the export then the user is alerted about the missed entities.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The UUID of the package",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/OperationInfo"
            }
          }
        }
      }
    },
    "/api/packages/{pkgId}" : {
      "get" : {
        "tags" : [ "consumer-package" ],
        "summary" : "Get package",
        "description" : "API to retrieve package a consumer is permitted to see",
        "parameters" : [ {
          "name" : "pkgId",
          "in" : "path",
          "description" : "The UUID of the package",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Package"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "consumer-package" ],
        "summary" : "Update package",
        "description" : "This will update a package.",
        "parameters" : [ {
          "name" : "pkgId",
          "in" : "path",
          "description" : "The UUID of the package",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The package details",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Package"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully updated package"
          }
        }
      },
      "delete" : {
        "tags" : [ "consumer-package" ],
        "summary" : "Delete package",
        "description" : "This will delete a package.",
        "parameters" : [ {
          "name" : "pkgId",
          "in" : "path",
          "description" : "The UUID of the package",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully deleted package"
          }
        }
      }
    },
    "/api/provider/contents" : {
      "post" : {
        "tags" : [ "provider-content" ],
        "summary" : "Save provider content",
        "description" : "Saves the provider content.",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The provider content",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ProviderContent"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Content created successfully",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/provider/contents/{contentTypeId}/{id}" : {
      "get" : {
        "tags" : [ "provider-content" ],
        "summary" : "Get provider content",
        "description" : "Retrieves the provider content.",
        "parameters" : [ {
          "name" : "contentTypeId",
          "in" : "path",
          "description" : "The content type id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The human readable content id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ProviderContent"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "provider-content" ],
        "summary" : "Delete provider content",
        "description" : "Deletes the provider content.",
        "parameters" : [ {
          "name" : "contentTypeId",
          "in" : "path",
          "description" : "The content type id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The human readable content id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Content deleted successfully"
          }
        }
      }
    },
    "/api/provider/contenttypes" : {
      "get" : {
        "tags" : [ "consumer-content-type" ],
        "summary" : "Get content type",
        "description" : "Retrieves the content type.",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageContentType"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "provider-content-type" ],
        "summary" : "Save content type",
        "description" : "Creates or updates content type.",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The content type to be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContentType"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Content type created successfully",
            "schema" : {
              "$ref" : "#/definitions/ContentType"
            }
          }
        }
      }
    },
    "/api/provider/contenttypes/{id}" : {
      "get" : {
        "tags" : [ "consumer-content-type" ],
        "summary" : "Get content type",
        "description" : "Retrieves the content type.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of content type",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ContentType"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "provider-content-type" ],
        "summary" : "Save content type",
        "description" : "Creates or updates content type.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of content type",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The content type to be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContentType"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Content type created successfully"
          },
          "204" : {
            "description" : "Content type updated successfully",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "provider-content-type" ],
        "summary" : "Delete content type",
        "description" : "Deletes content type for the given id",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of content type",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : "Content type deleted successfully"
          }
        }
      }
    }
  },
  "definitions" : {
    "Content" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "contentId" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2000
        },
        "contentTypeId" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "mimeType" : {
          "type" : "string"
        },
        "tenantId" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "subtenantId" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "dependencies" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "format" : "uuid"
          }
        },
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "ContentData" : {
      "type" : "object",
      "required" : [ "data", "mimeType" ],
      "properties" : {
        "data" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "byte"
          }
        },
        "mimeType" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        }
      }
    },
    "ContentDependency" : {
      "type" : "object",
      "required" : [ "entityReference" ],
      "properties" : {
        "entityReference" : {
          "$ref" : "#/definitions/entityRef"
        },
        "isOptional" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        }
      }
    },
    "ContentType" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 255
        },
        "name" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 2000
        },
        "classId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 50
        },
        "serviceTypeId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 255
        }
      }
    },
    "EntityReference" : {
      "allOf" : [ {
        "$ref" : "#/definitions/entityRef"
      }, {
        "type" : "object",
        "description" : "Represents a reference to an entity defined somewhere in the suite.",
        "xml" : {
          "name" : "entityRef"
        }
      } ]
    },
    "OperationError" : {
      "type" : "object",
      "properties" : {
        "errorCode" : {
          "type" : "integer",
          "format" : "int32"
        },
        "errorMessage" : {
          "type" : "string"
        }
      }
    },
    "OperationInfo" : {
      "type" : "object",
      "required" : [ "operationType" ],
      "properties" : {
        "operationType" : {
          "type" : "string",
          "enum" : [ "IMPORT", "EXPORT", "IMPORT_DRY_RUN", "EXPORT_DRY_RUN" ]
        },
        "operationStatus" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILED", "WARNING" ]
        },
        "operationResults" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OperationResult"
          }
        }
      }
    },
    "OperationResult" : {
      "type" : "object",
      "properties" : {
        "contentId" : {
          "type" : "string"
        },
        "contentName" : {
          "type" : "string"
        },
        "contentTypeId" : {
          "type" : "string"
        },
        "operationStatus" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILED", "WARNING" ]
        },
        "messages" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "operationErrors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OperationError"
          }
        }
      }
    },
    "Package" : {
      "type" : "object",
      "required" : [ "contents", "name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2000
        },
        "tenantId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 1,
          "maxLength" : 255
        },
        "subtenantId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 1,
          "maxLength" : 255
        },
        "contents" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "format" : "uuid"
          }
        },
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "PageContent" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Content"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageContentType" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ContentType"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PagePackage" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Package"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ProviderContent" : {
      "type" : "object",
      "required" : [ "contentId", "contentTypeId", "name", "serviceId", "storageType", "tenantId" ],
      "properties" : {
        "contentId" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2000
        },
        "contentTypeId" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1024
        },
        "tenantId" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "subTenantId" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "dependencies" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/ContentDependency"
          }
        },
        "contentData" : {
          "$ref" : "#/definitions/ContentData"
        },
        "storageType" : {
          "type" : "string",
          "enum" : [ "INTERNAL", "ENTITY_REFERENCE" ]
        },
        "serviceId" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        }
      }
    },
    "Sort" : {
      "type" : "object"
    },
    "entityRef" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "classId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "description" : "The identifier of the type or category to which the referenced entity belongs."
        },
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "description" : "The unique identifier of the referenced entity, encoded as a string"
        },
        "componentId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "description" : "The durable identifier of a component registered in the suite component registry that owns and manages the referenced entity. This can be omitted if this component can be derived from the context within which this entity reference occurs. It must be specified, if no such context exists or if the component differs from that defined by the context."
        },
        "label" : {
          "type" : "string"
        }
      },
      "description" : "Represents a reference to an entity defined somewhere in the suite.",
      "xml" : {
        "name" : "entityRef"
      }
    },
    "entityRefEx" : {
      "allOf" : [ {
        "$ref" : "#/definitions/entityRef"
      }, {
        "type" : "object",
        "properties" : {
          "href" : {
            "type" : "string",
            "description" : "the Href"
          }
        },
        "description" : "Represents a reference to an entity by uri",
        "xml" : {
          "name" : "entityRefEx"
        }
      } ]
    }
  }
}