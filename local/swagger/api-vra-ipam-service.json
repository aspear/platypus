{
  "swagger" : "2.0",
  "info" : {
    "description" : "# IPAM Service API Specification\n\n## What Is the IPAM Service?\n\nThe IP address management (IPAM) service  provides tenanted IPAM operations (static IP management) through registered IPAM providers. It allows retrieval of available IP address ranges for a single IPAM provider.  Once the address ranges have been imported into vRA, administrators can assign them to network profiles that are used for provisioning of VMs and machines.\n\nProvisioned VMs and machines then obtain their IP addresses, DNS configuration, and gateway information from the IPAM solution provider.\n\n## Typical Use Cases\n\nA system administrator, IaaS administrator, or fabric administrator creates a network profile.  During profile configuration, the administrator imports IP address ranges into vRA from a registered IPAM service provider.\n\n\n## Key Concepts\n\n### IPAM Solution Provider\n\nA service provider for which an IPAM endpoint is configured.\n\n### External Network Profile\n\nNetwork profile information identifies the external network properties and specifies settings for an existing network. An external network profile is a requirement of NAT and routed network profiles.\n\n### IP Address Range\n\nA range of static IP addresses for use in provisioning a network. An external network profile must have at least one static IP range for use with routed and NAT network profiles.\n\n## How the IPAM Service Works\n\nA user or application developer specifies an IPAM endpoint that enables communication with a IPAM solution provider application.\n\nAfter the endpoint is defined, the external IPAM service is accessible from the vRA user interface and administrators can choose IP address ranges from the external IPAM provider.\n\nThe APIs provided by the service allow users to:\n\n* Retrieve the list of available IP ranges for a single IPAM provider\n* Allocate a subrange of IPs\n* Deallocate a subrange of IPs\n\n## Additional Information\n\nFor more detailed information on using the the API, refer to the *vRA Programming Guide*.\n",
    "version" : "7.5.1-SNAPSHOT",
    "title" : "IPAM Service API"
  },
  "basePath" : "/ipam-service/",
  "tags" : [ {
    "name" : "data-service"
  }, {
    "name" : "ip-ranges"
  }, {
    "name" : "requests"
  }, {
    "name" : "schema"
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/api/o11n-gateway/workflow/callback" : {
      "post" : {
        "tags" : [ "requests" ],
        "summary" : "Method to be called by o11n gateway service to indicate the workflow completed",
        "description" : "Callback called by the provider o11n-gateway-service",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Result of the requested workflow",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/routineRunRunResult"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Indicate completion of a request"
          },
          "403" : {
            "description" : "Unauthorized user, expecting a solution user"
          }
        }
      }
    },
    "/api/providers/{providerEndpointId}/address-spaces" : {
      "get" : {
        "tags" : [ "ip-ranges" ],
        "summary" : "Returns a collection of address spaces with specified paging, sorting and filtering parameters, sorting and filtering parameters.",
        "description" : "",
        "operationId" : "listAddressSpaces",
        "parameters" : [ {
          "name" : "providerEndpointId",
          "in" : "path",
          "description" : "The provider endpoint id, registered with the endpoint-service.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "additionalFilter",
          "in" : "query",
          "description" : "Additional filter in the provider specific format. Note: filter string needs to be URL encoded.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Paging and sorting criteria",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PageAndSortRequest"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success - return the collection of AddressSpaces for a given provider endpoint id.",
            "schema" : {
              "$ref" : "#/definitions/pagedEntities"
            }
          },
          "403" : {
            "description" : "Forbidden."
          },
          "404" : {
            "description" : "Resource not found."
          }
        }
      }
    },
    "/api/providers/{providerEndpointId}/address-spaces/searchExternalIds" : {
      "post" : {
        "tags" : [ "ip-ranges" ],
        "summary" : "Returns a collection of address spaces with specified ids.",
        "description" : "",
        "operationId" : "getAddressSpacesWithExternalIds",
        "parameters" : [ {
          "name" : "providerEndpointId",
          "in" : "path",
          "description" : "The provider endpoint id, registered with the endpoint-service.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Collection of address space IDs",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success - return the list of AddressSpaces for a given provider endpoint id.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AddressSpace"
              }
            }
          },
          "403" : {
            "description" : "Forbidden."
          },
          "404" : {
            "description" : "Resource not found."
          }
        }
      }
    },
    "/api/providers/{providerEndpointId}/ip-ranges" : {
      "get" : {
        "tags" : [ "ip-ranges" ],
        "summary" : "Returns a collection of ip ranges with specified paging, sorting and filtering parameters.",
        "description" : "",
        "operationId" : "listIPRanges",
        "parameters" : [ {
          "name" : "providerEndpointId",
          "in" : "path",
          "description" : "The provider endpoint id, registered with the endpoint-service.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "additionalFilter",
          "in" : "query",
          "description" : "Additional filter in the provider specific format. Note: filter string needs to be URL encoded.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Paging and sorting criteria",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PageAndSortRequest"
          }
        }, {
          "name" : "isIPBlock",
          "in" : "query",
          "description" : "Boolean filter whether or not to return IP Blocks only.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success - return the list of IPRanges for a given provider endpoint id.",
            "schema" : {
              "$ref" : "#/definitions/pagedEntities"
            }
          },
          "403" : {
            "description" : "Forbidden."
          },
          "404" : {
            "description" : "Resource not found."
          }
        }
      }
    },
    "/api/providers/{providerEndpointId}/ip-ranges/searchExternalIds" : {
      "post" : {
        "tags" : [ "ip-ranges" ],
        "summary" : "Returns a collection of ip ranges with specified ids.",
        "description" : "",
        "operationId" : "getIPRangesWithExternalIds",
        "parameters" : [ {
          "name" : "providerEndpointId",
          "in" : "path",
          "description" : "The provider endpoint id, registered with the endpoint-service.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Collection of range IDs",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "isIPBlock",
          "in" : "query",
          "description" : "Boolean filter whether or not to return IP Blocks only.",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success - return the collection of IPRanges for a given provider endpoint id.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/IPRange"
              }
            }
          },
          "403" : {
            "description" : "Forbidden."
          },
          "404" : {
            "description" : "Resource not found."
          }
        }
      }
    },
    "/api/requests" : {
      "post" : {
        "tags" : [ "requests" ],
        "summary" : "New request for ip allocation/deallocation",
        "description" : "",
        "operationId" : "createRequest",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "allocation or deallocation request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ipamRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "allocation/deallocation request created",
            "schema" : {
              "$ref" : "#/definitions/ResponseEntity"
            }
          },
          "403" : {
            "description" : "Forbidden."
          }
        }
      }
    },
    "/api/requests/{requestId}" : {
      "get" : {
        "tags" : [ "requests" ],
        "summary" : "get request completion details",
        "description" : "",
        "operationId" : "requestCompletionDetails",
        "parameters" : [ {
          "name" : "requestId",
          "in" : "path",
          "description" : "id of the request to get details about",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request details retrieved.",
            "schema" : {
              "$ref" : "#/definitions/ipamRequestStatus"
            }
          },
          "403" : {
            "description" : "Forbidden."
          },
          "404" : {
            "description" : "Request not found or invalid request id."
          }
        }
      }
    }
  },
  "definitions" : {
    "AddressSpace" : {
      "type" : "object",
      "required" : [ "extensionData", "externalId", "providerEndpointId" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 255
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2000
        },
        "extensionData" : {
          "$ref" : "#/definitions/literalMap"
        },
        "externalId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 255
        },
        "providerEndpointId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 40
        }
      }
    },
    "BoolCommonExpression" : {
      "type" : "object"
    },
    "CommonExpression" : {
      "type" : "object"
    },
    "DNSInfo" : {
      "type" : "object",
      "required" : [ "extensionData" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 255
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2000
        },
        "extensionData" : {
          "$ref" : "#/definitions/literalMap"
        },
        "dnsSuffix" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 255
        },
        "primaryDNS" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 255
        },
        "secondaryDNS" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 255
        },
        "dnsSearchSuffixes" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 255
        },
        "preferredWINS" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 255
        },
        "alternateWINS" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 255
        }
      }
    },
    "EntitySimpleProperty" : {
      "type" : "object",
      "properties" : {
        "propertyName" : {
          "type" : "string"
        }
      }
    },
    "IPAMObject" : {
      "type" : "object",
      "required" : [ "extensionData" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 255
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2000
        },
        "extensionData" : {
          "$ref" : "#/definitions/literalMap"
        }
      }
    },
    "IPAllocationRequest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/IPRangeOperation"
      }, {
        "type" : "object",
        "properties" : {
          "rangeIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "allocationStartAddress" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "minLength" : 0,
            "maxLength" : 255
          },
          "allocationSize" : {
            "type" : "integer",
            "format" : "int64",
            "xml" : {
              "attribute" : true
            },
            "minimum" : 0.0,
            "maximum" : 255.0
          },
          "nicIndex" : {
            "type" : "integer",
            "format" : "int32",
            "xml" : {
              "attribute" : true
            }
          },
          "primary" : {
            "type" : "boolean",
            "xml" : {
              "attribute" : true
            },
            "default" : false
          },
          "blueprintRequestId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "minLength" : 0,
            "maxLength" : 255
          }
        }
      } ]
    },
    "IPAllocationResult" : {
      "allOf" : [ {
        "$ref" : "#/definitions/IPRangeOperation"
      }, {
        "type" : "object",
        "properties" : {
          "IPAllocationRequestId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "rangeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "minLength" : 0,
            "maxLength" : 255
          },
          "allocatedAddresses" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "dnsInfo" : {
            "$ref" : "#/definitions/DNSInfo"
          },
          "ipVersion" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "IPv4", "IPv6" ]
          },
          "gateway" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "minLength" : 0,
            "maxLength" : 255
          },
          "subnetPrefixLength" : {
            "type" : "integer",
            "format" : "int32",
            "xml" : {
              "attribute" : true
            },
            "minimum" : 0.0,
            "maximum" : 255.0
          }
        }
      } ]
    },
    "IPRange" : {
      "type" : "object",
      "required" : [ "extensionData", "providerEndpointId" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 255
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2000
        },
        "extensionData" : {
          "$ref" : "#/definitions/literalMap"
        },
        "providerEndpointId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 255
        },
        "providerEndpointURI" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 2083
        },
        "start" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 255
        },
        "end" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 255
        },
        "ipVersion" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "IPv4", "IPv6" ]
        },
        "gateway" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 255
        },
        "subnetPrefixLength" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          },
          "minimum" : 0.0,
          "maximum" : 255.0
        },
        "externalId" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "dnsInfo" : {
          "$ref" : "#/definitions/DNSInfo"
        },
        "addressSpaceId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 255
        }
      }
    },
    "IPRangeCreateResult" : {
      "allOf" : [ {
        "$ref" : "#/definitions/IPRangeOperation"
      }, {
        "type" : "object",
        "required" : [ "ipRangeCreateRequestId" ],
        "properties" : {
          "ipRange" : {
            "$ref" : "#/definitions/IPRange"
          },
          "ipRangeCreateRequestId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        }
      } ]
    },
    "IPRangeDeleteRequest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/IPRangeOperation"
      }, {
        "type" : "object",
        "required" : [ "externalIpRangeId", "ipRangeId" ],
        "properties" : {
          "ipRangeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "minLength" : 0,
            "maxLength" : 255
          },
          "externalIpRangeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "minLength" : 0,
            "maxLength" : 255
          }
        }
      } ]
    },
    "IPRangeDeleteResult" : {
      "allOf" : [ {
        "$ref" : "#/definitions/IPRangeOperation"
      }, {
        "type" : "object",
        "required" : [ "ipRangeDeleteRequestId" ],
        "properties" : {
          "ipRangeDeleteRequestId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "status" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "COMPLETED", "FAILED", "IN_PROGRESS", "UNKNOWN" ]
          },
          "errorCode" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "minLength" : 0,
            "maxLength" : 255
          },
          "errorMessage" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "minLength" : 0,
            "maxLength" : 255
          }
        }
      } ]
    },
    "IPRangeOperation" : {
      "type" : "object",
      "required" : [ "extensionData" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 255
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2000
        },
        "extensionData" : {
          "$ref" : "#/definitions/literalMap"
        }
      }
    },
    "IPRangeOperationRequest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/IPAMObject"
      }, {
        "type" : "object",
        "required" : [ "networkProfileId" ],
        "properties" : {
          "networkProfileId" : {
            "type" : "string",
            "format" : "uuid",
            "xml" : {
              "attribute" : true
            }
          },
          "ipRangeOperations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/IPRangeOperation"
            }
          },
          "resourceInfo" : {
            "$ref" : "#/definitions/ResourceInfo"
          }
        }
      } ]
    },
    "IPRangeOperationResult" : {
      "allOf" : [ {
        "$ref" : "#/definitions/IPAMObject"
      }, {
        "type" : "object",
        "required" : [ "networkProfileId" ],
        "properties" : {
          "networkProfileId" : {
            "type" : "string",
            "format" : "uuid",
            "xml" : {
              "attribute" : true
            }
          },
          "ipRangeOperations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/IPRangeOperation"
            }
          }
        }
      } ]
    },
    "IPRangesCreateRequest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/IPRangeOperation"
      }, {
        "type" : "object",
        "required" : [ "networkProfileId" ],
        "properties" : {
          "networkProfileId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "minLength" : 0,
            "maxLength" : 255
          },
          "blueprintRequestId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "minLength" : 0,
            "maxLength" : 255
          }
        }
      } ]
    },
    "IPReleaseRequest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/IPRangeOperation"
      }, {
        "type" : "object",
        "required" : [ "address", "rangeId" ],
        "properties" : {
          "rangeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "minLength" : 0,
            "maxLength" : 255
          },
          "address" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "minLength" : 0,
            "maxLength" : 255
          },
          "nicIndex" : {
            "type" : "integer",
            "format" : "int32",
            "xml" : {
              "attribute" : true
            }
          }
        }
      } ]
    },
    "IPReleaseResult" : {
      "allOf" : [ {
        "$ref" : "#/definitions/IPRangeOperation"
      }, {
        "type" : "object",
        "properties" : {
          "IPReleaseRequestId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "status" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "COMPLETED", "FAILED", "IN_PROGRESS", "UNKNOWN" ]
          },
          "errorCode" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "minLength" : 0,
            "maxLength" : 255
          },
          "errorMessage" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "minLength" : 0,
            "maxLength" : 255
          }
        }
      } ]
    },
    "Link" : {
      "type" : "object",
      "properties" : {
        "rel" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "LiteralMapEntry" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "value" : {
          "$ref" : "#/definitions/literal"
        }
      }
    },
    "MonetaryValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "currencyCode" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The ISO 4217 code used to identify the currency (if any) associated with this value."
          }
        },
        "description" : "Base type for representing monetary values, encapsulating both some kind of quantity and a currency.",
        "xml" : {
          "name" : "literal"
        }
      } ]
    },
    "OdataQueryInfo" : {
      "type" : "object",
      "properties" : {
        "inlineCount" : {
          "type" : "string",
          "enum" : [ "NONE", "ALLPAGES" ]
        },
        "top" : {
          "type" : "integer",
          "format" : "int32"
        },
        "skip" : {
          "type" : "integer",
          "format" : "int32"
        },
        "filter" : {
          "$ref" : "#/definitions/BoolCommonExpression"
        },
        "orderBy" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OrderByExpression"
          }
        },
        "skipToken" : {
          "type" : "string"
        },
        "customOptions" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "expand" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EntitySimpleProperty"
          }
        },
        "select" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EntitySimpleProperty"
          }
        },
        "rawFilter" : {
          "type" : "string"
        },
        "rawOrderBy" : {
          "type" : "string"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        }
      }
    },
    "OrderByExpression" : {
      "type" : "object",
      "properties" : {
        "expression" : {
          "$ref" : "#/definitions/CommonExpression"
        },
        "direction" : {
          "type" : "string",
          "enum" : [ "ASCENDING", "DESCENDING" ]
        }
      }
    },
    "PageAndSortRequest" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "queryInfo" : {
          "$ref" : "#/definitions/OdataQueryInfo"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int32"
        },
        "pageNumber" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageMetadata" : {
      "type" : "object",
      "properties" : {
        "size" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          },
          "readOnly" : true
        },
        "totalElements" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          },
          "readOnly" : true
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          },
          "readOnly" : true
        },
        "number" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          },
          "readOnly" : true
        },
        "offset" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          },
          "readOnly" : true
        }
      }
    },
    "ResourceInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/IPAMObject"
      }, {
        "type" : "object"
      } ]
    },
    "ResponseEntity" : {
      "type" : "object",
      "properties" : {
        "headers" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "body" : {
          "type" : "object"
        },
        "statusCode" : {
          "type" : "string",
          "enum" : [ "CONTINUE", "SWITCHING_PROTOCOLS", "PROCESSING", "CHECKPOINT", "OK", "CREATED", "ACCEPTED", "NON_AUTHORITATIVE_INFORMATION", "NO_CONTENT", "RESET_CONTENT", "PARTIAL_CONTENT", "MULTI_STATUS", "ALREADY_REPORTED", "IM_USED", "MULTIPLE_CHOICES", "MOVED_PERMANENTLY", "FOUND", "MOVED_TEMPORARILY", "SEE_OTHER", "NOT_MODIFIED", "USE_PROXY", "TEMPORARY_REDIRECT", "PERMANENT_REDIRECT", "BAD_REQUEST", "UNAUTHORIZED", "PAYMENT_REQUIRED", "FORBIDDEN", "NOT_FOUND", "METHOD_NOT_ALLOWED", "NOT_ACCEPTABLE", "PROXY_AUTHENTICATION_REQUIRED", "REQUEST_TIMEOUT", "CONFLICT", "GONE", "LENGTH_REQUIRED", "PRECONDITION_FAILED", "PAYLOAD_TOO_LARGE", "REQUEST_ENTITY_TOO_LARGE", "URI_TOO_LONG", "REQUEST_URI_TOO_LONG", "UNSUPPORTED_MEDIA_TYPE", "REQUESTED_RANGE_NOT_SATISFIABLE", "EXPECTATION_FAILED", "I_AM_A_TEAPOT", "INSUFFICIENT_SPACE_ON_RESOURCE", "METHOD_FAILURE", "DESTINATION_LOCKED", "UNPROCESSABLE_ENTITY", "LOCKED", "FAILED_DEPENDENCY", "UPGRADE_REQUIRED", "PRECONDITION_REQUIRED", "TOO_MANY_REQUESTS", "REQUEST_HEADER_FIELDS_TOO_LARGE", "INTERNAL_SERVER_ERROR", "NOT_IMPLEMENTED", "BAD_GATEWAY", "SERVICE_UNAVAILABLE", "GATEWAY_TIMEOUT", "HTTP_VERSION_NOT_SUPPORTED", "VARIANT_ALSO_NEGOTIATES", "INSUFFICIENT_STORAGE", "LOOP_DETECTED", "BANDWIDTH_LIMIT_EXCEEDED", "NOT_EXTENDED", "NETWORK_AUTHENTICATION_REQUIRED" ]
        }
      }
    },
    "Sort" : {
      "type" : "object"
    },
    "TimeSpan" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "description" : "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days.",
        "xml" : {
          "name" : "timeSpan"
        }
      } ]
    },
    "booleanLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "boolean",
            "description" : "The boolean value.",
            "default" : false
          }
        },
        "description" : "Wraps a boolean value.",
        "xml" : {
          "name" : "booleanLiteral"
        }
      } ]
    },
    "complexLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "componentTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's component type."
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's component."
          },
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's class."
          },
          "typeFilter" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The type filter for this literal."
          },
          "values" : {
            "description" : "Map of values, keyed by the field ids of some complex type.",
            "$ref" : "#/definitions/literalMap"
          }
        },
        "description" : "A complex value composed of multiple values keyed by the field ids of some complex type.",
        "xml" : {
          "name" : "complexLiteral"
        }
      } ]
    },
    "dateTimeLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date."
          }
        },
        "description" : "Wraps a Date & Time value. This is a wrapper for the Java {@link Date} class.",
        "xml" : {
          "name" : "dateTimeLiteral"
        }
      } ]
    },
    "decimalLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "number",
            "format" : "double",
            "description" : "The decimal value."
          }
        },
        "description" : "Wraps a decimal value.",
        "xml" : {
          "name" : "decimalLiteral"
        }
      } ]
    },
    "entityRef" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier of the type or category to which the referenced entity belongs."
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The unique identifier of the referenced entity, encoded as a string"
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The durable identifier of a component registered in the suite component registry that owns and manages the referenced entity. This can be omitted if this component can be derived from the context within which this entity reference occurs. It must be specified, if no such context exists or if the component differs from that defined by the context."
          },
          "label" : {
            "type" : "string"
          }
        },
        "description" : "Represents a reference to an entity defined somewhere in the suite.",
        "xml" : {
          "name" : "entityRef"
        }
      } ]
    },
    "entityRefEx" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "href" : {
            "type" : "string",
            "description" : "the Href"
          }
        },
        "description" : "Represents a reference to an entity by uri",
        "xml" : {
          "name" : "entityRefEx"
        }
      } ]
    },
    "integerLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The integer value."
          }
        },
        "description" : "Wraps a signed 64-bit integer value.",
        "xml" : {
          "name" : "integerLiteral"
        }
      } ]
    },
    "ipamRequest" : {
      "type" : "object",
      "required" : [ "requestType" ],
      "properties" : {
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        },
        "requestInput" : {
          "$ref" : "#/definitions/IPAMObject"
        },
        "id" : {
          "type" : "string",
          "format" : "uuid",
          "xml" : {
            "attribute" : true
          }
        },
        "providerCorrelationRequestId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "originalCallbackServiceId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "requestType" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "ALLOCATE", "DEALLOCATE", "CREATE_IP_RANGES", "DELETE_IP_RANGES" ]
        }
      },
      "xml" : {
        "name" : "ipamRequest"
      }
    },
    "ipamRequestStatus" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ipamRequest"
      }, {
        "type" : "object",
        "required" : [ "requestState" ],
        "properties" : {
          "requestPayload" : {
            "$ref" : "#/definitions/IPAMObject"
          },
          "requestState" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "COMPLETED", "FAILED", "IN_PROGRESS", "UNKNOWN" ]
          },
          "requestDetails" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "providerEndpointId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        },
        "xml" : {
          "name" : "ipamRequestStatus"
        }
      } ]
    },
    "literal" : {
      "type" : "object",
      "discriminator" : "type",
      "description" : "Wraps a value such that values of different types can be treated generically.",
      "xml" : {
        "name" : "literal"
      }
    },
    "literalMap" : {
      "type" : "object",
      "properties" : {
        "entries" : {
          "type" : "array",
          "xml" : {
            "name" : "entry"
          },
          "items" : {
            "$ref" : "#/definitions/LiteralMapEntry"
          }
        }
      },
      "description" : "Equivalent of java.util.Map",
      "xml" : {
        "name" : "literalMap"
      }
    },
    "money" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "format" : "double",
            "description" : "The amount associated with this value (with no specific currency)."
          }
        },
        "description" : "Represents a single, precise monetary value.",
        "xml" : {
          "name" : "money"
        }
      } ]
    },
    "moneyRange" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "minValue" : {
            "type" : "number",
            "format" : "double",
            "description" : "The lower limit of the range."
          },
          "maxValue" : {
            "type" : "number",
            "format" : "double",
            "description" : "The upper limit of the range."
          }
        },
        "description" : "Represents a range of money values, between some defined minimums and maximums.",
        "xml" : {
          "name" : "moneyRange"
        }
      } ]
    },
    "moneyRate" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "cost" : {
            "description" : "The cost (including optional currency code).",
            "$ref" : "#/definitions/literal"
          }
        },
        "description" : "A base type for literals representing a rate of some monetary value over a specified basis. E.g. $5 / hour; $1-2 / GB.",
        "xml" : {
          "name" : "moneyRate"
        }
      } ]
    },
    "moneyTimeRate" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "basis" : {
            "description" : "The span of time to calculate the rate of money for.",
            "$ref" : "#/definitions/timeSpan"
          }
        },
        "description" : "Represents a rate of money over time.",
        "xml" : {
          "name" : "moneyTimeRate"
        }
      } ]
    },
    "multipleLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "elementTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The data type of the items in the list.",
            "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
          },
          "items" : {
            "type" : "array",
            "xml" : {
              "name" : "item"
            },
            "description" : "The list of specified values. NOTE: All values must be of the same data type.",
            "items" : {
              "$ref" : "#/definitions/literal"
            }
          }
        },
        "description" : "A literal which represents multiple values. All of these component values must be of the same data type.",
        "xml" : {
          "name" : "multipleLiteral"
        }
      } ]
    },
    "pagedEntities" : {
      "type" : "object",
      "properties" : {
        "links" : {
          "type" : "array",
          "xml" : {
            "name" : "links",
            "wrapped" : true
          },
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "content" : {
          "type" : "array",
          "xml" : {
            "wrapped" : true
          },
          "readOnly" : true,
          "items" : {
            "type" : "object"
          }
        },
        "metadata" : {
          "readOnly" : true,
          "$ref" : "#/definitions/PageMetadata"
        }
      },
      "xml" : {
        "name" : "pagedEntities"
      }
    },
    "routineRunCorrelation" : {
      "type" : "object",
      "required" : [ "correlationId", "correlationType" ],
      "properties" : {
        "correlationType" : {
          "type" : "string"
        },
        "correlationId" : {
          "type" : "string"
        }
      },
      "description" : "Represents a Routine run correlation",
      "xml" : {
        "name" : "routineRunCorrelation"
      }
    },
    "routineRunRunResult" : {
      "type" : "object",
      "properties" : {
        "correlation" : {
          "$ref" : "#/definitions/routineRunCorrelation"
        },
        "resultHeader" : {
          "$ref" : "#/definitions/literalMap"
        },
        "resultData" : {
          "$ref" : "#/definitions/literalMap"
        },
        "runDetails" : {
          "type" : "string"
        },
        "runStatus" : {
          "type" : "string",
          "enum" : [ "CANCELED", "COMPLETED", "RUNNING", "SUSPENDED", "WAITING", "WAITING_SIGNAL", "FAILED", "INITIALIZING" ]
        },
        "requestId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "requestedBy" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "createDate" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "completeDate" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        }
      },
      "description" : "Represents a Routine run result",
      "xml" : {
        "name" : "routineRunRunResult"
      }
    },
    "secureString" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "The string value."
          }
        },
        "description" : "Wraps a secured string value, such as a password.",
        "xml" : {
          "name" : "secureString"
        }
      } ]
    },
    "stringLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "The string value."
          }
        },
        "description" : "Wraps a String value.",
        "xml" : {
          "name" : "stringLiteral"
        }
      } ]
    },
    "timeSpan" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "unit" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "description" : "The unit of measure for the time span. e.g: days.",
          "enum" : [ "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS", "WEEKS", "MONTHS", "YEARS" ]
        },
        "amount" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          },
          "description" : "The amount for the time span."
        }
      },
      "description" : "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days.",
      "xml" : {
        "name" : "timeSpan"
      }
    }
  }
}