{
  "swagger" : "2.0",
  "info" : {
    "description" : "# Endpoint Configuration Service API Specification\n\n## What Is the Endpoint Configuration Service?\n\nYou can use the endpoint configuration service REST API to create, read, update and delete endpoint types, endpoint categories, and endpoints.\n\n## Typical Use Cases\n\nTypical use cases for the endpoint configuration service are:\n\n* A vRA Administrator or a Solution User creates an endpoint category.\n* The vRA administrator registers a new endpoint type with the endpoint configuration service.\n* The IaaS administrator creates, updates or deletes an endpoint through the UI. vRA  then calls the endpoint configuration service to create, update or delete endpoint information.\n\n## Key Concepts\n\n### Endpoint Category Operations\n\nBefore creating an endpoint type, an endpoint category should be registered with endpoint configuration service.  Examples of endpoint categories include Virtual, Physical, IPAM, and so on. An application can call the `POST /api/categories` API to create endpoint categories as required.\n\nWhen an endpoint category is created, the endpoint configuration service creates the endpoint category in the Postgres database.\n\n### Endpoint Type\n\nA value that represents the type of an endpoint. A service provider creates an endpoint type within a specified category.  For example, a provider of an IPAM service could create an endpoint type called \"MyIPAMapp\" within the IPAM endpoint category.\n\nIf a customer wants to use a new endpoint, the customer must follow a two step process:\n\n1. Add a new endpoint type, through the endpoint configuration service.\n2. Add a new endpoint instance of that endpoint type.\n\n### Endpoint Type Operations\n\nBefore creating an endpoint, the endpoint type and schema should be registered with the endpoint configuration service. When an endpoint type is created, the endpoint configuration service creates an endpoint type category in a Postgres database.\n\nAn endpoint type schema is stored only in the Postgres database. However, endpoint type information is stored in both the Postgres database and in the `InterfaceTypes` table on the SQL server.\n\n## How the Endpoint Configuration Service Works\n\nWhen an administrator creates an endpoint instance, the UI calls the endpoint service with endpoint data. The endpoint service performs the following steps:\n\n- Validates the data against the schema.\n- Gets the IaaS repository endpoint from the component registry.\n- Saves the new endpoint data to the Postgres database.\n- Calls the repository service to save the data.\n- Returns SUCCESS to the endpoint UI.\n\nThe logic for update and delete is same as for create.\n\n### User Roles and Permissions\n\nDifferent user roles have different permissions for working with endpoints.\n\n#### Endpoint Type Operations and Endpoint Type Categories\n\nThe following user roles have permission for the following:\n\n* GET - IaaS Administrators, vRA Administrators, Solution Users.\n\n* PUT/POST/DELETE  - vRA Administrators, Solution Users.\n\n#### Endpoint Operations\n\n* GET (global endpoint, without secure data) - IaaS Administrators, Solution Users.\n* GET (any endpoint, secure data) - Solution Users.\n* PUT/POST/DELETE -  Solution Users.\n* PUT/POST/DELETE - IaaS Administrators, Solution Users.\n\n### Handling Credentials\n\nIn vRA 7.0,  credential information is stored separately from the management endpoint information. So, when creating an infrastructure endpoint, the customer must specify the credential information separately, making endpoint creation a two-step process. With the vRA 7.1 endpoint configuration service, the endpoint information is specified along with the credential information. The UI displays all the information in a single place, and the endpoint data is stored together at a single place as well.\n\nPassword information must be encrypted when saved to the database. To specify that a field needs to be encrypted, the corresponding field must be marked as `securestring` in the database schema. When saving endpoint information, the endpoint service goes through all the fields of type `securestring` and encrypts the field data, before saving it to the database. This ensures that passwords are not saved as plain text in the database.\n\nWhen retrieving  endpoint information from the endpoint service, by default, all the fields that use `securestring` are set to empty. Only specific APIs return fields marked with `securestring`. Only solution users can retrieve secure fields.\n\n### Creating New Endpoint Types\n\nTo consume a new endpoint that belongs to a new endpoint type, a service provider must:\n\n1. Add a new endpoint type, through the endpoint configuration service.\n2. Add a new endpoint instance of that endpoint type.\n\nFor step 1, the customer (service provider) must also define a new schema for the endpoint type. The schema should indicate all the permissible fields and their corresponding values for the endpoint type. The endpoint object used for creating the endpoint should confirm to the schema of the endpoint type that the endpoint belongs to.\n\n## Additional Information\n\nFor more detailed information on using the the API, refer to the *vRA Programming Guide*.\n",
    "version" : "7.5.0-SNAPSHOT",
    "title" : "Endpoint Configuration Service API"
  },
  "basePath" : "/endpoint-configuration-service",
  "tags" : [ {
    "name" : "AssocationTypes"
  }, {
    "name" : "EndpointTypeCategories"
  }, {
    "name" : "EndpointTypes"
  }, {
    "name" : "Endpoints"
  }, {
    "name" : "data-service"
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/api/associationtypes" : {
      "get" : {
        "tags" : [ "AssocationTypes" ],
        "summary" : "Gets paged list of association types",
        "description" : "The API returns paged list of association types.",
        "operationId" : "getAssociationTypes",
        "parameters" : [ {
          "name" : "endpointType",
          "in" : "query",
          "description" : "The type  of the endpoints to be retrieved.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AssociationType"
              }
            }
          },
          "403" : {
            "description" : "Unauthorized."
          }
        }
      },
      "post" : {
        "tags" : [ "AssocationTypes" ],
        "summary" : "Creates a new association type",
        "description" : "The API creates a new association type. The API performs the following validation before creating the association type: <br>1. There is an no existing association type with the specified id.</br><br>2. The From Endpoint Type and To Endpoint Type values are checked  to make sure they exist.</br><br>3. Make sure the cardinality value is valid (0-3). </br>",
        "operationId" : "createAssociationType",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Association type to be created.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AssociationType"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AssociationType"
            }
          },
          "201" : {
            "description" : ""
          },
          "403" : {
            "description" : "Unauthorized."
          },
          "405" : {
            "description" : "Request failed validation."
          },
          "501" : {
            "description" : "Tenantable association types cannot be created."
          }
        }
      }
    },
    "/api/associationtypes/{id}" : {
      "get" : {
        "tags" : [ "AssocationTypes" ],
        "summary" : "Get association type",
        "description" : "The API returns a specific association type, based on the association type id.",
        "operationId" : "getAssociationTypeById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the association type to be retrieved.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/AssociationType"
            }
          },
          "403" : {
            "description" : "Unauthorized."
          },
          "404" : {
            "description" : "Association type with the specified id does not exist."
          }
        }
      },
      "put" : {
        "tags" : [ "AssocationTypes" ],
        "summary" : "Updates an existing association type",
        "description" : "The API updates an existing association type. The API performs the following validation before updating the association type:<br>1. There is an existing association type with the specified id.</br><br>2. Another association type wth the same name does not exist.</br>",
        "operationId" : "updateAssociationType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the association type to be updated.",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Association type to be updated with.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AssociationType"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          },
          "403" : {
            "description" : "Unauthorized."
          },
          "404" : {
            "description" : "Association type with the specified id does not exist."
          },
          "405" : {
            "description" : "Request failed validation."
          }
        }
      },
      "delete" : {
        "tags" : [ "AssocationTypes" ],
        "summary" : "Deletes an existing association type",
        "description" : "The API deletes an existing association type. The API returns an error, ifassociation type with the specified id does not exist.",
        "operationId" : "deleteAssociationType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the association type to be deleted.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          },
          "403" : {
            "description" : "Unauthorized."
          },
          "404" : {
            "description" : "Association type with the specified id does not exist."
          },
          "405" : {
            "description" : "Cannot delete association type, when endpoints of that type exist."
          }
        }
      }
    },
    "/api/categories" : {
      "get" : {
        "tags" : [ "EndpointTypeCategories" ],
        "summary" : "Gets paged list of endpoint type categories",
        "description" : "The API returns paged list of endpoint type categories.",
        "operationId" : "getEndpointTypeCategories",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/EndpointTypeCategory"
              }
            }
          },
          "403" : {
            "description" : "Unauthorized."
          }
        }
      },
      "post" : {
        "tags" : [ "EndpointTypeCategories" ],
        "summary" : "Creates a new endpoint type category",
        "description" : "The API creates a new endpoint type category. The API validates that the endpoint type category does not exist already, before creating new endpoint type category",
        "operationId" : "createEndpointTypeCategory",
        "parameters" : [ {
          "in" : "body",
          "name" : "endpointCategory",
          "description" : "Endpoint type category to be created.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EndpointTypeCategory"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/EndpointTypeCategory"
            }
          },
          "400" : {
            "description" : "Bad request."
          },
          "403" : {
            "description" : "Unauthorized."
          },
          "503" : {
            "description" : "Dependent service is unavailable."
          }
        }
      }
    },
    "/api/categories/{endpoint-category-id}/endpoints" : {
      "get" : {
        "tags" : [ "Endpoints" ],
        "summary" : "Gets paged list of endpoints, optionally based on category",
        "description" : "The API returns paged list of endpoints.",
        "operationId" : "getEndpointsByCategory",
        "parameters" : [ {
          "name" : "endpoint-category-id",
          "in" : "path",
          "description" : "The id of the endpoint to be retrieved.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "secureFields",
          "in" : "query",
          "description" : "Whether to retrieve secure data.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Endpoint"
              }
            }
          },
          "403" : {
            "description" : "Unauthorized."
          }
        }
      }
    },
    "/api/categories/{id}" : {
      "get" : {
        "tags" : [ "EndpointTypeCategories" ],
        "summary" : "Get endpoint type category, based on the category id",
        "description" : "The API returns a specific endpoint type category, based on the category id.",
        "operationId" : "getEndpointTypeCategoryById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the endpoint type category to be retrieved.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/EndpointTypeCategory"
            }
          },
          "400" : {
            "description" : "Bad Request."
          },
          "403" : {
            "description" : "Unauthorized."
          },
          "404" : {
            "description" : "Endpoint type category <id> does not exist."
          }
        }
      },
      "put" : {
        "tags" : [ "EndpointTypeCategories" ],
        "summary" : "Updates an existing endpoint type category",
        "description" : "The API updates an existing endpoint type category. If the category exists, it is updated.Otherwise, a new endpoint type category is created",
        "operationId" : "updateEndpointTypeCategory",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the endpoint type category to be updated.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Endpoint type category to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EndpointTypeCategory"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          },
          "403" : {
            "description" : "Unauthorized."
          },
          "503" : {
            "description" : "Dependent service is unavailable."
          }
        }
      },
      "delete" : {
        "tags" : [ "EndpointTypeCategories" ],
        "summary" : "Deletes an existing endpoint type category",
        "description" : "The API deletes an existing endpoint type category. The API returns an error, ifendpoint type category with the specified id does not exist or if there are existing endpoint types under the specified category.",
        "operationId" : "deleteEndpointTypeCategory",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the endpoint type category to be deleted.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          },
          "403" : {
            "description" : "Unauthorized."
          },
          "404" : {
            "description" : "Endpoint type category with the specified id does not exist."
          },
          "405" : {
            "description" : "Cannot delete endpoint type category that is referenced by other endpoint types."
          },
          "503" : {
            "description" : "Dependent service is unavailable."
          }
        }
      }
    },
    "/api/data-service/data/{classId}/{id}" : {
      "post" : {
        "tags" : [ "data-service" ],
        "summary" : "Retrieve the instance data.",
        "description" : "Retrieve the instance data for service and class",
        "operationId" : "getInstanceData",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The endpoint type id of endpoint object.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The endpoint unique identifier.",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The dynamic data request object.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DynamicDataRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The specific instance data is retrieved.",
            "schema" : {
              "$ref" : "#/definitions/DynamicDataResponse"
            }
          },
          "403" : {
            "description" : "Unauthorized."
          },
          "404" : {
            "description" : "The endpoint is not found."
          }
        }
      }
    },
    "/api/data-service/schema/{classId}/default" : {
      "get" : {
        "tags" : [ "data-service" ],
        "summary" : "Get the schema for the specified object class",
        "description" : "Get the schema for the specified object class.",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The class of object to retrieve the schema for.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the data",
            "schema" : {
              "$ref" : "#/definitions/Schema"
            }
          },
          "404" : {
            "description" : "The endpoint type is not found."
          }
        }
      }
    },
    "/api/data-service/schema/{classId}/types/{typeFilter}" : {
      "get" : {
        "tags" : [ "data-service" ],
        "summary" : "Get the schema for the specified object type",
        "description" : "This returns the schema of a particular type within a class of object.",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The class of object to retrieve the schema for.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "typeFilter",
          "in" : "path",
          "description" : "A type filter defining the specific subtype that owns the field.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the data",
            "schema" : {
              "$ref" : "#/definitions/Schema"
            }
          }
        }
      }
    },
    "/api/endpoints" : {
      "get" : {
        "tags" : [ "Endpoints" ],
        "summary" : "Gets paged list of endpoints, optionally based on type or category",
        "description" : "The API returns paged list of endpoints.",
        "operationId" : "getEndpoints",
        "parameters" : [ {
          "name" : "category",
          "in" : "query",
          "description" : "**DEPRECATED** The category of the endpoints to be retrieved.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "**DEPRECATED** The type of the endpoints to be retrieved.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "secureFields",
          "in" : "query",
          "description" : "Whether to retrieve secure data.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Endpoint"
              }
            }
          },
          "403" : {
            "description" : "Unauthorized."
          }
        }
      },
      "post" : {
        "tags" : [ "Endpoints" ],
        "summary" : "Creates a new endpoint",
        "description" : "The API creates a new endpoint. The API performs the following validation before creating the endpoint:<br>1. The id of the endpoint is null.</br><br>2. Another endpoint wth the same name exist.</br><br>3. The type of the endpoint is already registered.</br><br>4. The endpoint passes schema validation, based on the endpoint type's schema.</br>",
        "operationId" : "createEndpoint",
        "parameters" : [ {
          "in" : "body",
          "name" : "endpoint",
          "description" : "Endpoint to be created.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Endpoint"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/Endpoint"
            }
          },
          "403" : {
            "description" : "Unauthorized."
          },
          "405" : {
            "description" : "Request failed validation."
          },
          "503" : {
            "description" : "Dependent service is unavailable."
          }
        }
      }
    },
    "/api/endpoints/name/{name}" : {
      "get" : {
        "tags" : [ "Endpoints" ],
        "summary" : "Get endpoint, based on the endpoint name",
        "description" : "The API returns a specific endpoint, based on the endpoint name.",
        "operationId" : "getEndpointByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the endpoint to be retrieved.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "secureFields",
          "in" : "query",
          "description" : "Whether to return secure fields such as password or encrypted custom properties.",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/Endpoint"
            }
          },
          "400" : {
            "description" : "Bad request."
          },
          "403" : {
            "description" : "Unauthorized."
          },
          "404" : {
            "description" : "Endpoint with the specified name does not exist."
          }
        }
      }
    },
    "/api/endpoints/validate" : {
      "post" : {
        "tags" : [ "Endpoints" ],
        "summary" : "Validate endpoint data",
        "description" : "The API validates an endpoint",
        "operationId" : "validateEndpoint",
        "parameters" : [ {
          "in" : "body",
          "name" : "endpoint",
          "description" : "Endpoint to be validated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Endpoint"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/EndpointValidationResult"
            }
          },
          "403" : {
            "description" : "Unauthorized."
          }
        }
      }
    },
    "/api/endpoints/{id}" : {
      "get" : {
        "tags" : [ "Endpoints" ],
        "summary" : "Get endpoint, based on the endpoint id",
        "description" : "The API returns a specific endpoint, based on the endpoint id.",
        "operationId" : "getEndpointById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the endpoint to be retrieved.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "secureFields",
          "in" : "query",
          "description" : "Whether to return secure fields such as password or encrypted custom properties.",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/Endpoint"
            }
          },
          "400" : {
            "description" : "Bad request."
          },
          "403" : {
            "description" : "Unauthorized."
          },
          "404" : {
            "description" : "Endpoint with the specified id does not exist."
          }
        }
      },
      "put" : {
        "tags" : [ "Endpoints" ],
        "summary" : "Updates an existing endpoint",
        "description" : "The API updates an existing endpoint. The API performs the following validation before updating the endpoint:<br>1. There is an existing endpoint with the specified id.</br><br>2. Another endpoint wth the same name does exist.</br><br>3. The type of the endpoint is already registered.</br><br>4. The endpoint passes schema validation, based on the endpoint type's schema.</br>",
        "operationId" : "updateEndpoint",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the endpoint to be updated.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Endpoint to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Endpoint"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          },
          "403" : {
            "description" : "Unauthorized."
          },
          "404" : {
            "description" : "Endpoint with the specified id does not exist."
          },
          "405" : {
            "description" : "Request failed validation."
          },
          "503" : {
            "description" : "Dependent service is unavailable."
          }
        }
      },
      "delete" : {
        "tags" : [ "Endpoints" ],
        "summary" : "Deletes an existing endpoint",
        "description" : "The API deletes an existing endpoint. The API returns an error, ifendpoint with the specified id does not exist.",
        "operationId" : "deleteEndpoint",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the endpoint to be deleted.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          },
          "403" : {
            "description" : "Unauthorized."
          },
          "404" : {
            "description" : "Endpoint with the specified id does not exist."
          },
          "503" : {
            "description" : "Dependent service is unavailable."
          }
        }
      }
    },
    "/api/endpoints/{id}/candelete" : {
      "get" : {
        "tags" : [ "Endpoints" ],
        "summary" : "Can delete an existing endpoint",
        "description" : "The API checks an existing endpoint to see if it can be deleted. The API returns falseendpoint with the specified id cannot be deleted. It returns true otherwise.",
        "operationId" : "canDeleteEndpoint",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the endpoint to check if it can be deleted.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "type" : "boolean"
            }
          },
          "403" : {
            "description" : "Unauthorized."
          },
          "404" : {
            "description" : "Endpoint with the specified id does not exist."
          }
        }
      }
    },
    "/api/endpoints/{id}/canedit" : {
      "get" : {
        "tags" : [ "Endpoints" ],
        "summary" : "Can edit an existing endpoint",
        "description" : "The API checks an existing endpoint to see if it can be edited. The API returns falseendpoint with the specified id cannot be edited. It returns true otherwise.",
        "operationId" : "canEditExistingEndpoint",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the endpoint to check if it can be edited.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "type" : "boolean"
            }
          },
          "403" : {
            "description" : "Unauthorized."
          },
          "404" : {
            "description" : "Endpoint with the specified id does not exist."
          }
        }
      }
    },
    "/api/types" : {
      "get" : {
        "tags" : [ "EndpointTypes" ],
        "summary" : "Gets paged list of endpoint types",
        "description" : "The API returns paged list of endpoint types.",
        "operationId" : "getEndpointTypes",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/EndpointType"
              }
            }
          },
          "403" : {
            "description" : "Unauthorized."
          }
        }
      },
      "post" : {
        "tags" : [ "EndpointTypes" ],
        "summary" : "Creates a new endpoint type",
        "description" : "The API creates a new endpoint type. The API performs the following validation before updating the endpoint type: <br>1. There is an no existing endpoint type with the specified id.</br><br>2. Another endpoint type wth the same name does not exist.</br>",
        "operationId" : "createEndpointType",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Endpoint type to be created.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EndpointType"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/EndpointType"
            }
          },
          "403" : {
            "description" : "Unauthorized."
          },
          "405" : {
            "description" : "Request failed validation."
          },
          "501" : {
            "description" : "Tenantable endpoint types cannot be created."
          }
        }
      }
    },
    "/api/types/{endpoint-type-id}/endpoints" : {
      "get" : {
        "tags" : [ "Endpoints" ],
        "summary" : "Gets paged list of endpoints, based on type",
        "description" : "The API returns paged list of endpoints.",
        "operationId" : "getEndpointsByType",
        "parameters" : [ {
          "name" : "endpoint-type-id",
          "in" : "path",
          "description" : "The id of the endpoint to be retrieved.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "secureFields",
          "in" : "query",
          "description" : "Whether to retrieve secure data.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Endpoint"
              }
            }
          },
          "403" : {
            "description" : "Unauthorized."
          }
        }
      }
    },
    "/api/types/{id}" : {
      "get" : {
        "tags" : [ "EndpointTypes" ],
        "summary" : "Get endpoint type",
        "description" : "The API returns a specific endpoint type, based on the endpoint type id.",
        "operationId" : "getEndpointTypeById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the endpoint type to be retrieved.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/EndpointType"
            }
          },
          "403" : {
            "description" : "Unauthorized."
          },
          "404" : {
            "description" : "Endpoint type with the specified id does not exist."
          }
        }
      },
      "put" : {
        "tags" : [ "EndpointTypes" ],
        "summary" : "Updates an existing endpoint type",
        "description" : "The API updates an existing endpoint type. The API performs the following validation before updating the endpoint type:<br>1. There is an existing endpoint type with the specified id.</br><br>2. Another endpoint type wth the same name does not exist.</br>",
        "operationId" : "updateEndpointType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the endpoint type to be updated.",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Endpoint type to be updated with.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EndpointType"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          },
          "403" : {
            "description" : "Unauthorized."
          },
          "404" : {
            "description" : "Endpoint type with the specified id does not exist."
          },
          "405" : {
            "description" : "Request failed validation."
          },
          "501" : {
            "description" : "Tenantable endpoint types cannot be created."
          }
        }
      },
      "delete" : {
        "tags" : [ "EndpointTypes" ],
        "summary" : "Deletes an existing endpoint type",
        "description" : "The API deletes an existing endpoint type. The API returns an error, ifendpoint type with the specified id does not exist.",
        "operationId" : "deleteEndpointType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the endpoint type to be deleted.",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          },
          "403" : {
            "description" : "Unauthorized."
          },
          "404" : {
            "description" : "Endpoint type with the specified id does not exist."
          },
          "405" : {
            "description" : "Cannot delete endpoint type, when endpoints of that type exist."
          }
        }
      }
    },
    "/api/types/{id}/associationtypes" : {
      "get" : {
        "tags" : [ "EndpointTypes" ],
        "summary" : "Get association types for an endpoint type",
        "description" : "The API returns list of association types, based on the endpoint type id.",
        "operationId" : "getAssociationTypesByEndpointId",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the endpoint type for which association types need to be retrieved.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AssociationType"
              }
            }
          },
          "403" : {
            "description" : "Unauthorized."
          },
          "404" : {
            "description" : "Endpoint type with the specified id does not exist."
          }
        }
      }
    }
  },
  "definitions" : {
    "AndClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "subClauses" : {
            "type" : "array",
            "xml" : {
              "name" : "clause"
            },
            "items" : {
              "$ref" : "#/definitions/Clause"
            }
          }
        }
      } ]
    },
    "Association" : {
      "type" : "object",
      "properties" : {
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        },
        "id" : {
          "type" : "string",
          "format" : "uuid",
          "xml" : {
            "attribute" : true
          }
        },
        "associationTypeInfoId" : {
          "type" : "string",
          "format" : "uuid",
          "xml" : {
            "attribute" : true
          }
        },
        "customProperties" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "toEndpointId" : {
          "type" : "string",
          "format" : "uuid",
          "xml" : {
            "attribute" : true
          }
        },
        "fromEndpointId" : {
          "type" : "string",
          "format" : "uuid",
          "xml" : {
            "attribute" : true
          }
        },
        "toEndpointType" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "fromEndpointType" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "AssociationType" : {
      "type" : "object",
      "required" : [ "cardinality" ],
      "properties" : {
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        },
        "id" : {
          "type" : "string",
          "format" : "uuid",
          "xml" : {
            "attribute" : true
          }
        },
        "name" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 1,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 1,
          "maxLength" : 2000
        },
        "fromType" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 1,
          "maxLength" : 255
        },
        "toType" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 1,
          "maxLength" : 255
        },
        "cardinality" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "BooleanLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "description" : "Wraps a boolean value.",
        "xml" : {
          "name" : "booleanLiteral"
        }
      } ]
    },
    "CallbackEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object"
      } ]
    },
    "CertificateInfo" : {
      "type" : "object",
      "properties" : {
        "identityCertificateExists" : {
          "type" : "boolean",
          "default" : false
        },
        "issuerName" : {
          "type" : "string"
        },
        "principalName" : {
          "type" : "string"
        },
        "notValidBefore" : {
          "type" : "string",
          "format" : "date-time"
        },
        "notValidAfter" : {
          "type" : "string",
          "format" : "date-time"
        },
        "thumbprint" : {
          "type" : "string"
        }
      }
    },
    "Clause" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "CoalesceEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "arguments" : {
            "type" : "array",
            "xml" : {
              "name" : "argument",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "ComplexDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object",
        "properties" : {
          "schema" : {
            "$ref" : "#/definitions/Schema"
          }
        }
      } ]
    },
    "ComplexEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "componentTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "typeFilter" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "values" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "ConditionalEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "cases" : {
            "type" : "array",
            "xml" : {
              "name" : "case"
            },
            "items" : {
              "$ref" : "#/definitions/ConditionalEvaluatorCase"
            }
          },
          "defaulValue" : {
            "$ref" : "#/definitions/Evaluator"
          }
        }
      } ]
    },
    "ConditionalEvaluatorCase" : {
      "type" : "object",
      "properties" : {
        "condition" : {
          "$ref" : "#/definitions/Clause"
        },
        "value" : {
          "$ref" : "#/definitions/Evaluator"
        }
      }
    },
    "ConstantClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/booleanLiteral"
          }
        }
      } ]
    },
    "ConstantValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/literal"
          }
        }
      } ]
    },
    "Constraint" : {
      "type" : "object",
      "required" : [ "value" ],
      "discriminator" : "type",
      "properties" : {
        "value" : {
          "$ref" : "#/definitions/Evaluator"
        }
      }
    },
    "ContainsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "ContextPermissibleValueList" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PermissibleValueList"
      }, {
        "type" : "object"
      } ]
    },
    "CriteriaOperator" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "CustomPropertyDefinitionMetadata" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object",
        "required" : [ "field" ],
        "properties" : {
          "field" : {
            "$ref" : "#/definitions/Field"
          }
        }
      } ]
    },
    "CustomValidationConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "DataType" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "typeId" : {
          "type" : "string",
          "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
        }
      }
    },
    "DefaultValueBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "DisplayTextBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "DynamicDataRequest" : {
      "type" : "object",
      "properties" : {
        "tenantId" : {
          "type" : "string"
        },
        "ignoreUnknownFields" : {
          "type" : "boolean",
          "default" : false
        },
        "ids" : {
          "type" : "array",
          "xml" : {
            "name" : "id"
          },
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "DynamicDataResponse" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "$ref" : "#/definitions/literalMap"
        }
      }
    },
    "DynamicPermissibleValueList" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PermissibleValueList"
      }, {
        "type" : "object",
        "properties" : {
          "context" : {
            "$ref" : "#/definitions/DynamicValueContext"
          },
          "dependencies" : {
            "type" : "array",
            "xml" : {
              "name" : "dependency",
              "wrapped" : true
            },
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "DynamicValueContext" : {
      "type" : "object",
      "required" : [ "parameterMappings" ],
      "properties" : {
        "providerEntityId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "parameterMappings" : {
          "$ref" : "#/definitions/ParameterMappingCollection"
        }
      }
    },
    "EditableBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "ElementState" : {
      "type" : "object",
      "properties" : {
        "dependencies" : {
          "type" : "array",
          "xml" : {
            "name" : "dependency",
            "wrapped" : true
          },
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "facets" : {
          "type" : "array",
          "xml" : {
            "name" : "facet",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/Constraint"
          }
        }
      }
    },
    "EncryptedBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "Endpoint" : {
      "type" : "object",
      "required" : [ "extensionData" ],
      "properties" : {
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        },
        "id" : {
          "type" : "string",
          "format" : "uuid",
          "xml" : {
            "attribute" : true
          }
        },
        "typeId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 1,
          "maxLength" : 255
        },
        "typeDisplayName" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "name" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 1,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 2000
        },
        "uri" : {
          "type" : "string"
        },
        "tenantId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 1,
          "maxLength" : 255
        },
        "extensionData" : {
          "$ref" : "#/definitions/literalMap"
        },
        "associations" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Association"
          }
        }
      }
    },
    "EndpointMenuItem" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        },
        "menuId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 1,
          "maxLength" : 255
        },
        "displayName" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 1,
          "maxLength" : 255
        },
        "extensionId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 1,
          "maxLength" : 255
        },
        "location" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 1,
          "maxLength" : 2083
        },
        "icon" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "EndpointType" : {
      "type" : "object",
      "properties" : {
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        },
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 1,
          "maxLength" : 255
        },
        "category" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 1,
          "maxLength" : 255
        },
        "displayName" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 1,
          "maxLength" : 255
        },
        "categoryDisplayName" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "description" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 1,
          "maxLength" : 2000
        },
        "tenantable" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "tenantId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 1,
          "maxLength" : 255
        },
        "schema" : {
          "$ref" : "#/definitions/Schema"
        },
        "serviceProviderId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 255
        },
        "capabilities" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "menuItems" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EndpointMenuItem"
          }
        }
      }
    },
    "EndpointTypeCategory" : {
      "type" : "object",
      "properties" : {
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        },
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 1,
          "maxLength" : 255
        },
        "name" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 1,
          "maxLength" : 255
        }
      }
    },
    "EndpointValidationResult" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "INVALID_CERTIFICATE", "NOT_FOUND", "AGENT_NOT_FOUND", "HOST_NOT_REACHABLE", "INVALID_CREDENTIALS", "UNKNOWN_FAILURE", "TIMEOUT" ]
        },
        "message" : {
          "type" : "string"
        },
        "certificateInfo" : {
          "$ref" : "#/definitions/CertificateInfo"
        }
      }
    },
    "EndsWithOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "EntityReferenceDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object"
      } ]
    },
    "EqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "Evaluator" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "Expression" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "operator" : {
            "$ref" : "#/definitions/CriteriaOperator"
          },
          "leftOperand" : {
            "$ref" : "#/definitions/Evaluator"
          },
          "rightOperand" : {
            "$ref" : "#/definitions/Evaluator"
          }
        }
      } ]
    },
    "ExternalValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "required" : [ "dynamicValueProviderInfo" ],
        "properties" : {
          "dynamicValueProviderInfo" : {
            "$ref" : "#/definitions/DynamicValueContext"
          }
        }
      } ]
    },
    "Field" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "label" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "dataType" : {
          "$ref" : "#/definitions/DataType"
        },
        "displayAdvice" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "TEXTBOX", "HYPERLINK", "EMAIL", "TEXTAREA", "DATE_TIME_PICKER", "CHECKBOX", "YES_NO", "CHECKBOX_GROUP", "DUAL_LIST", "RADIO_GROUP", "DROPDOWN", "LIST", "SEARCHER", "TREE", "FORM", "IMAGE", "SLIDER", "DATA_TABLE", "VALUE_PICKER", "CONFIRM_PASSWORD" ]
        },
        "orderIndex" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        },
        "permissibleValues" : {
          "$ref" : "#/definitions/PermissibleValueList"
        },
        "state" : {
          "$ref" : "#/definitions/ElementState"
        },
        "isMultiValued" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "columns" : {
          "type" : "array",
          "xml" : {
            "name" : "column",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/Field"
          }
        }
      }
    },
    "FieldReference" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "path" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        }
      } ]
    },
    "FixedValueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "GreaterThanOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "GreaterThanOrEqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "IaasPropertyNameBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "IncrementBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "InternalConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "IsDefinedOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "LessThanOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "LessThanOrEqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "LiteralMapEntry" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "value" : {
          "$ref" : "#/definitions/literal"
        }
      }
    },
    "MandatoryConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaxCardinalityConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaxLengthConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaxValueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaximumValueEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "arguments" : {
            "type" : "array",
            "xml" : {
              "name" : "argument",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "MinCardinalityConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MinLengthConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MinValueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MinimumValueEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "arguments" : {
            "type" : "array",
            "xml" : {
              "name" : "argument",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "MonetaryValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "currencyCode" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The ISO 4217 code used to identify the currency (if any) associated with this value."
          }
        },
        "description" : "Base type for representing monetary values, encapsulating both some kind of quantity and a currency.",
        "xml" : {
          "name" : "literal"
        }
      } ]
    },
    "MultipleEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "required" : [ "items" ],
        "properties" : {
          "elementTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "NotClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "subClause" : {
            "$ref" : "#/definitions/Clause"
          }
        }
      } ]
    },
    "NotEqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "NullDisplayTextBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "ObjectDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object",
        "properties" : {
          "componentTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "typeFilter" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "label" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        }
      } ]
    },
    "OrClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "subClauses" : {
            "type" : "array",
            "xml" : {
              "name" : "clause"
            },
            "items" : {
              "$ref" : "#/definitions/Clause"
            }
          }
        }
      } ]
    },
    "PageAssociationType" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AssociationType"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageEndpoint" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Endpoint"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageEndpointType" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EndpointType"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageEndpointTypeCategory" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EndpointTypeCategory"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ParameterMapping" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "value" : {
          "$ref" : "#/definitions/Evaluator"
        }
      }
    },
    "ParameterMappingCollection" : {
      "type" : "object",
      "properties" : {
        "params" : {
          "type" : "array",
          "xml" : {
            "name" : "param",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/ParameterMapping"
          }
        }
      }
    },
    "PermissibleValueList" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "customAllowed" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        }
      }
    },
    "PrimitiveDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object",
        "properties" : {
          "typeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
          }
        }
      } ]
    },
    "ReadOnlyConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "RefreshOnChangeBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "RegexpConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object",
        "properties" : {
          "errorMessage" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ResetValueBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "Schema" : {
      "type" : "object",
      "properties" : {
        "fields" : {
          "type" : "array",
          "xml" : {
            "name" : "field"
          },
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Field"
          }
        }
      }
    },
    "SkipExportBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "Sort" : {
      "type" : "object"
    },
    "StartsWithOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "StaticPermissibleValueList" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PermissibleValueList"
      }, {
        "type" : "object",
        "properties" : {
          "values" : {
            "type" : "array",
            "xml" : {
              "name" : "value"
            },
            "items" : {
              "$ref" : "#/definitions/value"
            }
          }
        }
      } ]
    },
    "SubsetOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "SupersetOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "TimeSpan" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "description" : "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days.",
        "xml" : {
          "name" : "timeSpan"
        }
      } ]
    },
    "UniqueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "UnspecifiedEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object"
      } ]
    },
    "VisibilityConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "WithinOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "WrapperClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/Evaluator"
          }
        }
      } ]
    },
    "booleanLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "boolean",
            "description" : "The boolean value.",
            "default" : false
          }
        },
        "description" : "Wraps a boolean value.",
        "xml" : {
          "name" : "booleanLiteral"
        }
      } ]
    },
    "complexLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "componentTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's component type."
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's component."
          },
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's class."
          },
          "typeFilter" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The type filter for this literal."
          },
          "values" : {
            "description" : "Map of values, keyed by the field ids of some complex type.",
            "$ref" : "#/definitions/literalMap"
          }
        },
        "description" : "A complex value composed of multiple values keyed by the field ids of some complex type.",
        "xml" : {
          "name" : "complexLiteral"
        }
      } ]
    },
    "dateTimeLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date."
          }
        },
        "description" : "Wraps a Date & Time value. This is a wrapper for the Java {@link Date} class.",
        "xml" : {
          "name" : "dateTimeLiteral"
        }
      } ]
    },
    "decimalLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "number",
            "format" : "double",
            "description" : "The decimal value."
          }
        },
        "description" : "Wraps a decimal value.",
        "xml" : {
          "name" : "decimalLiteral"
        }
      } ]
    },
    "entityRef" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier of the type or category to which the referenced entity belongs."
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The unique identifier of the referenced entity, encoded as a string"
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The durable identifier of a component registered in the suite component registry that owns and manages the referenced entity. This can be omitted if this component can be derived from the context within which this entity reference occurs. It must be specified, if no such context exists or if the component differs from that defined by the context."
          },
          "label" : {
            "type" : "string"
          }
        },
        "description" : "Represents a reference to an entity defined somewhere in the suite.",
        "xml" : {
          "name" : "entityRef"
        }
      } ]
    },
    "entityRefEx" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "href" : {
            "type" : "string",
            "description" : "the Href"
          }
        },
        "description" : "Represents a reference to an entity by uri",
        "xml" : {
          "name" : "entityRefEx"
        }
      } ]
    },
    "integerLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The integer value."
          }
        },
        "description" : "Wraps a signed 64-bit integer value.",
        "xml" : {
          "name" : "integerLiteral"
        }
      } ]
    },
    "literal" : {
      "type" : "object",
      "discriminator" : "type",
      "description" : "Wraps a value such that values of different types can be treated generically.",
      "xml" : {
        "name" : "literal"
      }
    },
    "literalMap" : {
      "type" : "object",
      "properties" : {
        "entries" : {
          "type" : "array",
          "xml" : {
            "name" : "entry"
          },
          "items" : {
            "$ref" : "#/definitions/LiteralMapEntry"
          }
        }
      },
      "description" : "Equivalent of java.util.Map",
      "xml" : {
        "name" : "literalMap"
      }
    },
    "money" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "format" : "double",
            "description" : "The amount associated with this value (with no specific currency)."
          }
        },
        "description" : "Represents a single, precise monetary value.",
        "xml" : {
          "name" : "money"
        }
      } ]
    },
    "moneyRange" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "minValue" : {
            "type" : "number",
            "format" : "double",
            "description" : "The lower limit of the range."
          },
          "maxValue" : {
            "type" : "number",
            "format" : "double",
            "description" : "The upper limit of the range."
          }
        },
        "description" : "Represents a range of money values, between some defined minimums and maximums.",
        "xml" : {
          "name" : "moneyRange"
        }
      } ]
    },
    "moneyRate" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "cost" : {
            "description" : "The cost (including optional currency code).",
            "$ref" : "#/definitions/literal"
          }
        },
        "description" : "A base type for literals representing a rate of some monetary value over a specified basis. E.g. $5 / hour; $1-2 / GB.",
        "xml" : {
          "name" : "moneyRate"
        }
      } ]
    },
    "moneyTimeRate" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "basis" : {
            "description" : "The span of time to calculate the rate of money for.",
            "$ref" : "#/definitions/timeSpan"
          }
        },
        "description" : "Represents a rate of money over time.",
        "xml" : {
          "name" : "moneyTimeRate"
        }
      } ]
    },
    "multipleLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "elementTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The data type of the items in the list.",
            "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
          },
          "items" : {
            "type" : "array",
            "xml" : {
              "name" : "item"
            },
            "description" : "The list of specified values. NOTE: All values must be of the same data type.",
            "items" : {
              "$ref" : "#/definitions/literal"
            }
          }
        },
        "description" : "A literal which represents multiple values. All of these component values must be of the same data type.",
        "xml" : {
          "name" : "multipleLiteral"
        }
      } ]
    },
    "secureString" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "The string value."
          }
        },
        "description" : "Wraps a secured string value, such as a password.",
        "xml" : {
          "name" : "secureString"
        }
      } ]
    },
    "stringLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "The string value."
          }
        },
        "description" : "Wraps a String value.",
        "xml" : {
          "name" : "stringLiteral"
        }
      } ]
    },
    "timeSpan" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "unit" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "description" : "The unit of measure for the time span. e.g: days.",
          "enum" : [ "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS", "WEEKS", "MONTHS", "YEARS" ]
        },
        "amount" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          },
          "description" : "The amount for the time span."
        }
      },
      "description" : "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days.",
      "xml" : {
        "name" : "timeSpan"
      }
    },
    "value" : {
      "type" : "object",
      "properties" : {
        "underlyingValue" : {
          "$ref" : "#/definitions/literal"
        },
        "label" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "value"
      }
    }
  }
}