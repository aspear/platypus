{
  "swagger" : "2.0",
  "info" : {
    "description" : "# XaaS (Advanced Service Designer) Service API Specification\n\n## What Is the XaaS REST API? \n\nThe advanced service designer (XaaS) REST API enables creation of custom services by exposing any vRealize Orchestrator (vRO) workflow to vRA's Service Catalog to provide custom functionality.\n\n## Typical Use Cases\n\nYou can use the XaaS REST API \nto:\n\n* Create XaaS Custom Resources, Blueprints, Resource Mappings and Actions.\n\n* Import and export XaaS components, such as custom resources, blueprints, and so on, from one vRealize Automation system to another. \n\nAdministrative users use the advanced designer service as follows:\n\n* Tenant administrators create and manage the workflow subscriptions that are specific to their tenant.\n\n* System administrators create and manage system workflow subscriptions.\n\nThe created system workflow subscriptions are active for events in any tenant and for system events.\n\n## Key Concepts\n\nThe XaaS domain model includes four basic objects - resource types, resource mappings, \nservice blueprints and resource actions.\n\n### Resource Type\n \nA resource type provides an abstraction of a resource from the physical and virtual IT world - a virtual \nmachine, a user, an account, a network card, and so on.\n\nTo enable ASD to use resources, you must create a resource type object in XaaS. \n\n### Service Blueprint\n\nA service blueprint is a blueprint for a service. It is based on a vRO workflow, but its request \nform (used to get input from users of the service) can be customized. \n\nThe key feature of service blueprints is that, when you request them, they produce (provision) resources \nof a spcified resource type. \n\n### Resource Mapping\n\nA resource mapping is a workflow that maps one resource type to another resource type. It allows resource actions to be performed over types that \ncan be mapped. \n\n### Resource Actions\n\nLike service blueprints, resource actions are built around \na vRO workflow. They have a resource as an input, and usually are used to change the state of a resource. They are also referred as \"2nd day operations.\" \n\n### Import and Export of Content\n\nXaaS is a provider of content, and if CMS is present, \nXaaS objects can be registered as content. After an ASD object is registered, it can be exported/imported \ncentrally from CMS. Note that this is not to be confused with ASD internal content management -- this feature is deprecated.\n\nFor more detailed usage information on importing and exporting content, see the \"Import and Export Content\" use case in the \"Use Cases\" chapter of the *vRA Programming Guide*.\n\n### Workflow Subscriptions \n\nWorkflow subscriptions use the event broker service to monitor the registered services for event messages in vRealize Automation, and then run a specified vRealize Orchestrator workflow when the conditions in the subscription are met.\n\nTo configure the subscription, you specify the event topic, the triggering conditions, and the workflow that runs when triggered.\n\nTenant administrators can create and manage the workflow subscriptions that are specific to their tenant. The system administrator can create and manage system workflow subscriptions. The created system workflow subscriptions are active for events in any tenant and for system events.\n",
    "version" : "7.6.0-SNAPSHOT",
    "title" : "Advanced Designer Service API"
  },
  "basePath" : "/advanced-designer-service",
  "tags" : [ {
    "name" : "catalog-callback-operation"
  }, {
    "name" : "create"
  }, {
    "name" : "create-operation"
  }, {
    "name" : "delete-operation"
  }, {
    "name" : "get"
  }, {
    "name" : "get-all"
  }, {
    "name" : "get-all-by-hrid"
  }, {
    "name" : "get-operation"
  }, {
    "name" : "list-operation"
  }, {
    "name" : "policies"
  }, {
    "name" : "policy"
  }, {
    "name" : "update"
  }, {
    "name" : "update-operation"
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/api/endpoints" : {
      "get" : {
        "tags" : [ "get-operation" ],
        "summary" : "Gets all endpoint configuration objects",
        "description" : "Gets all endpoint configuration objects matching the filtering criteria of PageAndSortRequest",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "A base URI used for generating the navigation links in page response",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "uri"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "create-operation" ],
        "summary" : "Creates an endpoint configuration object",
        "description" : "Creates an endpoint configuration object",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The endpoint configuration to save",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CsEndpointData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "201" : {
            "description" : ""
          }
        }
      }
    },
    "/api/endpoints/{endpointId}" : {
      "delete" : {
        "tags" : [ "delete-operation" ],
        "summary" : "Deletes an endpoint configuration object",
        "description" : "Deletes an endpoint configuration object by primary key",
        "parameters" : [ {
          "name" : "endpointId",
          "in" : "path",
          "description" : "The id of the endpoint configuration to delete within the current tenant",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      }
    },
    "/api/event-broker/subscriptions" : {
      "get" : {
        "tags" : [ "get-operation" ],
        "summary" : "Gets workflow subscriptions matching the filtering criteria",
        "description" : "Gets workflow subscriptions matching the filtering criteria",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "A base URI used for generating the navigation links in page response",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "uri"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "create-operation" ],
        "summary" : "Creates a workflow subscription",
        "description" : "Creates a workflow subscription",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The workflow subscription to create",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WorkflowSubscription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "201" : {
            "description" : ""
          }
        }
      }
    },
    "/api/event-broker/subscriptions/{subscriptionId}" : {
      "get" : {
        "tags" : [ "get-operation" ],
        "summary" : "Gets workflow subscription by id",
        "description" : "Gets workflow subscription by id",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The workflow subscription id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      },
      "put" : {
        "tags" : [ "update-operation" ],
        "summary" : "Updates workflow subscription",
        "description" : "Updates workflow subscription",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The id of the workflow subscription instance to update",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The new state of the workflow subscription",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WorkflowSubscription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : ""
          }
        }
      },
      "delete" : {
        "tags" : [ "delete-operation" ],
        "summary" : "Deletes a workflow subscription",
        "description" : "Deletes a workflow subscription by its primary key",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The primary key of the workflow subscription to delete",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      }
    },
    "/api/forms" : {
      "get" : {
        "tags" : [ "get-operation" ],
        "summary" : "Gets all forms matching the filtering criteria",
        "description" : "Retrieves all forms matching the filtering criteria of PageAndSortRequest",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "A base URI used for generating the navigation links in page response",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "uri"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "create-operation" ],
        "summary" : "Creates a generic form",
        "description" : "Creates a generic form",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The form to save",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GenericForm"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "201" : {
            "description" : ""
          }
        }
      }
    },
    "/api/forms/{formId}/{bindingId}" : {
      "get" : {
        "tags" : [ "catalog-callback-operation" ],
        "summary" : "Get form",
        "description" : "Retrieve an editable form for submitting a request for the specified blueprint catalog item.",
        "parameters" : [ {
          "name" : "formId",
          "in" : "path",
          "description" : "formId specifying the type of the form to be built",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "bindingId",
          "in" : "path",
          "description" : "bindingId identifier",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/forms/{formId}/{bindingId}/update" : {
      "post" : {
        "tags" : [ "catalog-callback-operation" ],
        "summary" : "Get form batch update",
        "description" : "Retrieves the update to the form in response to change in one of the form's field",
        "parameters" : [ {
          "name" : "formId",
          "in" : "path",
          "description" : "form identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "bindingId",
          "in" : "path",
          "description" : "binding identifier",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "changes to the form elements",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/batchElementUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/formUpdateResponse"
            }
          }
        }
      }
    },
    "/api/forms/{formId}/{bindingId}/{elementId}/values" : {
      "post" : {
        "tags" : [ "catalog-callback-operation" ],
        "summary" : "Get form element values",
        "description" : "Retrieves a paged list of permissible values that can be assigned to a specific field",
        "parameters" : [ {
          "name" : "formId",
          "in" : "path",
          "description" : "form identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "bindingId",
          "in" : "path",
          "description" : "binding identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "elementId",
          "in" : "path",
          "description" : "An identifier of the element within the form",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Specifies information required to complete the request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/elementValuesRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/elementValues"
            }
          }
        }
      }
    },
    "/api/forms/{genericFormId}" : {
      "get" : {
        "tags" : [ "get-operation" ],
        "summary" : "Gets a form",
        "description" : "Retrieves an existing generic form",
        "parameters" : [ {
          "name" : "genericFormId",
          "in" : "path",
          "description" : "Primary key of the from to retrieve",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GenericForm"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "update-operation" ],
        "summary" : "Updates a form",
        "description" : "Updates an existing generic form",
        "parameters" : [ {
          "name" : "genericFormId",
          "in" : "path",
          "description" : "Primary key of the instance to update",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The form entity to use for the update operation",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GenericForm"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "delete-operation" ],
        "summary" : "Deletes a form",
        "description" : "Deletes an existing generic form",
        "parameters" : [ {
          "name" : "genericFormId",
          "in" : "path",
          "description" : "Primary key of the instance to delete",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      }
    },
    "/api/inventory/tenant/{tenantId}/resource/{resourceId}/tags" : {
      "get" : {
        "tags" : [ "get-operation" ],
        "summary" : "Get Tags of the Catalog Resource Item",
        "description" : "Get Tags of the Resource in the VRO for the given Catalog Resource",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "The tenantId",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "resourceId",
          "in" : "path",
          "description" : "Id of the catalogProvider Resource",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TagInstanceList"
            }
          }
        }
      }
    },
    "/api/inventory/types" : {
      "get" : {
        "tags" : [ "get-operation" ],
        "summary" : "Gets all inventory types matching the filtering criteria",
        "description" : "Gets all inventory types matching the filtering criteria",
        "parameters" : [ {
          "name" : "endpointType",
          "in" : "query",
          "description" : "The name of the plugin",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "typeName",
          "in" : "query",
          "description" : "The name of the type",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeSimpleTypes",
          "in" : "query",
          "description" : "If to include the simple types",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/policies" : {
      "get" : {
        "tags" : [ "policy", "get", "get-all" ],
        "summary" : "Get policies",
        "description" : "Get policies by pages.",
        "operationId" : "getPolicies",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with Policy on pages",
            "schema" : {
              "$ref" : "#/definitions/Page"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "policy", "create" ],
        "summary" : "Create a Policy",
        "description" : "Create a Policy.",
        "operationId" : "createPolicy",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Policy object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/policyDefinition"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "'Created' with Policy object that is created",
            "schema" : {
              "$ref" : "#/definitions/policyDefinition"
            }
          }
        }
      }
    },
    "/api/policies/hrid/{hrid}" : {
      "get" : {
        "tags" : [ "policy", "get" ],
        "summary" : "Get Policy by human-readable ID",
        "description" : "Retrieve the details of a specified Policy.",
        "parameters" : [ {
          "name" : "hrid",
          "in" : "path",
          "description" : "Policy human-readable ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the Policy",
            "schema" : {
              "$ref" : "#/definitions/policyDefinition"
            }
          },
          "404" : {
            "description" : "'Not found' if no Policy with provided hrid"
          }
        }
      }
    },
    "/api/policies/hrids" : {
      "get" : {
        "tags" : [ "policy", "get", "get-all-by-hrid" ],
        "summary" : "Gets policies matching the filtering criteria",
        "description" : "Gets policies matching the filtering criteria.",
        "operationId" : "getPoliciesByHrid",
        "parameters" : [ {
          "name" : "hrid",
          "in" : "query",
          "description" : "Policy human-readable ID filter string",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with Policy on pages",
            "schema" : {
              "$ref" : "#/definitions/Page"
            }
          }
        }
      }
    },
    "/api/policies/{id}" : {
      "get" : {
        "tags" : [ "policy", "get" ],
        "summary" : "Get policy by id",
        "description" : "Retrieve the details of a specified Policy.",
        "operationId" : "getPolicy",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a policy.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the Policy",
            "schema" : {
              "$ref" : "#/definitions/policyDefinition"
            }
          },
          "404" : {
            "description" : "'Not found' if no Policy with provided id"
          }
        }
      },
      "put" : {
        "tags" : [ "policy", "create", "update" ],
        "summary" : "Update or create a Policy",
        "description" : "Update or create a Policy.",
        "operationId" : "updateOrCreatePolicy",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a policy.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Policy object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/policyDefinition"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with Policy object that is updated",
            "schema" : {
              "$ref" : "#/definitions/policyDefinition"
            }
          },
          "201" : {
            "description" : "'Created' with Policy object that is created"
          }
        }
      },
      "delete" : {
        "tags" : [ "policies" ],
        "summary" : "Deletes a policy",
        "description" : "Deletes a policy by id.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the resource",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resourceOperations" : {
      "get" : {
        "tags" : [ "get-operation" ],
        "summary" : "Retrieves resource operations",
        "description" : "Retrieves resource operations by filtering it based on PageAndSortRequest parameter",
        "operationId" : "getResourceOperations",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "A base URI used for generating the navigation links in page response",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "uri"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "create-operation" ],
        "summary" : "Creates a resource operation",
        "description" : "Creates a resource operation",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The resource operation to create",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CsResourceOperation"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "201" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resourceOperations/{resourceOperationId}" : {
      "get" : {
        "tags" : [ "get-operation" ],
        "summary" : "Retrieves a resource operation",
        "description" : "Retrieves a resource operation by primary key",
        "parameters" : [ {
          "name" : "resourceOperationId",
          "in" : "path",
          "description" : "The id of resource operation to retrieve",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CsResourceOperation"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "update-operation" ],
        "summary" : "Updates a resource operation",
        "description" : "Updates a resource operation by primary key within the current tenant",
        "operationId" : "updateResourceOperation",
        "parameters" : [ {
          "name" : "resourceOperationId",
          "in" : "path",
          "description" : "The id of resource operation to update",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The entity to use for updating the state",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CsResourceOperation"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : ""
          }
        }
      },
      "delete" : {
        "tags" : [ "delete-operation" ],
        "summary" : "Deletes a resource operation",
        "description" : "Deletes a resource operation by primary key",
        "operationId" : "deleteResourceOperation",
        "parameters" : [ {
          "name" : "resourceOperationId",
          "in" : "path",
          "description" : "The id of resource operation to delete",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resourceOperations/{resourceOperationId}/clone" : {
      "post" : {
        "tags" : [ "create-operation" ],
        "summary" : "Creates a clone of a resource operation",
        "description" : "Creates a clone of a resource operation found by primary key within the current tenant",
        "parameters" : [ {
          "name" : "resourceOperationId",
          "in" : "path",
          "description" : "The id of resource operation to clone",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resourceOperations/{resourceOperationId}/status" : {
      "put" : {
        "tags" : [ "update-operation" ],
        "summary" : "Updates the status of a resource operation",
        "description" : "Updates the publish status of a resource operation found by primary key within the current tenant.",
        "parameters" : [ {
          "name" : "resourceOperationId",
          "in" : "path",
          "description" : "The id of resource operation to publish/unpublish to/from catalog",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The new status to set",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources" : {
      "post" : {
        "summary" : "Create a resource",
        "description" : "Create/Import an existing vRO resource in ASD and publish it to the Catalog",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "resource to import in the catalog",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/catalogItemResource"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/catalogItemResource"
            }
          }
        }
      }
    },
    "/api/resources/{resourceId}" : {
      "get" : {
        "summary" : "Get a resource",
        "description" : "Retrieve an ASD resource published in the catalog by ASD id",
        "parameters" : [ {
          "name" : "resourceId",
          "in" : "path",
          "description" : "the resource identifier",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      },
      "put" : {
        "summary" : "Update a resource",
        "description" : "Update an ASD resource published in the catalog",
        "parameters" : [ {
          "name" : "resourceId",
          "in" : "path",
          "description" : "the resource identifier",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the resource to update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/catalogItemResource"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      },
      "delete" : {
        "summary" : "Delete a resource",
        "description" : "Delete an ASD resource published in the catalog",
        "parameters" : [ {
          "name" : "resourceId",
          "in" : "path",
          "description" : "the resource identifier",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/schema-service/{classId}/schema/values" : {
      "post" : {
        "tags" : [ "get-operation" ],
        "summary" : "Get the permissible values of a field in the schema",
        "description" : "Get the permissible values of a field in the schema associated with the given class id and typeFilter.",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The class of object",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The element's values. Specifies information required to complete the request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/elementValuesRequest"
          }
        }, {
          "name" : "asTree",
          "in" : "query",
          "description" : "An optional request parameter indicating if the values should be load hierarchically.",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/elementValues"
            }
          }
        }
      }
    },
    "/api/scriptActions" : {
      "get" : {
        "tags" : [ "get-operation" ],
        "summary" : "Searches for ScriptActionSummary objects",
        "description" : "Searches for {@link ScriptActionSummary}s by containment of name, description and categoryName.",
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "Optional. The name of a script action",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "categoryName",
          "in" : "query",
          "description" : "Optional. The name of the category that houses a script action",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "description",
          "in" : "query",
          "description" : "Optional. The description of a script action",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/scriptActions/categories" : {
      "get" : {
        "tags" : [ "get-operation" ],
        "summary" : "Retrieves all ScriptActionCategory categories",
        "description" : "Retrieves all ScriptActionCategory categories",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/scriptActions/categories/{categoryName}/scriptActions" : {
      "get" : {
        "tags" : [ "get-operation" ],
        "summary" : "Retrieves the ScriptActionSummary objects underneath a specified category.",
        "description" : "Retrieves the ScriptActionSummary objects underneath a specified category.",
        "parameters" : [ {
          "name" : "categoryName",
          "in" : "path",
          "description" : "Optional. The name of the category that houses a script action",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/blueprints" : {
      "get" : {
        "tags" : [ "list-operation" ],
        "summary" : "Lists all service blueprints",
        "description" : "Lists all service blueprints in the current tenant matching the criteria in PageAndSortReques parameter.",
        "operationId" : "getBlueprints",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "A base URI used for generating the navigation links in page response",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "uri"
          }
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "The tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "create-operation" ],
        "summary" : "Creates service blueprint",
        "description" : "Creates service blueprint in the current tenant.",
        "operationId" : "createServiceBlueprint",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "The tenant for which the blueprint will be created",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The blueprint to create",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ServiceBlueprint"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "201" : {
            "description" : ""
          }
        }
      }
    },
    "/api/tenants/{tenantId}/blueprints/{blueprintId}" : {
      "get" : {
        "tags" : [ "get-operation" ],
        "summary" : "Gets a service blueprint",
        "description" : "Retrieves a service blueprint by id.",
        "operationId" : "getBlueprint",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "The tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "blueprintId",
          "in" : "path",
          "description" : "The id of the blueprint to retrieve within the current tenant",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ServiceBlueprint"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "update-operation" ],
        "summary" : "Updates a service blueprint",
        "description" : "Updates a service blueprint with a given id.",
        "operationId" : "updateBlueprint",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "The tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "blueprintId",
          "in" : "path",
          "description" : "The id of the blueprint to update within the current tenant",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "New state of the blueprint object to use for the update operation",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ServiceBlueprint"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : ""
          }
        }
      },
      "delete" : {
        "tags" : [ "delete-operation" ],
        "summary" : "Deletes a service blueprint",
        "description" : "Deletes a service blueprint by id in the current tenant.",
        "operationId" : "deleteBlueprint",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "The tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "blueprintId",
          "in" : "path",
          "description" : "The id of the blueprint to delete",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      }
    },
    "/api/tenants/{tenantId}/blueprints/{blueprintId}/clone" : {
      "post" : {
        "tags" : [ "create-operation" ],
        "summary" : "Clones a service blueprint",
        "description" : "Creates a new blueprint (aka. clones) based on an existing service blueprint with a given id.",
        "operationId" : "cloneBlueprint",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "The tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "blueprintId",
          "in" : "path",
          "description" : "The id of the blueprint on which to base the cloned object",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : ""
          }
        }
      }
    },
    "/api/tenants/{tenantId}/blueprints/{blueprintId}/status" : {
      "put" : {
        "tags" : [ "update-operation" ],
        "summary" : "Changes the published status of a blueprint",
        "description" : "Changes the published status of a blueprint with a given id.",
        "operationId" : "updateBlueprintStatus",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "The tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "blueprintId",
          "in" : "path",
          "description" : "Primary key of the blueprint to update",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The new status to set",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      }
    },
    "/api/tenants/{tenantId}/configurations" : {
      "get" : {
        "tags" : [ "get-operation" ],
        "summary" : "Gets all configurations",
        "description" : "Gets all configurations",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "The tenant",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ConfigurationResources"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "create-operation" ],
        "summary" : "Creates or updates configuration",
        "description" : "Creates or updates configuration",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "The tenant",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "A valid configuration to persist",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/configuration"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/tenants/{tenantId}/configurations/default/status" : {
      "put" : {
        "tags" : [ "get-operation" ],
        "summary" : "Tests default configuration for communication with vRO",
        "description" : "Returns status of the tested communication between ASD and vRO for the default configuration",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "The tenant",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/tenants/{tenantId}/configurations/status" : {
      "put" : {
        "tags" : [ "get-operation" ],
        "summary" : "Tests provided configuration for communication with vRO",
        "description" : "Returns status of the tested communication between ASD and vRO with passed in as argument configuration",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "The tenant",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "A valid configuration object to test for connectivity with vRO",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/configuration"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/tenants/{tenantId}/configurations/{configurationId}" : {
      "get" : {
        "tags" : [ "get-operation" ],
        "summary" : "Gets a configuration",
        "description" : "Gets a configuration by primary key",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "The tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "configurationId",
          "in" : "path",
          "description" : "The id of the configuration object to retrieve.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/configuration"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "delete-operation" ],
        "summary" : "Deletes a configuration",
        "description" : "Deletes a configuration by primary key",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "The tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "configurationId",
          "in" : "path",
          "description" : "The id of the configuration object to delete",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      }
    },
    "/api/tenants/{tenantId}/types" : {
      "get" : {
        "tags" : [ "list-operation" ],
        "summary" : "Lists resource types or resource mappings",
        "description" : "Lists resource types or resource mappings matching the criteria of passed in PageAndSortRequest parameter",
        "operationId" : "listResourceTypes",
        "parameters" : [ {
          "name" : "external",
          "in" : "query",
          "description" : "Flag indicating whether to get resource mappings",
          "required" : false,
          "type" : "boolean"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "A base URI used for generating the navigation links in page response",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "uri"
          }
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "The tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "create-operation" ],
        "summary" : "Creates a resource type or resource mapping",
        "description" : "Creates a resource type or resource mapping in the current tenant.",
        "operationId" : "createResourceType",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "The tenant",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The resource type or mapping to create",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CSResourceType"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "201" : {
            "description" : ""
          }
        }
      }
    },
    "/api/tenants/{tenantId}/types/detailsForm" : {
      "put" : {
        "tags" : [ "get-operation" ],
        "summary" : "Gets a details form",
        "description" : "Gets the details form for the passed in inventory type",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The inventory type for which to build the details form",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InventoryType"
          }
        }, {
          "name" : "tenantId",
          "in" : "path",
          "description" : "tenantId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/types/{resourceTypeId}" : {
      "get" : {
        "tags" : [ "get-operation" ],
        "summary" : "Gets a resource type or resource mapping",
        "description" : "Gets a resource type or resource mapping by id",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "The tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "resourceTypeId",
          "in" : "path",
          "description" : "Primary key of the object to retrieve",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CSResourceType"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "delete-operation" ],
        "summary" : "Deletes resource type or resource mapping",
        "description" : "Deletes resource type or resource mapping in the current tenant.",
        "operationId" : "deleteResourceType",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "The tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "resourceTypeId",
          "in" : "path",
          "description" : "The id of the object to delete.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      }
    },
    "/api/tenants/{tenantId}/types/{resourceTypeId}/resourceCount" : {
      "get" : {
        "tags" : [ "get-operation" ],
        "summary" : "Gets the count of active resources",
        "description" : "Retrieves active resources count for given resourceTypeId for all users",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "The tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "resourceTypeId",
          "in" : "path",
          "description" : "The id of resource type for which to count the resources",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResourceIntegerLiteral"
            }
          }
        }
      }
    },
    "/api/valueDefinitions" : {
      "get" : {
        "tags" : [ "get-operation" ],
        "summary" : "Returns a page of ValueDefinition objects",
        "description" : "Returns a page of ValueDefinition objects",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Ignore, for internal use only. A base URI used for generating the navigation links in page response",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "uri"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "create-operation" ],
        "summary" : "Creates a ValueDefinition",
        "description" : "Creates a ValueDefinition",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The ValueDefinition to be created",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ValueDefinition"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ValueDefinition"
            }
          },
          "201" : {
            "description" : ""
          }
        }
      }
    },
    "/api/valueDefinitions/key/{key}/value" : {
      "post" : {
        "tags" : [ "get-operation" ],
        "summary" : "Retrieves the value behind the applicable {@link ValueDefinition} for the given key",
        "description" : "Retrieves the value behind the applicable {@link ValueDefinition} for the given key, value and the scope of the current request (System or Tenant). Based on the type of the definition it could retrieve the value from an external system or return a statically value. Value definitions marked as deleted (see {@link ValueDefinition#isDeleted()}) also looked up for value retrieval.",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "The key of the persisted ValueDefinition object",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The context to be applied when retrieving the value.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/literalMap"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/valueDefinitions/key/{key}/values" : {
      "post" : {
        "tags" : [ "get-operation" ],
        "summary" : "Retrieves the values behind the applicable ValueDefinition object for the given key",
        "description" : "Retrieves the values behind the applicable {@link ValueDefinition} for the given key, value and the scope of the current request (System or Tenant). Based on the type of the definition it could retrieve the value from an external system or return a statically value. Value definitions marked as deleted looked up for value retrieval.",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "The key of the persisted ValueDefinition object",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The context to be applied when retrieving the value.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/literalMap"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/valueDefinitions/{id}" : {
      "get" : {
        "tags" : [ "get-operation" ],
        "summary" : "Gets a ValueDefinition",
        "description" : "Gets a ValueDefinition by primary key",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The primary key of the entity to be retrieved",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ValueDefinition"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "update-operation" ],
        "summary" : "Updates or creates a ValueDefinition",
        "description" : "Updates or creates a ValueDefinition",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The primary key of the entity to be updated",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ValueDefinition to be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ValueDefinition"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "delete-operation" ],
        "summary" : "Deletes a ValueDefinition",
        "description" : "Deletes a ValueDefinition by primary key",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The primary key of the entity to be deleted",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      }
    },
    "/api/vco/import" : {
      "post" : {
        "tags" : [ "update-operation" ],
        "summary" : "Imports a vRO package",
        "description" : "Imports a vRO package into the vRO instance configured for the current tenant",
        "operationId" : "importVroPackage",
        "parameters" : [ {
          "name" : "fileupload",
          "in" : "formData",
          "description" : "The package to import",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          },
          "201" : {
            "description" : ""
          }
        }
      }
    },
    "/api/workflowExecution/{catalogRequestId}" : {
      "get" : {
        "tags" : [ "get-operation" ],
        "summary" : "Gets the workflow execution data",
        "description" : "Gets the workflow execution data for given catalogRequestId",
        "parameters" : [ {
          "name" : "catalogRequestId",
          "in" : "path",
          "description" : "The catalog request id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/XaasRequestWorkflowInfo"
            }
          }
        }
      }
    },
    "/api/workflows/{workflowId}" : {
      "get" : {
        "tags" : [ "get-operation" ],
        "summary" : "Gets a workflow",
        "description" : "Gets a workflow by id",
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "description" : "The workflow id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/workflow"
            }
          }
        }
      }
    },
    "/api/workflows/{workflowId}/blueprint" : {
      "get" : {
        "tags" : [ "get-operation" ],
        "summary" : "Generates a service blueprint based on a workflow",
        "description" : "Generates a service blueprint based on a workflow",
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "description" : "The workflow id on which to base the service blueprint",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/workflows/{workflowId}/fields" : {
      "get" : {
        "tags" : [ "get-operation" ],
        "summary" : "Gets workflow fields",
        "description" : "Gets workflow fields",
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "description" : "The workflow id for which to get the workflow fields",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "usageClass",
          "in" : "query",
          "description" : "The class for which the fields will be used. Needed for configuring the state of the returned fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/workflows/{workflowId}/form" : {
      "get" : {
        "tags" : [ "get-operation" ],
        "summary" : "Gets the workflow form",
        "description" : "Gets the workflow form",
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "description" : "The workflow id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "typeName",
          "in" : "query",
          "description" : "The name of the type",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "excludedField",
          "in" : "query",
          "description" : "The fields to exclude",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/workflows/{workflowId}/outputs" : {
      "get" : {
        "tags" : [ "get-operation" ],
        "summary" : "Gets output fields of a workflow",
        "description" : "Gets output fields of a workflow",
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "description" : "The workflow id for which to get the workflow output fields",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "usageClass",
          "in" : "query",
          "description" : "The class for which the fields will be used. Needed for filtering fields and configuring their state.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/workflows/{workflowId}/resourceOperation" : {
      "put" : {
        "tags" : [ "get-operation" ],
        "summary" : "Generates a resource opreation based on a workflow",
        "description" : "Generates a resource opreation based on a workflow",
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "description" : "The workflow id on which to base the resource operation",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The input parameter for the resource operation",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CsParameter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/workitems" : {
      "post" : {
        "tags" : [ "create-operation" ],
        "summary" : "Creates a work item",
        "description" : "Creates a work item for collecting user input when a vRO workflow is waiting for a user interaction",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The interaction for which to create the work item",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/interactionWorkItem"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : ""
          }
        }
      }
    }
  },
  "definitions" : {
    "AndClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "subClauses" : {
            "type" : "array",
            "xml" : {
              "name" : "clause"
            },
            "items" : {
              "$ref" : "#/definitions/Clause"
            }
          }
        }
      } ]
    },
    "BooleanLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "description" : "Wraps a boolean value.",
        "xml" : {
          "name" : "booleanLiteral"
        }
      } ]
    },
    "CSResourceType" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "$ref" : "#/definitions/TenantedUuid"
        },
        "access" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "vcoType" : {
          "type" : "string"
        },
        "tenantId" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "providerId" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "detailsForm" : {
          "$ref" : "#/definitions/formScenario"
        },
        "externalTypeId" : {
          "type" : "string"
        },
        "externalTypeName" : {
          "type" : "string"
        },
        "mappingWorkflowId" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "mappingWorkflow" : {
          "$ref" : "#/definitions/workflow"
        },
        "mappingScriptActionFqn" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "mappingScriptAction" : {
          "$ref" : "#/definitions/scriptAction"
        },
        "targetCriteria" : {
          "$ref" : "#/definitions/Clause"
        },
        "version" : {
          "$ref" : "#/definitions/Version"
        },
        "listLayout" : {
          "$ref" : "#/definitions/layout"
        },
        "categoryId" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "reservationTypeId" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "builtIn" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        }
      },
      "xml" : {
        "name" : "CSResourceType",
        "namespace" : "http://www.vmware.com/vcac/schema/advanced-designer-service/v7.0"
      }
    },
    "CallbackEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object"
      } ]
    },
    "Clause" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "CoalesceEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "arguments" : {
            "type" : "array",
            "xml" : {
              "name" : "argument",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "ComplexDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object",
        "properties" : {
          "schema" : {
            "$ref" : "#/definitions/Schema"
          }
        }
      } ]
    },
    "ComplexEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "componentTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "typeFilter" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "values" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "ConditionalEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "cases" : {
            "type" : "array",
            "xml" : {
              "name" : "case"
            },
            "items" : {
              "$ref" : "#/definitions/ConditionalEvaluatorCase"
            }
          },
          "defaulValue" : {
            "$ref" : "#/definitions/Evaluator"
          }
        }
      } ]
    },
    "ConditionalEvaluatorCase" : {
      "type" : "object",
      "properties" : {
        "condition" : {
          "$ref" : "#/definitions/Clause"
        },
        "value" : {
          "$ref" : "#/definitions/Evaluator"
        }
      }
    },
    "ConfigurationResources" : {
      "type" : "object",
      "properties" : {
        "links" : {
          "type" : "array",
          "xml" : {
            "name" : "links",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "content" : {
          "type" : "array",
          "xml" : {
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/configuration"
          }
        }
      },
      "xml" : {
        "name" : "ConfigurationResources"
      }
    },
    "ConstantClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/booleanLiteral"
          }
        }
      } ]
    },
    "ConstantValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/literal"
          }
        }
      } ]
    },
    "Constraint" : {
      "type" : "object",
      "required" : [ "value" ],
      "discriminator" : "type",
      "properties" : {
        "value" : {
          "$ref" : "#/definitions/Evaluator"
        }
      }
    },
    "ContainsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "ContextPermissibleValueList" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PermissibleValueList"
      }, {
        "type" : "object"
      } ]
    },
    "CriteriaOperator" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "CsEndpointData" : {
      "type" : "object",
      "required" : [ "name", "namespace" ],
      "properties" : {
        "namespace" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "values" : {
          "$ref" : "#/definitions/literalMap"
        }
      },
      "xml" : {
        "name" : "CsEndpointData"
      }
    },
    "CsParameter" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "name" : {
          "type" : "string"
        },
        "resourceType" : {
          "$ref" : "#/definitions/CSResourceType"
        }
      },
      "xml" : {
        "name" : "CsParameter",
        "namespace" : "http://www.vmware.com/vcac/schema/advanced-designer-service/v7.0"
      }
    },
    "CsResource" : {
      "type" : "object",
      "required" : [ "vcoId", "vcoType" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "vcoType" : {
          "type" : "string"
        },
        "vcoId" : {
          "type" : "string"
        }
      }
    },
    "CsResourceOperation" : {
      "type" : "object",
      "required" : [ "name", "status", "workflowId" ],
      "properties" : {
        "id" : {
          "$ref" : "#/definitions/TenantedUuid"
        },
        "access" : {
          "type" : "string"
        },
        "workflowId" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2000
        },
        "catalogRequestInfoHidden" : {
          "type" : "boolean",
          "default" : false
        },
        "forms" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/formScenario"
          }
        },
        "status" : {
          "type" : "string",
          "enum" : [ "DRAFT", "PUBLISHED", "RETIRED" ]
        },
        "statusName" : {
          "type" : "string"
        },
        "version" : {
          "$ref" : "#/definitions/Version"
        },
        "inputParameter" : {
          "$ref" : "#/definitions/CsParameter"
        },
        "outputParameter" : {
          "$ref" : "#/definitions/CsParameter"
        },
        "disposal" : {
          "type" : "boolean",
          "default" : false
        },
        "targetCriteria" : {
          "$ref" : "#/definitions/Clause"
        },
        "iconId" : {
          "type" : "string"
        },
        "provisionAsChild" : {
          "type" : "boolean",
          "default" : false
        },
        "builtIn" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        }
      },
      "xml" : {
        "name" : "CsResourceOperation",
        "namespace" : "http://www.vmware.com/vcac/schema/advanced-designer-service/v7.0"
      }
    },
    "CustomPropertyDefinitionMetadata" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object",
        "required" : [ "field" ],
        "properties" : {
          "field" : {
            "$ref" : "#/definitions/Field"
          }
        }
      } ]
    },
    "CustomValidationConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "DataType" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "typeId" : {
          "type" : "string",
          "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
        }
      }
    },
    "DefaultValueBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "DesignerDynamicLayoutReference" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DesignerLayoutReference"
      }, {
        "type" : "object",
        "required" : [ "dynamicLayoutContext" ],
        "properties" : {
          "dynamicLayoutContext" : {
            "$ref" : "#/definitions/DynamicValueContext"
          }
        }
      } ]
    },
    "DesignerLayout" : {
      "type" : "object",
      "properties" : {
        "pages" : {
          "type" : "array",
          "xml" : {
            "name" : "page",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/DesignerLayoutPage"
          }
        }
      }
    },
    "DesignerLayoutCell" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "size" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "DesignerLayoutExtension" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DesignerLayoutCell"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "extensionId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "extensionPointId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "fieldPrefix" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          }
        },
        "xml" : {
          "name" : "DesignerLayoutExtension"
        }
      } ]
    },
    "DesignerLayoutField" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DesignerLayoutCell"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "label" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "orderIndex" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dataType" : {
            "$ref" : "#/definitions/DataType"
          },
          "displayAdvice" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "TEXTBOX", "HYPERLINK", "EMAIL", "TEXTAREA", "DATE_TIME_PICKER", "CHECKBOX", "YES_NO", "CHECKBOX_GROUP", "DUAL_LIST", "RADIO_GROUP", "DROPDOWN", "LIST", "SEARCHER", "TREE", "FORM", "IMAGE", "SLIDER", "DATA_TABLE", "VALUE_PICKER", "CONFIRM_PASSWORD" ]
          },
          "permissibleValues" : {
            "$ref" : "#/definitions/PermissibleValueList"
          },
          "permissibleValuesContext" : {
            "$ref" : "#/definitions/DynamicValueContext"
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          },
          "initialStaticState" : {
            "$ref" : "#/definitions/ElementState"
          },
          "labelDisplaySize" : {
            "type" : "integer",
            "format" : "int32",
            "xml" : {
              "attribute" : true
            }
          },
          "detailLayout" : {
            "$ref" : "#/definitions/DesignerLayoutReference"
          },
          "customField" : {
            "type" : "boolean",
            "default" : false
          },
          "staticField" : {
            "type" : "boolean",
            "default" : false
          },
          "refreshOnChange" : {
            "type" : "boolean",
            "default" : false
          },
          "extensionRendererContext" : {
            "$ref" : "#/definitions/ExtensionRendererContext"
          },
          "isMultiValued" : {
            "type" : "boolean",
            "xml" : {
              "attribute" : true
            },
            "default" : false
          },
          "columns" : {
            "type" : "array",
            "xml" : {
              "name" : "column",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/DesignerLayoutField"
            }
          },
          "errors" : {
            "type" : "array",
            "xml" : {
              "name" : "error",
              "wrapped" : true
            },
            "items" : {
              "type" : "string"
            }
          }
        },
        "xml" : {
          "name" : "DesignerLayoutField"
        }
      } ]
    },
    "DesignerLayoutPage" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "label" : {
          "type" : "string"
        },
        "state" : {
          "$ref" : "#/definitions/ElementState"
        },
        "sections" : {
          "type" : "array",
          "xml" : {
            "name" : "section",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/DesignerLayoutSection"
          }
        }
      }
    },
    "DesignerLayoutPlaceholderCell" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DesignerLayoutCell"
      }, {
        "type" : "object"
      } ]
    },
    "DesignerLayoutReference" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "DesignerLayoutRow" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "xml" : {
            "name" : "item",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/DesignerLayoutCell"
          }
        }
      }
    },
    "DesignerLayoutSection" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "label" : {
          "type" : "string"
        },
        "designerHidden" : {
          "type" : "boolean",
          "default" : false
        },
        "state" : {
          "$ref" : "#/definitions/ElementState"
        },
        "rows" : {
          "type" : "array",
          "xml" : {
            "name" : "row",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/DesignerLayoutRow"
          }
        }
      }
    },
    "DesignerLayoutText" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DesignerLayoutCell"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "value" : {
            "type" : "string"
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          }
        }
      } ]
    },
    "DesignerStaticLayout" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DesignerLayoutReference"
      }, {
        "type" : "object",
        "required" : [ "layout" ],
        "properties" : {
          "layout" : {
            "$ref" : "#/definitions/DesignerLayout"
          }
        }
      } ]
    },
    "DisplayTextBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "DynamicLayoutReference" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutReference"
      }, {
        "type" : "object",
        "properties" : {
          "dependencies" : {
            "type" : "array",
            "xml" : {
              "name" : "dependency",
              "wrapped" : true
            },
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "DynamicPermissibleValueList" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PermissibleValueList"
      }, {
        "type" : "object",
        "properties" : {
          "context" : {
            "$ref" : "#/definitions/DynamicValueContext"
          },
          "dependencies" : {
            "type" : "array",
            "xml" : {
              "name" : "dependency",
              "wrapped" : true
            },
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "DynamicValueContext" : {
      "type" : "object",
      "required" : [ "parameterMappings" ],
      "properties" : {
        "providerEntityId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "parameterMappings" : {
          "$ref" : "#/definitions/ParameterMappingCollection"
        }
      }
    },
    "EditableBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "ElementState" : {
      "type" : "object",
      "properties" : {
        "dependencies" : {
          "type" : "array",
          "xml" : {
            "name" : "dependency",
            "wrapped" : true
          },
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "facets" : {
          "type" : "array",
          "xml" : {
            "name" : "facet",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/Constraint"
          }
        }
      }
    },
    "ElementValuesPagingInfo" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "EncryptedBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "EndsWithOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "EntityReferenceDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object"
      } ]
    },
    "EqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "Evaluator" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "Expression" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "operator" : {
            "$ref" : "#/definitions/CriteriaOperator"
          },
          "leftOperand" : {
            "$ref" : "#/definitions/Evaluator"
          },
          "rightOperand" : {
            "$ref" : "#/definitions/Evaluator"
          }
        }
      } ]
    },
    "ExtensionRendererContext" : {
      "type" : "object",
      "properties" : {
        "extensionId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "parameterMappings" : {
          "$ref" : "#/definitions/ParameterMappingCollection"
        }
      }
    },
    "ExternalValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "required" : [ "dynamicValueProviderInfo" ],
        "properties" : {
          "dynamicValueProviderInfo" : {
            "$ref" : "#/definitions/DynamicValueContext"
          }
        }
      } ]
    },
    "FacetValueMap" : {
      "type" : "object",
      "properties" : {
        "facets" : {
          "type" : "array",
          "xml" : {
            "name" : "facet",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/FacetValueMapEntry"
          }
        }
      }
    },
    "FacetValueMapEntry" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "value" : {
          "$ref" : "#/definitions/literal"
        }
      }
    },
    "Field" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "label" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "dataType" : {
          "$ref" : "#/definitions/DataType"
        },
        "displayAdvice" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "TEXTBOX", "HYPERLINK", "EMAIL", "TEXTAREA", "DATE_TIME_PICKER", "CHECKBOX", "YES_NO", "CHECKBOX_GROUP", "DUAL_LIST", "RADIO_GROUP", "DROPDOWN", "LIST", "SEARCHER", "TREE", "FORM", "IMAGE", "SLIDER", "DATA_TABLE", "VALUE_PICKER", "CONFIRM_PASSWORD" ]
        },
        "orderIndex" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        },
        "permissibleValues" : {
          "$ref" : "#/definitions/PermissibleValueList"
        },
        "state" : {
          "$ref" : "#/definitions/ElementState"
        },
        "isMultiValued" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "columns" : {
          "type" : "array",
          "xml" : {
            "name" : "column",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/Field"
          }
        }
      }
    },
    "FieldReference" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "path" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        }
      } ]
    },
    "FixedValueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "FormsScope" : {
      "type" : "object",
      "required" : [ "level" ],
      "properties" : {
        "level" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "GenericForm" : {
      "type" : "object",
      "required" : [ "name", "tenant" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2000
        },
        "tenant" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "layout" : {
          "$ref" : "#/definitions/DesignerLayout"
        }
      },
      "xml" : {
        "name" : "GenericForm"
      }
    },
    "GreaterThanOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "GreaterThanOrEqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "IaasPropertyNameBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "IncrementBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "IntegerLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/integerLiteral"
      }, {
        "type" : "object",
        "description" : "Wraps a signed 64-bit integer value.",
        "xml" : {
          "name" : "integerLiteral"
        }
      } ]
    },
    "InternalConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "InventoryType" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "name" : {
          "type" : "string"
        },
        "pluginType" : {
          "type" : "string"
        },
        "pluginName" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "properties" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/InventoryTypeProperty"
          }
        }
      },
      "xml" : {
        "name" : "InventoryType"
      }
    },
    "InventoryTypeProperty" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "InventoryTypeProperty"
      }
    },
    "IsDefinedOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "LayoutCell" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "LayoutExtension" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutCell"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "extensionId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "extensionPointId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "fieldPrefix" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          }
        }
      } ]
    },
    "LayoutField" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutFlowElement"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "label" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "orderIndex" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dataType" : {
            "$ref" : "#/definitions/DataType"
          },
          "displayAdvice" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "TEXTBOX", "HYPERLINK", "EMAIL", "TEXTAREA", "DATE_TIME_PICKER", "CHECKBOX", "YES_NO", "CHECKBOX_GROUP", "DUAL_LIST", "RADIO_GROUP", "DROPDOWN", "LIST", "SEARCHER", "TREE", "FORM", "IMAGE", "SLIDER", "DATA_TABLE", "VALUE_PICKER", "CONFIRM_PASSWORD" ]
          },
          "permissibleValues" : {
            "$ref" : "#/definitions/PermissibleValueList"
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          },
          "labelSize" : {
            "type" : "integer",
            "format" : "int32",
            "xml" : {
              "attribute" : true
            }
          },
          "detailLayout" : {
            "$ref" : "#/definitions/LayoutReference"
          },
          "extensionRendererContext" : {
            "$ref" : "#/definitions/ExtensionRendererContext"
          },
          "isMultiValued" : {
            "type" : "boolean",
            "xml" : {
              "attribute" : true
            },
            "default" : false
          },
          "columns" : {
            "type" : "array",
            "xml" : {
              "name" : "column",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/LayoutField"
            }
          }
        }
      } ]
    },
    "LayoutFlow" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutCell"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          },
          "parts" : {
            "type" : "array",
            "xml" : {
              "name" : "part",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/LayoutFlowElement"
            }
          }
        }
      } ]
    },
    "LayoutFlowElement" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutCell"
      }, {
        "type" : "object"
      } ]
    },
    "LayoutPage" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "label" : {
          "type" : "string"
        },
        "state" : {
          "$ref" : "#/definitions/ElementState"
        },
        "sections" : {
          "type" : "array",
          "xml" : {
            "name" : "section",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/LayoutSection"
          }
        }
      }
    },
    "LayoutPlaceholderCell" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutCell"
      }, {
        "type" : "object"
      } ]
    },
    "LayoutReference" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "LayoutRow" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "xml" : {
            "name" : "item",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/LayoutCell"
          }
        }
      }
    },
    "LayoutSection" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "label" : {
          "type" : "string"
        },
        "state" : {
          "$ref" : "#/definitions/ElementState"
        },
        "rows" : {
          "type" : "array",
          "xml" : {
            "name" : "row",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/LayoutRow"
          }
        }
      }
    },
    "LayoutText" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutFlowElement"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "value" : {
            "type" : "string"
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          }
        }
      } ]
    },
    "LessThanOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "LessThanOrEqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "Link" : {
      "type" : "object",
      "properties" : {
        "rel" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "LiteralMapEntry" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "value" : {
          "$ref" : "#/definitions/literal"
        }
      }
    },
    "MandatoryConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaxCardinalityConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaxLengthConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaxValueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaximumValueEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "arguments" : {
            "type" : "array",
            "xml" : {
              "name" : "argument",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "MinCardinalityConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MinLengthConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MinValueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MinimumValueEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "arguments" : {
            "type" : "array",
            "xml" : {
              "name" : "argument",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "MonetaryValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "currencyCode" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The ISO 4217 code used to identify the currency (if any) associated with this value."
          }
        },
        "description" : "Base type for representing monetary values, encapsulating both some kind of quantity and a currency.",
        "xml" : {
          "name" : "literal"
        }
      } ]
    },
    "MultipleEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "required" : [ "items" ],
        "properties" : {
          "elementTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "NotClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "subClause" : {
            "$ref" : "#/definitions/Clause"
          }
        }
      } ]
    },
    "NotEqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "NullDisplayTextBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "ObjectDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object",
        "properties" : {
          "componentTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "typeFilter" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "label" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        }
      } ]
    },
    "OrClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "subClauses" : {
            "type" : "array",
            "xml" : {
              "name" : "clause"
            },
            "items" : {
              "$ref" : "#/definitions/Clause"
            }
          }
        }
      } ]
    },
    "Page" : {
      "type" : "object",
      "properties" : {
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ParameterMapping" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "value" : {
          "$ref" : "#/definitions/Evaluator"
        }
      }
    },
    "ParameterMappingCollection" : {
      "type" : "object",
      "properties" : {
        "params" : {
          "type" : "array",
          "xml" : {
            "name" : "param",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/ParameterMapping"
          }
        }
      }
    },
    "PermissibleValueList" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "customAllowed" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        }
      }
    },
    "PrimitiveDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object",
        "properties" : {
          "typeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
          }
        }
      } ]
    },
    "ReadOnlyConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "RefreshOnChangeBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "RegexpConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object",
        "properties" : {
          "errorMessage" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ResetValueBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "ResourceIntegerLiteral" : {
      "type" : "object",
      "properties" : {
        "links" : {
          "type" : "array",
          "xml" : {
            "name" : "links",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "content" : {
          "$ref" : "#/definitions/integerLiteral"
        }
      }
    },
    "Schema" : {
      "type" : "object",
      "properties" : {
        "fields" : {
          "type" : "array",
          "xml" : {
            "name" : "field"
          },
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Field"
          }
        }
      }
    },
    "ScriptActionValueDefinition" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ValueDefinition"
      }, {
        "type" : "object",
        "properties" : {
          "scriptActionFqn" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ServiceBlueprint" : {
      "type" : "object",
      "required" : [ "name", "status", "workflowId" ],
      "properties" : {
        "id" : {
          "$ref" : "#/definitions/TenantedUuid"
        },
        "access" : {
          "type" : "string"
        },
        "workflowId" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2000
        },
        "catalogRequestInfoHidden" : {
          "type" : "boolean",
          "default" : false
        },
        "forms" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/formScenario"
          }
        },
        "status" : {
          "type" : "string",
          "enum" : [ "DRAFT", "PUBLISHED", "RETIRED" ]
        },
        "statusName" : {
          "type" : "string"
        },
        "version" : {
          "$ref" : "#/definitions/Version"
        },
        "outputParameter" : {
          "$ref" : "#/definitions/CsParameter"
        },
        "component" : {
          "type" : "boolean",
          "default" : false
        },
        "componentConfiguration" : {
          "$ref" : "#/definitions/XaaSComponentConfiguration"
        },
        "builtIn" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        }
      },
      "xml" : {
        "name" : "ServiceBlueprint",
        "namespace" : "http://www.vmware.com/vcac/schema/advanced-designer-service/v7.0"
      }
    },
    "SkipExportBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "Sort" : {
      "type" : "object"
    },
    "StartsWithOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "StaticLayout" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutReference"
      }, {
        "type" : "object",
        "required" : [ "layout" ],
        "properties" : {
          "layout" : {
            "$ref" : "#/definitions/layout"
          }
        }
      } ]
    },
    "StaticPermissibleValueList" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PermissibleValueList"
      }, {
        "type" : "object",
        "properties" : {
          "values" : {
            "type" : "array",
            "xml" : {
              "name" : "value"
            },
            "items" : {
              "$ref" : "#/definitions/value"
            }
          }
        }
      } ]
    },
    "SubsetOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "SupersetOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "TagInstanceList" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "globalTags" : {
          "$ref" : "#/definitions/literalMap"
        },
        "userTags" : {
          "$ref" : "#/definitions/literalMap"
        }
      },
      "xml" : {
        "name" : "TagInstanceList"
      }
    },
    "TenantedUuid" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "tenant" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        }
      }
    },
    "TimeSpan" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "description" : "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days.",
        "xml" : {
          "name" : "timeSpan"
        }
      } ]
    },
    "UniqueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "UnspecifiedEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object"
      } ]
    },
    "ValueDefinition" : {
      "type" : "object",
      "required" : [ "name" ],
      "discriminator" : "@type",
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "key" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "dataType" : {
          "$ref" : "#/definitions/DataType"
        },
        "multi" : {
          "type" : "boolean",
          "default" : false
        },
        "scope" : {
          "$ref" : "#/definitions/FormsScope"
        }
      }
    },
    "Version" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "type" : "string",
          "pattern" : "^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}(?:\\-\\d{1,10})?$"
        },
        "major" : {
          "type" : "integer",
          "format" : "int64"
        },
        "minor" : {
          "type" : "integer",
          "format" : "int64"
        },
        "micro" : {
          "type" : "integer",
          "format" : "int64"
        },
        "revision" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "xml" : {
        "name" : "Version"
      }
    },
    "VisibilityConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "WithinOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "WorkflowSubscription" : {
      "type" : "object",
      "required" : [ "status", "workflowId" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "eventTopicId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "workflowId" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "tenantId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 1,
          "maxLength" : 255
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "blocking" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "failOnError" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "reply" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "status" : {
          "type" : "string",
          "enum" : [ "DRAFT", "PUBLISHED", "RETIRED" ]
        },
        "statusName" : {
          "type" : "string"
        },
        "criteria" : {
          "$ref" : "#/definitions/Clause"
        },
        "version" : {
          "$ref" : "#/definitions/Version"
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2000
        },
        "priority" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          },
          "minimum" : 0.0
        },
        "timeout" : {
          "type" : "integer",
          "format" : "int32"
        }
      },
      "xml" : {
        "name" : "WorkflowSubscription"
      }
    },
    "WrapperClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/Evaluator"
          }
        }
      } ]
    },
    "XaaSComponentConfiguration" : {
      "type" : "object",
      "properties" : {
        "scalable" : {
          "type" : "boolean",
          "default" : false
        },
        "categoryId" : {
          "type" : "string"
        },
        "operations" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/xaasComponentOperation"
          }
        }
      },
      "xml" : {
        "name" : "XaaSComponentConfiguration"
      }
    },
    "XaasRequestWorkflowInfo" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "startDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "completionDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "workflowName" : {
          "type" : "string"
        },
        "executionState" : {
          "type" : "string"
        },
        "provisionSourceType" : {
          "type" : "string"
        },
        "errorDetails" : {
          "type" : "string"
        }
      }
    },
    "batchElementUpdateRequest" : {
      "type" : "object",
      "required" : [ "formValues" ],
      "properties" : {
        "headers" : {
          "$ref" : "#/definitions/literalMap"
        },
        "formValues" : {
          "$ref" : "#/definitions/literalMap"
        },
        "trigger" : {
          "type" : "string"
        },
        "triggeredDetailsLayout" : {
          "$ref" : "#/definitions/layout"
        },
        "affectedElements" : {
          "type" : "array",
          "xml" : {
            "wrapped" : true
          },
          "items" : {
            "type" : "string"
          }
        }
      },
      "xml" : {
        "name" : "batchElementUpdateRequest"
      }
    },
    "blueprintForm" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "designerLayout" : {
          "$ref" : "#/definitions/DesignerLayout"
        }
      },
      "xml" : {
        "name" : "blueprintForm"
      }
    },
    "booleanLiteral" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "value" : {
          "type" : "boolean",
          "description" : "The boolean value.",
          "default" : false
        }
      },
      "description" : "Wraps a boolean value.",
      "xml" : {
        "name" : "booleanLiteral"
      }
    },
    "catalogItemResource" : {
      "type" : "object",
      "required" : [ "csResource", "csResourceTypeId", "displayName", "owners", "subtenantId" ],
      "properties" : {
        "csResource" : {
          "$ref" : "#/definitions/CsResource"
        },
        "catalogId" : {
          "type" : "string"
        },
        "csResourceTypeId" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "owners" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "subtenantId" : {
          "type" : "string"
        },
        "tenantId" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "catalogItemResource"
      }
    },
    "complexLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "componentTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's component type."
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's component."
          },
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's class."
          },
          "typeFilter" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The type filter for this literal."
          },
          "values" : {
            "description" : "Map of values, keyed by the field ids of some complex type.",
            "$ref" : "#/definitions/literalMap"
          }
        },
        "description" : "A complex value composed of multiple values keyed by the field ids of some complex type.",
        "xml" : {
          "name" : "complexLiteral"
        }
      } ]
    },
    "configuration" : {
      "type" : "object",
      "required" : [ "host", "name", "tenantId" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2000
        },
        "host" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "port" : {
          "type" : "integer",
          "format" : "int32"
        },
        "username" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        },
        "ssoMode" : {
          "type" : "boolean",
          "default" : false
        },
        "tenantId" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "certificate" : {
          "type" : "string"
        },
        "embedded" : {
          "type" : "boolean",
          "default" : false
        },
        "systemDefault" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "configuration"
      }
    },
    "dateTimeLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date."
          }
        },
        "description" : "Wraps a Date & Time value. This is a wrapper for the Java {@link Date} class.",
        "xml" : {
          "name" : "dateTimeLiteral"
        }
      } ]
    },
    "decimalLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "number",
            "format" : "double",
            "description" : "The decimal value."
          }
        },
        "description" : "Wraps a decimal value.",
        "xml" : {
          "name" : "decimalLiteral"
        }
      } ]
    },
    "elementValues" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "array",
          "xml" : {
            "name" : "value",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/value"
          }
        }
      },
      "xml" : {
        "name" : "elementValues"
      }
    },
    "elementValuesRequest" : {
      "type" : "object",
      "properties" : {
        "text" : {
          "type" : "string"
        },
        "tenantId" : {
          "type" : "string"
        },
        "userId" : {
          "type" : "string"
        },
        "dependencyValues" : {
          "$ref" : "#/definitions/literalMap"
        },
        "pagingInfo" : {
          "$ref" : "#/definitions/ElementValuesPagingInfo"
        },
        "associateValue" : {
          "$ref" : "#/definitions/literal"
        },
        "headers" : {
          "$ref" : "#/definitions/literalMap"
        }
      },
      "xml" : {
        "name" : "elementValuesRequest"
      }
    },
    "entityRef" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier of the type or category to which the referenced entity belongs."
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The unique identifier of the referenced entity, encoded as a string"
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The durable identifier of a component registered in the suite component registry that owns and manages the referenced entity. This can be omitted if this component can be derived from the context within which this entity reference occurs. It must be specified, if no such context exists or if the component differs from that defined by the context."
          },
          "label" : {
            "type" : "string"
          }
        },
        "description" : "Represents a reference to an entity defined somewhere in the suite.",
        "xml" : {
          "name" : "entityRef"
        }
      } ]
    },
    "entityRefEx" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "href" : {
            "type" : "string",
            "description" : "the Href"
          }
        },
        "description" : "Represents a reference to an entity by uri",
        "xml" : {
          "name" : "entityRefEx"
        }
      } ]
    },
    "formScenario" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "form" : {
          "$ref" : "#/definitions/blueprintForm"
        },
        "scenario" : {
          "$ref" : "#/definitions/layoutScenario"
        }
      },
      "xml" : {
        "name" : "formScenario"
      }
    },
    "formUpdateResponse" : {
      "type" : "object",
      "properties" : {
        "elementUpdates" : {
          "type" : "array",
          "xml" : {
            "name" : "elementUpdate",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/updateElementEntry"
          }
        }
      },
      "xml" : {
        "name" : "formUpdateResponse"
      }
    },
    "integerLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The integer value."
          }
        },
        "description" : "Wraps a signed 64-bit integer value.",
        "xml" : {
          "name" : "integerLiteral"
        }
      } ]
    },
    "interactionWorkItem" : {
      "type" : "object",
      "required" : [ "requestedBy", "workflowExecutionId", "workflowId" ],
      "properties" : {
        "workflowExecutionId" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "workflowId" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "requestedBy" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "subtenantRef" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "assignees" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "xml" : {
        "name" : "interactionWorkItem"
      }
    },
    "layout" : {
      "type" : "object",
      "properties" : {
        "pages" : {
          "type" : "array",
          "xml" : {
            "name" : "page",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/LayoutPage"
          }
        }
      },
      "xml" : {
        "name" : "layout"
      }
    },
    "layoutScenario" : {
      "type" : "object",
      "properties" : {
        "usageClass" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "layoutScenario"
      }
    },
    "literal" : {
      "type" : "object",
      "discriminator" : "type",
      "description" : "Wraps a value such that values of different types can be treated generically.",
      "xml" : {
        "name" : "literal"
      }
    },
    "literalMap" : {
      "type" : "object",
      "properties" : {
        "entries" : {
          "type" : "array",
          "xml" : {
            "name" : "entry"
          },
          "items" : {
            "$ref" : "#/definitions/LiteralMapEntry"
          }
        }
      },
      "description" : "Equivalent of java.util.Map",
      "xml" : {
        "name" : "literalMap"
      }
    },
    "money" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "format" : "double",
            "description" : "The amount associated with this value (with no specific currency)."
          }
        },
        "description" : "Represents a single, precise monetary value.",
        "xml" : {
          "name" : "money"
        }
      } ]
    },
    "moneyRange" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "minValue" : {
            "type" : "number",
            "format" : "double",
            "description" : "The lower limit of the range."
          },
          "maxValue" : {
            "type" : "number",
            "format" : "double",
            "description" : "The upper limit of the range."
          }
        },
        "description" : "Represents a range of money values, between some defined minimums and maximums.",
        "xml" : {
          "name" : "moneyRange"
        }
      } ]
    },
    "moneyRate" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "cost" : {
            "description" : "The cost (including optional currency code).",
            "$ref" : "#/definitions/literal"
          }
        },
        "description" : "A base type for literals representing a rate of some monetary value over a specified basis. E.g. $5 / hour; $1-2 / GB.",
        "xml" : {
          "name" : "moneyRate"
        }
      } ]
    },
    "moneyTimeRate" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "basis" : {
            "description" : "The span of time to calculate the rate of money for.",
            "$ref" : "#/definitions/timeSpan"
          }
        },
        "description" : "Represents a rate of money over time.",
        "xml" : {
          "name" : "moneyTimeRate"
        }
      } ]
    },
    "multipleLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "elementTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The data type of the items in the list.",
            "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
          },
          "items" : {
            "type" : "array",
            "xml" : {
              "name" : "item"
            },
            "description" : "The list of specified values. NOTE: All values must be of the same data type.",
            "items" : {
              "$ref" : "#/definitions/literal"
            }
          }
        },
        "description" : "A literal which represents multiple values. All of these component values must be of the same data type.",
        "xml" : {
          "name" : "multipleLiteral"
        }
      } ]
    },
    "policyDefinition" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "hrid" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255,
          "pattern" : "^\\w+$"
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2000
        },
        "tenantId" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "properties" : {
          "$ref" : "#/definitions/literalMap"
        }
      },
      "xml" : {
        "name" : "policyDefinition"
      }
    },
    "scriptAction" : {
      "type" : "object",
      "required" : [ "description", "fqn", "name" ],
      "properties" : {
        "inputParameters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/scriptActionParameter"
          }
        },
        "resultType" : {
          "type" : "string"
        },
        "resultContentType" : {
          "$ref" : "#/definitions/DataType"
        },
        "fqn" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2000
        }
      },
      "xml" : {
        "name" : "scriptAction"
      }
    },
    "scriptActionParameter" : {
      "type" : "object",
      "required" : [ "name", "type" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "type" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        }
      },
      "xml" : {
        "name" : "scriptActionParameter"
      }
    },
    "secureString" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "The string value."
          }
        },
        "description" : "Wraps a secured string value, such as a password.",
        "xml" : {
          "name" : "secureString"
        }
      } ]
    },
    "stringLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "The string value."
          }
        },
        "description" : "Wraps a String value.",
        "xml" : {
          "name" : "stringLiteral"
        }
      } ]
    },
    "timeSpan" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "unit" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "description" : "The unit of measure for the time span. e.g: days.",
          "enum" : [ "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS", "WEEKS", "MONTHS", "YEARS" ]
        },
        "amount" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          },
          "description" : "The amount for the time span."
        }
      },
      "description" : "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days.",
      "xml" : {
        "name" : "timeSpan"
      }
    },
    "updateElementEntry" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "detailLayout" : {
          "$ref" : "#/definitions/layout"
        },
        "facetValues" : {
          "$ref" : "#/definitions/FacetValueMap"
        },
        "extensionRendererContext" : {
          "$ref" : "#/definitions/literalMap"
        },
        "permissibleValues" : {
          "type" : "array",
          "xml" : {
            "name" : "value",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/value"
          }
        },
        "errors" : {
          "type" : "array",
          "xml" : {
            "name" : "error",
            "wrapped" : true
          },
          "items" : {
            "type" : "string"
          }
        }
      },
      "xml" : {
        "name" : "updateElementEntry"
      }
    },
    "value" : {
      "type" : "object",
      "properties" : {
        "underlyingValue" : {
          "$ref" : "#/definitions/literal"
        },
        "label" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "value"
      }
    },
    "workflow" : {
      "type" : "object",
      "required" : [ "description", "id", "name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2000
        },
        "inputParameters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/workflowParameter"
          }
        },
        "outputParameters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/workflowParameter"
          }
        }
      },
      "xml" : {
        "name" : "workflow"
      }
    },
    "workflowParameter" : {
      "type" : "object",
      "required" : [ "name", "type" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "type" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        }
      },
      "xml" : {
        "name" : "workflowParameter"
      }
    },
    "xaasComponentOperation" : {
      "type" : "object",
      "required" : [ "inputParameterName", "lifecycleType", "routineId" ],
      "properties" : {
        "lifecycleType" : {
          "type" : "string"
        },
        "routineId" : {
          "type" : "string"
        },
        "inputParameterName" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "xaasComponentOperation"
      }
    }
  }
}