{
  "swagger" : "2.0",
  "info" : {
    "description" : "# Catalog Service API Specification\n\n## What is the Catalog Service REST API?\n\nThe catalog service REST API is designed to be used by the consumers of the service catalog; for example, an end user who wants to request a catalog item would be a consumer of this API. The catalog service imposes a maximum limit on the number of elements that can be retrieved with a single API call. This limit is currently set to 5000.\n\n\n## How the Catalog Service Works\n\nThe Catalog Service REST API comprises three APIs:\n\n* **Catalog Consumer REST API** - When end users request catalog items, the catalog consumer REST API is called.\n* **Catalog Service Provider API** - Service providers use the catalog Service Provider API to design and publish catalog items and fulfill requests for them.\n* **Catalog Service Admin API** - When system administrators interact with catalog items, the catalog Service Admin API is called.\n\n## Key Concepts\n\n### Catalog Item\n\nAn item that is listed in a service catalog. Some catalog items result in an item being provisioned that the user can manage through its life cycle. For example, an application developer can request storage as a service, then later add capacity, request backups, and restore previous backups.\n\nOther catalog items do not result in provisioned items. For example, a cell phone user can submit a request for additional minutes on a mobile plan. \n\n### Catalog Consumer\n\nAn end user of a service. Consumers can request catalog items from the service catalog.\n\n### Catalog Service Provider\n\nA service provider who designs, publishes, and fulfills requests for catalog items provided to catalog consumers.\n\n\n## Using the Catalog Consumer API\n\nThe catalog consumer REST API is designed to be used by the consumers of the service catalog; for example, an end user who wants to request a catalog item would be a consumer of this API.\n\n    Base URI : /api/consumer\n\n<div style=\"page-break-inside: avoid;\">\n<table class=\"prettytable\">\n<tr>\n<th>Resource </th>\n<th>Resource URI </th>\n<th>Notes</th></tr>\n<tr>\n<td width=\"15%\"><strong>Catalog Items</strong></td>\n<td width=\"15%\">/catalogItems<br/> </td>\n\n<td width=\"70%\">Consumer REST API for catalog items. This API does not take entitlements into account but only global user permissions.<br/>\nHowever, if a request is submitted for a catalog item without the appropriate entitlement, it will be rejected.<br/></td></tr>\n<tr>\n<td><strong>Entitled Catalog Items</strong></td>\n<td>&nbsp;/entitledCatalogItems<br/> </td>\n\n<td> Consumer REST API for entitled catalog items exposed for users. Consumer entitled catalogItem(s) are basically catalog items that:<br/>\n  - are in an active state.<br/>\n  - the current user has the right to consume.<br/>\n  - the current user is entitled to consume.<br/>\n  - are associated to a service.</td></tr>\n<tr>\n<td><strong>Requests</strong></td>\n<td>/requests<br/> </td>\n\n<td> Consumer request API exposed to users. The request captures the user's input (done through a form) and triggers the process that fulfills that order on the appropriate provider.</td></tr>\n<tr>\n<td><strong>Resources</strong></td>\n<td>/resources<br/> </td>\n\n<td>Consumer resource API exposed to users. A Resource represents a deployed artifact that has been provisioned by a provider.</td></tr>\n<tr>\n<td><strong>Resource Operations</strong></td>\n<td>/resourceOperations<br/> </td>\n\n<td>Consumer resource operation API exposed to users. A resource operation represents a Day-2 operation that can be performed on a resource. Resource operations  are registered in the Service Catalog and target a specific resource type. These\n  operations can be invoked / accessed by consumers through the self-service interface on the resources they own.</td></tr>\n\n  <tr>\n<td><strong>Resource Types</strong></td>\n<td>/resourceTypes<br/> </td>\n\n<td>Consumer resource type API exposed to users. Resource types is a type assigned to resources. The types are defined by the provider types. It allows similar resources to be grouped together.</td></tr>\n  <tr>\n<td><strong>Services</strong></td>\n<td>/services<br/> </td>\n\n<td>Consumer service API exposed to users. A service represents a customer-facing/user friendly set of activities.  In the context of this service catalog, these activities are the catalog item. A service must be owned by a specific organization (tenant and subtenant, i.e., business group), and all the activities it contains should belong to the same organization.</td></tr>\n\n </table></div>\n\n \n## Using the Catalog Service Provider API \n\nThe catalog service provider API is designed for use by service providers who want their services to be consumed by the vRA catalog. A service catalog provider is responsible for: \n\n* The design and the maintenance of the catalog items in its own UI.\n* The publication of the catalog items to the service catalog.\n* The fulfillment of the catalog items request.\n\n```\nBase URI : /api/provider\n```\n\n<div style=\"page-break-inside: avoid;\">\n<table class=\"prettytable\">\n<tr>\n<th>Resource  </th>\n<th>Resource URI</th>\n<th>Notes </th></tr>\n<tr>\n<td><strong>Catalog Items</strong></td>\n<td width=\"15%\">/providers/{providerId}/catalogItems<br/> </td>\n\n<td>Provider REST API for provider catalog items. Provider catalog item represents the catalog item object submitted by a provider. This object is very similar to the catalog item entity. The only noticeable difference is that the ID field does not represent the entity ID but the external ID used by the provider. (This ID\nis stored as a `bindingId` field in the catalog item entity because it may not be unique in the service catalog context).<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>Catalog Item Types</strong></td>\n<td>/catalogItemTypes<br/> </td>\n\n<td width=\"70%\"> Provider REST API for catalog items exposed for users. Catalog item types define various common properties shared by catalog items (such as the output). They also enable  presentation and comparison of similar catalog items for the consumer. Catalog item types can also define the tracked resource produced (such as a deployed VM) if any.</td></tr>\n<tr>\n<td><strong>Requests</strong></td>\n<td>/providers/{providerId}/requests<br/> </td>\n\n<td> Provider Request API exposed to users. The request captures the user's input (done through a form) and trigger the process that fulfils that order on the appropriate provider.</td></tr>\n<tr>\n<td><strong>Resources</strong></td>\n<td>/providers/{providerId}/resources<br/> </td>\n\n<td>Provider resource API exposed to users. A Resource represents a deployed artifact that has been provisioned by a provider.</td></tr>\n<tr>\n<td><strong>Resource Actions</strong></td>\n<td>/resourceActions<br/> </td>\n\n<td>Provider Resource Action API exposed to users. A resource action represents a Day-2 operation that can be performed on a resource. Resource actions  are registered in the service catalog and target a specific resource type. These\n  operations can be invoked / accessed by consumers through the self-service interface on the resources they own. Resource actions must be unique based on the combo of binding id and\n  provider type/ provider. When a new resource action is registered without a catalog-assigned  id, the catalog will  attempt to match that action to an existing record with the same provider-binding. If\n  successful, the existing resource action is updated. If not, the resource action is registered as a new record.</td></tr>\n\n  <tr>\n<td><strong>Resource Types</strong></td>\n<td>/resourceTypes<br/> </td>\n\n<td>Provider resource type API exposed to users. Resource types is a type assigned to resources. The types are defined by the provider types. It allows similar resources to be grouped together.</td></tr>\n  <tr>\n<td><strong>Icons</strong></td>\n<td>/icons<br/> </td>\n\n<td>Provider REST API exposed to users for to publish icons to the service catalog.. It represents an icon with all its descriptive meta data (fileName, MIME Type...). The actual content of the icon is stored as a byte[]. Icons can be solution-level or belong to a specific\n  tenant. Solution-level icons are created through the provider API, and the fileName will be the same as  the ID for these icons. Organization will be null in this case.\n  Organization-specific icons are uploaded through the admin API. For these icons, the fileName will be specified, but the ID will be generated. Oganization will be set (Tenant mandatory,\n  team optional).</td></tr>\n\n </table></div>\n\n### Using the Catalog Admin API\n\nThe catalog admin API is an API for catalog items that a system administrator can interact with. It allows the user to interact with catalog items that the user is permitted to review, even if the items were not published or the user is not entitled to them. \n\n```\nBase URI : /api\n```\n\n</pre>\n<div style=\"page-break-inside: avoid;\">\n<table class=\"prettytable\">\n<tr>\n<th>Resource </th>\n<th>Resource URI </th>\n<th>Notes</th></tr>\n<tr>\n<td width=\"15%\"><strong>Catalog Items</strong></td>\n<td width=\"15%\">/catalogItems<br/> </td>\n\n<td width=\"70%\">REST API for catalog items that a system administrator can interact with. It allows the user to interact with catalog items that the user is permitted to review, even if\n they were not published or entitled to them.<br/></td></tr>\n<tr>\n<td><strong>Entitled Catalog Items</strong></td>\n<td>&nbsp;/entitledCatalogItems<br/> </td>\n\n<td> REST API for administrators to interact with catalog items that they are entitled to. Consumer-entitled catalog item(s) are basically catalog items that:<br/>\n  - are in an active state.<br/>\n  - the current user has the right to consume.<br/>\n  - the current user is entitled to consume.<br/>\n  - are associated to a service.</td></tr>\n<tr>\n<td><strong>Requests</strong></td>\n<td>/requests<br/> </td>\n\n<td> Request API exposed to administrators. The request captures the user's input (done through a form) and trigger the process that fulfills that order on the appropriate provider.</td></tr>\n<tr>\n<td><strong>Resources</strong></td>\n<td>/resources<br/> </td>\n\n<td>Resource API exposed to administrators. A resource represents a deployed artifact that has been provisioned by a provider.</td></tr>\n<tr>\n<td><strong>Resource Operations</strong></td>\n<td>/resourceOperations<br/> </td>\n\n<td>Resource operation API exposed to administrators. A resource operation represents a Day-2 operation that can be performed on a resource. Resource operations  are registered in the service catalog and target a specific resource type. These\n  operations can be invoked / accessed by consumers through the self-service interface on the resources they own.</td></tr>\n\n  <tr>\n<td><strong>Resource Types</strong></td>\n<td>/resourceTypes<br/> </td>\n\n<td>Resource type API exposed to administrators. Resource types is a type assigned to resources. The types are defined by the provider types. It allows similar resources to be grouped together.</td></tr>\n  <tr>\n<td><strong>Services</strong></td>\n<td>/services<br/> </td>\n\n<td>Service API exposed to administrators. A service represents a customer-facing/user friendly set of activities.  In the context of this service catalog, these activities are the catalog items and resource\n  actions. A service must be owned by a specific organization (tenant and subtenant, i.e., business group), and all the activities it contains should belong to the same organization.</td></tr>\n\n<tr>\n<td><strong>Icons</strong></td>\n<td>/icons<br/> </td>\n\n<td>Icons API exposed to administrators. Icons can be published to the catalog.</td></tr>\n\n</table></div>\n\n\n#### Usage Examples\n\nGetting a list of catalog items:\n\n     GET /consumer/catalogItems\n\nGetting a catalog item by id:\n\n     GET consumer/catalogItems/0581d671-93fd-4bca-aa05-2e14514c4ef9>\n\n## Important Notes About catalog-service and OData Queries\n\n`catalog-service` behaves differently than other vRA services when it comes to OData queries. Before proceeding, please familiarize yourself with the generic use case of <a href=\"/component-registry/api/docs/tips.html\">how to use OData in the vRA REST API</a>, including that page's <a href=\"/component-registry/api/docs/tips.html#odataWalkthrough\">walkthrough</a>.\n\nThe steps in the <a href=\"/component-registry/api/docs/tips.html#odataWalkthrough\">walkthrough</a> are the same, with one slight nuance. Some `catalog-service` domain models contain nested objects ending in 'Ref' (which denotes the nested object is a reference to an object rather than a full-blown nested object). When crafting your `$filter` query, you must remove 'Ref'. Also, each 'Ref' object contains an `id` and sometimes a `label`. When attempting to filter on these fields, you must use OData resources of `id` and `name` (respectively).\n\nHere's an example to make things clearer. Let's say you want to see all consumer catalog items that are associated with a specific catalog service name. As mentioned in the walkthrough, you'll want to look at the catalogItem domain object (which is linked from the CatalogItem REST Resource documentation page).\n\nThe `catalogItem` domain object contains a `serviceRef`, which itself has a `id` and `label`. If we want to filter based on a service name, we would use a 'curl' command like this:\n\n     curl -H \"Accept: $ACCEPT\" -H \"Authorization: $AUTH\"\n     \"https://$VRA/catalog-service/api/consumer/catalogItems?%24filter=service/name+eq+'some-service'\" \n\n**Note**: Notice how even though the `serviceRef` object contains a `label` element, we use <strong><tt>service</tt></strong> (and not `serviceRef`) and <strong><tt>name</tt></strong> (and not `label`) to craft the filter: `$filter=service/name eq 'theName'`\n\nFollow this pattern when crafting any OData queries against `>catalog-service` when you encounter domain objects containing 'Ref'. Also, look at the REST resource API documentation, which may give more details on supported OData queries.\n",
    "version" : "7.4.0-SNAPSHOT",
    "title" : "Catalog Service API"
  },
  "basePath" : "/catalog-service",
  "tags" : [ {
    "name" : "catalog"
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/api/catalogItemTypes" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get catalog item types",
        "description" : "Find all CatalogItemTypes that are available in the system.",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageCatalogItemType"
            }
          }
        }
      }
    },
    "/api/catalogItems" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Find catalog items",
        "description" : "Finds all CatalogItems that the current user is allowed to review.",
        "operationId" : "getCatalogItemsForUser",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageCatalogItem"
            }
          }
        }
      }
    },
    "/api/catalogItems/available" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Find all catalog items with no service association",
        "description" : "Retrieve all the catalog Items that are not associated with any service and are in the same tenant as the current request.",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageCatalogItem"
            }
          }
        }
      }
    },
    "/api/catalogItems/{catalogItemId}/entitlements" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Find all entitlements for catalog item",
        "description" : "Retrieve all entitlements for a CatalogItem and the service to which the catalog item belongs.If the service identifier is not supplied while making the API call ; it is computed on the server side.",
        "parameters" : [ {
          "name" : "catalogItemId",
          "in" : "path",
          "description" : "The catalog item Id for which all the entitlements have to be returned.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "description" : "The service Id for which all the entitlements have to be returned.This is an optional parameter",
          "required" : false,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageEntitlement"
            }
          }
        }
      }
    },
    "/api/catalogItems/{id}" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Find catalog item",
        "description" : "Retrieve an existing CatalogItem that the user is permitted to review, even if it were not published or entitled to them.",
        "operationId" : "getCatalogItemCanReview",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier for the CatalogItem.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CatalogItem"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "catalog" ],
        "summary" : "Update Catalog Item",
        "description" : "Updates an existing {@link CatalogItem} upon the existence and validation of CatalogItem. e.g. it validates for allowed state transitions before making the update to the catalog item.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier for the catalog item.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The catalog item to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CatalogItem"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/catalogItems/{id}/icon" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Find catalog item icon",
        "description" : "Get a CatalogItem's Icon according to its unique id provided in the path. This icon is displayed in the vRA catalog UI.",
        "operationId" : "findCatalogItemIconAdmin",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier for the catalog item.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "byte"
              }
            }
          }
        }
      }
    },
    "/api/consumer/catalogItems" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get catalog items",
        "description" : "Retrieve a page of catalog items a catalog consumer is permitted to see.",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageCatalogItem"
            }
          }
        }
      }
    },
    "/api/consumer/catalogItems/{id}" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get catalog item",
        "description" : "Retrieve a catalog item a catalog consumer is permitted to see.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The UUID of a catalog item",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CatalogItem"
            }
          }
        }
      }
    },
    "/api/consumer/catalogItems/{id}/forms/details" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get details form",
        "description" : "Retrieve a read-only details form for presenting the specified catalog item.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The catalog item identifier.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "subtenantId",
          "in" : "query",
          "description" : "The ID of the Business Group used for viewing a Catalog Item.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "requestedFor",
          "in" : "query",
          "description" : "The value of the user Id to use when the intention is to request on behalf of someone else.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/form"
            }
          }
        }
      }
    },
    "/api/consumer/catalogItems/{id}/forms/details/update" : {
      "post" : {
        "tags" : [ "catalog" ],
        "summary" : "Get details form element metadata",
        "description" : "Retrieves the metadata of one or more elements within the details form of a specified catalog item.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The catalog item identifier.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "subtenantId",
          "in" : "query",
          "description" : "The ID of the Business Group used for viewing a Catalog Item.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "requestedFor",
          "in" : "query",
          "description" : "The value of the user Id to use when the intention is to request on behalf of someone else.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Specifies information required to complete the request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/batchElementUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/formUpdateResponse"
            }
          }
        }
      }
    },
    "/api/consumer/catalogItems/{id}/forms/details/{elementId}/values" : {
      "post" : {
        "tags" : [ "catalog" ],
        "summary" : "Get details form field values",
        "description" : "Retrieves the paged list of values for an element within the details form of a specified",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The catalog item identifier.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "elementId",
          "in" : "path",
          "description" : "The identifier of a target element within the catalog item.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "subtenantId",
          "in" : "query",
          "description" : "The ID of the Business Group used for viewing a Catalog Item.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "requestedFor",
          "in" : "query",
          "description" : "The value of the user Id to use when the intention is to request on behalf of someone else.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Information required to complete the request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/elementValuesRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/elementValues"
            }
          }
        }
      }
    },
    "/api/consumer/catalogItems/{id}/forms/request" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get request form",
        "description" : "Retrieve an editable form for submitting a request for the specified catalog item.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The catalog item identifier.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "subtenantId",
          "in" : "query",
          "description" : "The ID of the Business Group used for viewing a Catalog Item.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "requestedFor",
          "in" : "query",
          "description" : "The value of the user Id to use when the intention is to request on behalf of someone else.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/form"
            }
          }
        }
      }
    },
    "/api/consumer/catalogItems/{id}/forms/request/update" : {
      "post" : {
        "tags" : [ "catalog" ],
        "summary" : "Get request form elment metadata",
        "description" : "Retrieves the updated state of one or more layout elements in the request form of a specified catalog item.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The catalog item identifier.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "subtenantId",
          "in" : "query",
          "description" : "The ID of the Business Group used for viewing a Catalog Item.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "requestedFor",
          "in" : "query",
          "description" : "The value of the user Id to use when the intention is to request on behalf of someone else.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The specific information required to complete the request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/batchElementUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/formUpdateResponse"
            }
          }
        }
      }
    },
    "/api/consumer/catalogItems/{id}/forms/request/{elementId}/values" : {
      "post" : {
        "tags" : [ "catalog" ],
        "summary" : "Get request form field value",
        "description" : "Retrieves the paged list of values for an element within the request form of a specified catalog item.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The catalog item identifier.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "elementId",
          "in" : "path",
          "description" : "The identifier of a target element within the catalog item.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "subtenantId",
          "in" : "query",
          "description" : "The ID of the Business Group used for viewing a Catalog Item.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "requestedFor",
          "in" : "query",
          "description" : "The value of the user Id to use when the intention is to request on behalf of someone else.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Specifies information required to complete the request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/elementValuesRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/elementValues"
            }
          }
        }
      }
    },
    "/api/consumer/catalogItems/{id}/icon" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Find catalog item icon",
        "description" : "Get a CatalogItem's Icon according to its unique id provided in the path.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The UUID of a catalog item",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "byte"
              }
            }
          }
        }
      }
    },
    "/api/consumer/entitledCatalogItemViews" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Consumer Catalog Item Views",
        "description" : "Get all ConsumerEntitledCatalogItemView for the current user.ConsumerEntitledCatalogItemView are basically catalog items: - in an active state. - the current user has the right to consume. - the current user is entitled to consume. - associated to a service.",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "query",
          "description" : "optional query parameter to filter the returned Catalog Items by one specific Service.",
          "required" : false,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "onBehalfOf",
          "in" : "query",
          "description" : "optional query parameter providing the value of the user Id to use when the intention is to request on behalf of someone else.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "subtenantId",
          "in" : "query",
          "description" : "optional query parameter which dictates if the output should be filtered for given subtenant only.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageConsumerEntitledCatalogItemView"
            }
          }
        }
      }
    },
    "/api/consumer/entitledCatalogItemViews/{id}" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get a Consumer Entitled Catalog Item View",
        "description" : "Get a ConsumerEntitledCatalogItemView by its unique Id.ConsumerEntitledCatalogItemView are basically catalog items: - in an active state. - the current user has the right to consume. - the current user is entitled to consume. - associated to a service.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The UUID of a catalog item",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/consumerEntitledCatalogItemView"
            }
          }
        }
      }
    },
    "/api/consumer/entitledCatalogItems" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get a Consumer Entitled Catalog Items",
        "description" : "Get a ConsumerEntitledCatalogItem by its unique Id.ConsumerEntitledCatalogItem are basically catalog items: - in an active state. - the current user has the right to consume. - the current user is entitled to consume. - associated to a service.",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "query",
          "description" : "Optional query parameter to filter the returned Catalog Items by one specific Service.",
          "required" : false,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "onBehalfOf",
          "in" : "query",
          "description" : "optional query parameter providing the value of the user Id to use when the intention is to request on behalf of someone else",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "subtenantId",
          "in" : "query",
          "description" : "optional query parameter which dictates if the output should be filtered for given subtenant only",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageConsumerEntitledCatalogItem"
            }
          }
        }
      }
    },
    "/api/consumer/entitledCatalogItems/{id}" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get a Consumer Entitled Catalog Item",
        "description" : "Get a ConsumerEntitledCatalogItem by its unique Id.ConsumerEntitledCatalogItem are basically catalog items: - in an active state. - the current user has the right to consume. - the current user is entitled to consume. - associated to a service.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The UUID of a catalog item",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/consumerEntitledCatalogItem"
            }
          }
        }
      }
    },
    "/api/consumer/entitledCatalogItems/{id}/requests" : {
      "post" : {
        "tags" : [ "catalog" ],
        "summary" : "Submit Catalog Item Provisioning Request",
        "description" : "Create and save a CatalogItemProvisioningRequest for the specified Catalog Item. If successful, the request will be saved in a 'Submitted' state. Its state should change to 'InProgress' during provisioning, and if all goes well, eventually become 'Success'. If any errors are encountered, its state will become 'Failed'.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The UUID of a catalog item",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "businessGroupId",
          "in" : "query",
          "description" : "A business group (i.e. subtenant) identifier.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "requestedFor",
          "in" : "query",
          "description" : "The fully qualified username of the user whom this request is being made in behalf of.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The CatalogItemProvisioningRequest to be submitted.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CatalogItemProvisioningRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CatalogItemRequest"
            }
          },
          "201" : {
            "description" : ""
          }
        }
      }
    },
    "/api/consumer/entitledCatalogItems/{id}/requests/schema" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Resource Action Request Schema",
        "description" : "Get the schema for requesting a Catalog Item to be provisioned.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The UUID of a catalog item",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Schema"
            }
          }
        }
      }
    },
    "/api/consumer/entitledCatalogItems/{id}/requests/template" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Catalog Item Provisioning Request Template",
        "description" : "Retrieve a template request in preparation for submitting a CatalogItemProvisioningRequest.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The UUID of a catalog item",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "businessGroupId",
          "in" : "query",
          "description" : "Optional business Group Id. If not specified, the business group associated with the catalog item is used",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "requestedFor",
          "in" : "query",
          "description" : "Optional userId for whom this request is being made. The currently logged in user is the default value.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CatalogItemProvisioningRequest"
            }
          }
        }
      }
    },
    "/api/consumer/requests" : {
      "post" : {
        "tags" : [ "catalog" ],
        "summary" : "Create request",
        "description" : "Create and save a Request upon validation on Request fields. This will save a Request creation event as well.",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The Request to be created and saved.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Request"
            }
          },
          "201" : {
            "description" : ""
          }
        }
      }
    },
    "/api/consumer/requests/{id}/forms/details" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Details Form",
        "description" : "Retrieve a read-only details form for presenting an existing request.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The request identifier.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/form"
            }
          }
        }
      }
    },
    "/api/consumer/requests/{id}/forms/details/update" : {
      "post" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Details Form Element Metadata",
        "description" : "Retrieves the metadata of one or more elements within the details form of a specified request.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The request identifier.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Specifies information required to complete the request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/batchElementUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/formUpdateResponse"
            }
          }
        }
      }
    },
    "/api/consumer/requests/{id}/forms/details/{elementId}/values" : {
      "post" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Details Form Field Values",
        "description" : "Retrieves the list of values for an element within the details form of a specified request.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The request identifier.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "elementId",
          "in" : "path",
          "description" : "The identifier of a target element within the request.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Specifies information required to complete the request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/elementValuesRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/elementValues"
            }
          }
        }
      }
    },
    "/api/consumer/requests/{id}/forms/submission" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Submission Form",
        "description" : "Retrieve an editable form for submitting an existing, un-submitted request.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The uuid of a Request.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/form"
            }
          }
        }
      }
    },
    "/api/consumer/requests/{id}/forms/submission/update" : {
      "post" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Submission Form Element Metadata",
        "description" : "Retrieves the metadata of one or more elements within the submission form of a specified request.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The request identifier.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Specifies information required to complete the request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/batchElementUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/formUpdateResponse"
            }
          }
        }
      }
    },
    "/api/consumer/requests/{id}/forms/submission/{elementId}/values" : {
      "post" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Submission Form Field Values",
        "description" : "Retrieves the list of values for an element within the submission form of a specified request.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The request identifier.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "elementId",
          "in" : "path",
          "description" : "The identifier of a target element within the request.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Specifies information required to complete the request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/elementValuesRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/elementValues"
            }
          }
        }
      }
    },
    "/api/consumer/requests/{id}/resourceViews" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get User Friendly Resource Provisioned By Request",
        "description" : "Retrieves the resources (using a domain object targetted for direct REST API users) that were provisioned as a result of a given request.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "UUID of a Request.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageConsumerResourceView"
            }
          }
        }
      }
    },
    "/api/consumer/requests/{id}/resources" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get provisioned resources",
        "description" : "Retrieves the resources that were provisioned as a result of a given request.In addition results can be filtered down using odata i.e ?$filter=resourceType/id = 'Infrastructure.Virtual'",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "UUID of a Request",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageConsumerResource"
            }
          }
        }
      }
    },
    "/api/consumer/requests/{requestId}" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Request",
        "description" : "Gets a Request corresponding to its unique Id. The Request is owned by the current user.",
        "parameters" : [ {
          "name" : "requestId",
          "in" : "path",
          "description" : "UUID of a Request.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Request"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "catalog" ],
        "summary" : "Update request",
        "description" : "Update a {@link Request} upon the existence of the Request and validation of Request fields. This will save a Request creation event as well.",
        "parameters" : [ {
          "name" : "requestId",
          "in" : "path",
          "description" : "UUID of the Request to be updated",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The Request to be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Request"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "delete" : {
        "tags" : [ "catalog" ],
        "summary" : "Delete Request",
        "description" : "Deletes a Request corresponding to its unique Id. The Request is owned by the current user. To be deleted, a request must be in an {@link RequestState}.UNSUBMITTED state. This will delete physically the request.",
        "parameters" : [ {
          "name" : "requestId",
          "in" : "path",
          "description" : "The uuid of a Request.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      }
    },
    "/api/consumer/resourceOperations/{id}" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Resource Operation",
        "description" : "Get a resource operation.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The UUID of an resource operation",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResourceOperation"
            }
          }
        }
      }
    },
    "/api/consumer/resourceOperations/{id}/icon" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Resource Operation Icon",
        "description" : "Get a Resource Operation's Icon according to its unique id provided in the path.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The UUID of an resource operation",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "byte"
              }
            }
          }
        }
      }
    },
    "/api/consumer/resourceTypes/{id}" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Resource Type",
        "description" : "Get a resource type by its unique identifier.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "A unique identifier for the resource type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResourceType"
            }
          }
        }
      }
    },
    "/api/consumer/resourceTypes/{id}/descendants" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Descendant Resource Type",
        "description" : "Gets a hierarchy of descendant resource types for given primary type.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "A unique identifier for the primary resource type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/entities"
            }
          }
        }
      }
    },
    "/api/consumer/resourceViews" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Resource Views",
        "description" : "Retrieves the resources (using a domain object targeted for direct REST API users) that were provisioned. <p/> This API is very similar to <tt>/api/consumer/resources</tt>, with only difference being that the <tt>ConsumerResource</tt> objects are transformed into the more API-friendly <tt>ConsumerResourceView</tt> objects",
        "parameters" : [ {
          "name" : "managedOnly",
          "in" : "query",
          "description" : "Managed Only Boolean",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "withExtendedData",
          "in" : "query",
          "description" : "With Extended Data Boolean",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "withOperations",
          "in" : "query",
          "description" : "With Operations Boolean",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageConsumerResourceView"
            }
          }
        }
      }
    },
    "/api/consumer/resourceViews/{id}" : {
      "get" : {
        "summary" : "",
        "description" : "Retrieves the resource (using a domain object targeted for direct REST API users) by its unique identifier. It retrieves a specific resource with its up to date Provider Data by its: unique id. <p/> This API is very similar to <tt>/api/consumer/resources/{id}</tt>, with only difference being that the <tt>ConsumerResource</tt> objects are transformed into the more API-friendly <tt>ConsumerResourceView</tt> objects",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "A unique identifier for the resource",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CatalogResourceView"
            }
          }
        }
      }
    },
    "/api/consumer/resources/types/{resourceTypeId}" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Resources By Resource Type",
        "description" : "Fetches the resources given a Resource Type, accessible to the current user from the CAFE database.",
        "parameters" : [ {
          "name" : "resourceTypeId",
          "in" : "path",
          "description" : "The Resource Type Id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "managedOnly",
          "in" : "query",
          "description" : "Managed Only Boolean",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "withExtendedData",
          "in" : "query",
          "description" : "With Extended Data Boolean",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "withOperations",
          "in" : "query",
          "description" : "With Operations Boolean",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageConsumerResource"
            }
          }
        }
      }
    },
    "/api/consumer/resources/{id}" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Resource",
        "description" : "Get a resource by its unique identifier. It retrieves a specific resource with its up to date Provider Data by its unique id.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "A unique identifier for the resource, which has been generated by the service catalog.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/catalogResource"
            }
          }
        }
      }
    },
    "/api/consumer/resources/{id}/form" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Resource Details Form",
        "description" : "Retrieve a read only form for the details of a resource.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "A unique identifier for the resource.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/form"
            }
          }
        }
      }
    },
    "/api/consumer/resources/{id}/form/update" : {
      "post" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Resource Details Form Element Values",
        "description" : "Retrieves the metadata of multiple dynamic elements in single call. It combines the retrieval of element's {@link ElementState} and the list of {@link PermissibleValue} for each element.  <p> This method is not used for retrieving a subset of all the potential values of a field based on some search text or criteria. It should be used for retrieving all the possible values for a field, which is expected to be limited in size.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "A unique identifier for the resource.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Specifies information required to complete the request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/batchElementUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/formUpdateResponse"
            }
          }
        }
      }
    },
    "/api/consumer/resources/{id}/form/{elementId}/values" : {
      "post" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Resource Details Form Element Values",
        "description" : "Retrieves a list of the permissible values for a specified element within the details form.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "A unique identifier for the resource.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "elementId",
          "in" : "path",
          "description" : "The identifier of the element within the form.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Specifies information required to complete the request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/elementValuesRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/elementValues"
            }
          }
        }
      }
    },
    "/api/consumer/resources/{id}/icon" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Icon For Resource",
        "description" : "Get the icon for a given resource",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "A unique identifier for the resource.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "byte"
              }
            }
          }
        }
      }
    },
    "/api/consumer/resources/{resourceId}/actions" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Available Resource Operations",
        "description" : "Retrieves the complete list of available operations that can be performed on a given resource.",
        "parameters" : [ {
          "name" : "resourceId",
          "in" : "path",
          "description" : "A unique identifier for the resource.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/entities"
            }
          }
        }
      }
    },
    "/api/consumer/resources/{resourceId}/actions/{resourceActionId}/forms/request" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Resource Action Request Form",
        "description" : "Get the form for triggering a resource action.",
        "parameters" : [ {
          "name" : "resourceId",
          "in" : "path",
          "description" : "A unique identifier for the resource.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "resourceActionId",
          "in" : "path",
          "description" : "The id of the action to perform.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/form"
            }
          }
        }
      }
    },
    "/api/consumer/resources/{resourceId}/actions/{resourceActionId}/forms/request/update" : {
      "post" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Resource Action Request Form Element State",
        "description" : "Retrieves the metadata of one or more elements within the request form of a resource action.",
        "parameters" : [ {
          "name" : "resourceId",
          "in" : "path",
          "description" : "A unique identifier for the resource.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "resourceActionId",
          "in" : "path",
          "description" : "The id of the action to perform.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Specifies information required to complete the request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/batchElementUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/formUpdateResponse"
            }
          }
        }
      }
    },
    "/api/consumer/resources/{resourceId}/actions/{resourceActionId}/forms/request/{elementId}/values" : {
      "post" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Resource Action Request Form Field Values",
        "description" : "This retrieves the permissible values for the specified field.",
        "parameters" : [ {
          "name" : "resourceId",
          "in" : "path",
          "description" : "A unique identifier for the resource.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "resourceActionId",
          "in" : "path",
          "description" : "The id of the action to perform.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "elementId",
          "in" : "path",
          "description" : "The identifier of a target element within the resource action.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Specifies information required to complete the request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/elementValuesRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/elementValues"
            }
          }
        }
      }
    },
    "/api/consumer/resources/{resourceId}/actions/{resourceActionId}/requests" : {
      "post" : {
        "tags" : [ "catalog" ],
        "summary" : "Submit Catalog Resource Request",
        "description" : "Make a day-two resource action request.",
        "parameters" : [ {
          "name" : "resourceId",
          "in" : "path",
          "description" : "A unique identifier for the resource.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "resourceActionId",
          "in" : "path",
          "description" : "The id of the action to perform.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request data.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CatalogResourceRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestEntity"
            }
          },
          "201" : {
            "description" : ""
          }
        }
      }
    },
    "/api/consumer/resources/{resourceId}/actions/{resourceActionId}/requests/schema" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Resource Action Request Schema",
        "description" : "Get the schema for triggering a resource action.",
        "parameters" : [ {
          "name" : "resourceId",
          "in" : "path",
          "description" : "A unique identifier for the resource.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "resourceActionId",
          "in" : "path",
          "description" : "The id of the action to perform.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Schema"
            }
          }
        }
      }
    },
    "/api/consumer/resources/{resourceId}/actions/{resourceActionId}/requests/template" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Catalog Resource Request Template",
        "description" : "Retrieve a template CatalogResourceRequest for the given context. This object may be updated as desired and posted/submitted to /{resourceId}/actions/{resourceActionId}/requests (submitCatalogResourceRequest) in order to trigger a 'day 2 action' on the requested resource.",
        "parameters" : [ {
          "name" : "resourceId",
          "in" : "path",
          "description" : "A unique identifier for the resource.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "resourceActionId",
          "in" : "path",
          "description" : "The id of the action to perform.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CatalogResourceRequest"
            }
          }
        }
      }
    },
    "/api/consumer/services" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Services",
        "description" : "Get all Active Services the current user is entitled to see. Each returned services must own at least one Catalog Item the current user is entitled to.",
        "parameters" : [ {
          "name" : "onBehalfOf",
          "in" : "query",
          "description" : "The value of the user Id when the intention is to request on behalf of someone else",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageService"
            }
          }
        }
      }
    },
    "/api/entitlements" : {
      "post" : {
        "tags" : [ "catalog" ],
        "summary" : "Create Entitlement",
        "description" : "Create an {@link Entitlement}.This will check the existence of the Entitlement and validate its fields according to business rules.For e.g.it validates that an organization is specified for the entitlement.",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The Entitlement to create.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Entitlement"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Entitlement"
            }
          },
          "201" : {
            "description" : ""
          }
        }
      }
    },
    "/api/entitlements/order" : {
      "post" : {
        "tags" : [ "catalog" ],
        "summary" : "Set the Ordering",
        "description" : "Update the order of existing entitlements for a Tenant.",
        "parameters" : [ {
          "name" : "subtenantId",
          "in" : "query",
          "description" : "The subtenant Id of the subtenant that the entitlement is a part of.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "A MultipleLiteral} comprising a list of String literals which are Entitlement IDs.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/multipleLiteral"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      }
    },
    "/api/entitlements/{id}" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get entitlement",
        "description" : "Gets an Entitlement corresponding to its unique Id.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The uuid of an Entitlement.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Entitlement"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "catalog" ],
        "summary" : "Update entitlement",
        "description" : "Update an Entitlement upon the existence and validation of Entitlement.",
        "operationId" : "updateEntitlement",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The UUID of the Entitlement to be updated",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The Entitlement to be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Entitlement"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "delete" : {
        "tags" : [ "catalog" ],
        "summary" : "Delete an entitlement",
        "description" : "Delete entitlement corresponding to the given id.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The uuid of an Entitlement.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      }
    },
    "/api/icons" : {
      "post" : {
        "tags" : [ "catalog" ],
        "summary" : "Create or Update Icon",
        "description" : "Publish a Icon to the service catalog. Updates an existing icon or creates a new one if none has been published with the given id.",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The icon object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Icon"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Icon"
            }
          },
          "201" : {
            "description" : ""
          }
        }
      }
    },
    "/api/icons/{id}" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Icon",
        "description" : "Retrieve an existing Icon that was published to the service catalog.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id which identifies a icon.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      },
      "delete" : {
        "tags" : [ "catalog" ],
        "summary" : "Delete an Icon",
        "description" : "Delet an Icon from the service catalog. If the icon is one of the default system icons, it will be reverted to its default state instead of being deleted.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the icon to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      }
    },
    "/api/icons/{id}/download" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Download Icon",
        "description" : "Download an existing Icon from service catalog.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id which identifies a icon.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "byte"
              }
            }
          }
        }
      }
    },
    "/api/providerTypes" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Provider Types",
        "description" : "Finds all ProviderTypes.",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageProviderType"
            }
          }
        }
      }
    },
    "/api/providers" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Providers",
        "description" : "Finds all Providers.",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageProvider"
            }
          }
        }
      }
    },
    "/api/resourceOperations" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Operations",
        "description" : "Get the ResourceOperations that the current user has permission to read.",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageResourceOperation"
            }
          }
        }
      }
    },
    "/api/resourceOperations/{id}" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Operation",
        "description" : "Get a ResourceOperation specified by its id.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique id of the resource operation to retrieve.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResourceOperation"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "catalog" ],
        "summary" : "Update Resource Operation",
        "description" : "Update an existing ResourceOperation.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the resource operation to update.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The updated data for the resource operation.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ResourceOperationUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResourceOperation"
            }
          }
        }
      }
    },
    "/api/resourceOperations/{id}/entitlements" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Find Entitlements For Operation",
        "description" : "Get all the Entitlements that entitle the specified resource operation.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique id of the resource operation to retrieve.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageEntitlement"
            }
          }
        }
      }
    },
    "/api/resourceOperations/{id}/icon" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Find Operation Icon",
        "description" : "Get the icon for a resource operation.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the resource operation to update.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "byte"
              }
            }
          }
        }
      }
    },
    "/api/resourceTypes" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Resource Types",
        "description" : "Finds all ResourceTypes that the user has permissions to review.",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageResourceType"
            }
          }
        }
      }
    },
    "/api/services" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Services",
        "description" : "Finds all Services that the currently logged in user has access to.",
        "operationId" : "getServicesForUser",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageService"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "catalog" ],
        "summary" : "Create Service",
        "description" : "Create a new Service.",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The Service to be created.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Service"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Service"
            }
          },
          "201" : {
            "description" : ""
          }
        }
      }
    },
    "/api/services/{id}" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Get Service",
        "description" : "Retrieve an existing Service. It checks if the user is permitted to view the service.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier for the Service.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Service"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "catalog" ],
        "summary" : "Update Service",
        "description" : "Updates an existing Service.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier for the Service.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The service to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Service"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/services/{id}/catalogItems" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Find All Catalog Items For A Service",
        "description" : "Retrieve all the catalog items belonging to a given service.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier for the Service.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageCatalogItem"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "AndClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "subClauses" : {
            "type" : "array",
            "xml" : {
              "name" : "clause"
            },
            "items" : {
              "$ref" : "#/definitions/Clause"
            }
          }
        }
      } ]
    },
    "BooleanLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "description" : "Wraps a boolean value.",
        "xml" : {
          "name" : "booleanLiteral"
        }
      } ]
    },
    "CallbackEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object"
      } ]
    },
    "CatalogItem" : {
      "type" : "object",
      "properties" : {
        "callbacks" : {
          "$ref" : "#/definitions/CatalogItemCallbackSupport"
        },
        "catalogItemTypeRef" : {
          "$ref" : "#/definitions/CatalogItemType"
        },
        "dateCreated" : {
          "type" : "string",
          "format" : "date-time"
        },
        "description" : {
          "type" : "string"
        },
        "forms" : {
          "$ref" : "#/definitions/CatalogItemForms"
        },
        "iconId" : {
          "$ref" : "#/definitions/Icon"
        },
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "isNoteworthy" : {
          "type" : "boolean",
          "default" : false
        },
        "lastUpdatedDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "name" : {
          "type" : "string"
        },
        "organization" : {
          "$ref" : "#/definitions/Organization"
        },
        "outputResourceTypeRef" : {
          "$ref" : "#/definitions/ResourceType"
        },
        "providerBinding" : {
          "$ref" : "#/definitions/ProviderBinding"
        },
        "serviceRef" : {
          "$ref" : "#/definitions/Service"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "STAGING", "PUBLISHED", "RETIRED", "DELETED" ]
        },
        "statusName" : {
          "type" : "string"
        },
        "quota" : {
          "type" : "integer",
          "format" : "int32"
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        },
        "requestable" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        }
      }
    },
    "CatalogItemCallbackSupport" : {
      "type" : "object",
      "properties" : {
        "validate" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "rollback" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "itemInformation" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "itemInitialize" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        }
      }
    },
    "CatalogItemForms" : {
      "type" : "object",
      "properties" : {
        "itemDetails" : {
          "$ref" : "#/definitions/FormReference"
        },
        "catalogRequestInfoHidden" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "requestFormScale" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "SMALL", "BIG" ]
        },
        "requestSubmission" : {
          "$ref" : "#/definitions/FormReference"
        },
        "requestDetails" : {
          "$ref" : "#/definitions/FormReference"
        },
        "requestPreApproval" : {
          "$ref" : "#/definitions/FormReference"
        },
        "requestPostApproval" : {
          "$ref" : "#/definitions/FormReference"
        }
      }
    },
    "CatalogItemProvisioningRequest" : {
      "type" : "object",
      "properties" : {
        "catalogItemId" : {
          "type" : "string",
          "format" : "uuid"
        },
        "requestedFor" : {
          "type" : "string"
        },
        "businessGroupId" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "reasons" : {
          "type" : "string"
        },
        "data" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      },
      "xml" : {
        "name" : "CatalogItemProvisioningRequest"
      }
    },
    "CatalogItemRequest" : {
      "type" : "object",
      "required" : [ "catalogItemRef", "state" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "iconId" : {
          "$ref" : "#/definitions/Icon"
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        },
        "requestNumber" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        },
        "state" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "UNSUBMITTED", "SUBMITTED", "DELETED", "PENDING_PRE_APPROVAL", "PRE_APPROVAL_SEND_ERROR", "PRE_APPROVED", "PRE_REJECTED", "PROVIDER_DELETION_ERROR", "IN_PROGRESS", "PROVIDER_SEND_ERROR", "PROVIDER_COMPLETED", "PROVIDER_FAILED", "PENDING_POST_APPROVAL", "POST_APPROVAL_SEND_ERROR", "POST_APPROVED", "POST_REJECTION_RECEIVED", "ROLLBACK_ERROR", "POST_REJECTED", "SUCCESSFUL", "PARTIALLY_SUCCESSFUL", "FAILED" ]
        },
        "description" : {
          "type" : "string"
        },
        "reasons" : {
          "type" : "string"
        },
        "requestedFor" : {
          "type" : "string"
        },
        "requestedBy" : {
          "type" : "string"
        },
        "organization" : {
          "$ref" : "#/definitions/Organization"
        },
        "requestorEntitlementId" : {
          "$ref" : "#/definitions/Entitlement"
        },
        "preApprovalId" : {
          "type" : "string"
        },
        "postApprovalId" : {
          "type" : "string"
        },
        "dateCreated" : {
          "type" : "string",
          "format" : "date-time"
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time"
        },
        "dateSubmitted" : {
          "type" : "string",
          "format" : "date-time"
        },
        "dateApproved" : {
          "type" : "string",
          "format" : "date-time"
        },
        "dateCompleted" : {
          "type" : "string",
          "format" : "date-time"
        },
        "quote" : {
          "$ref" : "#/definitions/RequestQuote"
        },
        "requestCompletion" : {
          "$ref" : "#/definitions/RequestCompletion"
        },
        "requestData" : {
          "$ref" : "#/definitions/literalMap"
        },
        "retriesRemaining" : {
          "type" : "integer",
          "format" : "int64"
        },
        "requestedItemName" : {
          "type" : "string"
        },
        "requestedItemDescription" : {
          "type" : "string"
        },
        "components" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RequestComponent"
          }
        },
        "stateName" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "catalogItemRef" : {
          "$ref" : "#/definitions/CatalogItem"
        },
        "catalogItemProviderBinding" : {
          "$ref" : "#/definitions/ProviderBinding"
        },
        "phase" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "UNSUBMITTED", "PENDING_PRE_APPROVAL", "IN_PROGRESS", "PENDING_POST_APPROVAL", "SUCCESSFUL", "FAILED", "REJECTED" ]
        },
        "executionStatus" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "NOT_STARTED", "STARTED", "STOPPED" ]
        },
        "approvalStatus" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "PENDING", "PRE_APPROVED", "POST_APPROVED", "REJECTED" ]
        },
        "waitingStatus" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "NOT_WAITING", "WAITING_FOR_APPROVAL", "WAITING_FOR_PROVIDER" ]
        }
      }
    },
    "CatalogItemType" : {
      "type" : "object",
      "required" : [ "requestable" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "itemSchema" : {
          "$ref" : "#/definitions/SchemaInfo"
        },
        "requestSchema" : {
          "$ref" : "#/definitions/SchemaInfo"
        },
        "forms" : {
          "$ref" : "#/definitions/CatalogItemForms"
        },
        "callbacks" : {
          "$ref" : "#/definitions/CatalogItemCallbackSupport"
        },
        "providerTypeId" : {
          "$ref" : "#/definitions/ProviderType"
        },
        "providerId" : {
          "$ref" : "#/definitions/Provider"
        },
        "iconId" : {
          "$ref" : "#/definitions/Icon"
        },
        "outputResourceTypeId" : {
          "$ref" : "#/definitions/ResourceType"
        },
        "requestable" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "createCustomApprovalTypes" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        }
      }
    },
    "CatalogResourceRequest" : {
      "type" : "object",
      "properties" : {
        "resourceId" : {
          "type" : "string",
          "format" : "uuid"
        },
        "actionId" : {
          "type" : "string",
          "format" : "uuid"
        },
        "description" : {
          "type" : "string"
        },
        "reasons" : {
          "type" : "string"
        },
        "data" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      },
      "xml" : {
        "name" : "CatalogResourceRequest"
      }
    },
    "CatalogResourceView" : {
      "type" : "object",
      "properties" : {
        "resourceId" : {
          "type" : "string"
        },
        "iconId" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string"
        },
        "catalogItemId" : {
          "type" : "string"
        },
        "catalogItemLabel" : {
          "type" : "string"
        },
        "requestId" : {
          "type" : "string"
        },
        "requestState" : {
          "type" : "string",
          "enum" : [ "UNSUBMITTED", "SUBMITTED", "DELETED", "PENDING_PRE_APPROVAL", "PRE_APPROVAL_SEND_ERROR", "PRE_APPROVED", "PRE_REJECTED", "PROVIDER_DELETION_ERROR", "IN_PROGRESS", "PROVIDER_SEND_ERROR", "PROVIDER_COMPLETED", "PROVIDER_FAILED", "PENDING_POST_APPROVAL", "POST_APPROVAL_SEND_ERROR", "POST_APPROVED", "POST_REJECTION_RECEIVED", "ROLLBACK_ERROR", "POST_REJECTED", "SUCCESSFUL", "PARTIALLY_SUCCESSFUL", "FAILED" ]
        },
        "resourceType" : {
          "type" : "string"
        },
        "owners" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "businessGroupId" : {
          "type" : "string"
        },
        "tenantId" : {
          "type" : "string"
        },
        "dateCreated" : {
          "type" : "string",
          "format" : "date-time"
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time"
        },
        "lease" : {
          "$ref" : "#/definitions/ResourceLease"
        },
        "costs" : {
          "$ref" : "#/definitions/ResourceCosts"
        },
        "costToDate" : {
          "$ref" : "#/definitions/literal"
        },
        "totalCost" : {
          "$ref" : "#/definitions/literal"
        },
        "parentResourceId" : {
          "type" : "string"
        },
        "hasChildren" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "links" : {
          "type" : "array",
          "xml" : {
            "name" : "links",
            "wrapped" : true
          },
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        }
      },
      "xml" : {
        "name" : "CatalogResourceView"
      }
    },
    "CatalogTenant" : {
      "type" : "object",
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "lastSync" : {
          "type" : "string",
          "format" : "date-time"
        },
        "expired" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "ChangeWindow" : {
      "type" : "object",
      "properties" : {
        "dayOfWeek" : {
          "type" : "string",
          "enum" : [ "SUNDAY", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY" ]
        },
        "hours" : {
          "$ref" : "#/definitions/TimeRange"
        }
      }
    },
    "Clause" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "CoalesceEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "arguments" : {
            "type" : "array",
            "xml" : {
              "name" : "argument",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "Column" : {
      "type" : "object",
      "required" : [ "dataType" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "label" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "orderIndex" : {
          "type" : "integer",
          "format" : "int32"
        },
        "dataType" : {
          "$ref" : "#/definitions/DataType"
        },
        "displayAdvice" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "TEXTBOX", "HYPERLINK", "EMAIL", "TEXTAREA", "DATE_TIME_PICKER", "CHECKBOX", "YES_NO", "CHECKBOX_GROUP", "DUAL_LIST", "RADIO_GROUP", "DROPDOWN", "LIST", "SEARCHER", "TREE", "FORM", "IMAGE", "SLIDER", "DATA_TABLE", "VALUE_PICKER", "CONFIRM_PASSWORD" ]
        },
        "permissibleValues" : {
          "$ref" : "#/definitions/PermissibleValueList"
        },
        "state" : {
          "$ref" : "#/definitions/ElementState"
        },
        "filterable" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "sortable" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "isMultiValued" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        }
      }
    },
    "ComplexDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object",
        "properties" : {
          "schema" : {
            "$ref" : "#/definitions/Schema"
          }
        }
      } ]
    },
    "ComplexEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "componentTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "typeFilter" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "values" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "ConditionalEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "cases" : {
            "type" : "array",
            "xml" : {
              "name" : "case"
            },
            "items" : {
              "$ref" : "#/definitions/ConditionalEvaluatorCase"
            }
          },
          "defaulValue" : {
            "$ref" : "#/definitions/Evaluator"
          }
        }
      } ]
    },
    "ConditionalEvaluatorCase" : {
      "type" : "object",
      "properties" : {
        "condition" : {
          "$ref" : "#/definitions/Clause"
        },
        "value" : {
          "$ref" : "#/definitions/Evaluator"
        }
      }
    },
    "ConstantClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/booleanLiteral"
          }
        }
      } ]
    },
    "ConstantValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/literal"
          }
        }
      } ]
    },
    "Constraint" : {
      "type" : "object",
      "required" : [ "value" ],
      "discriminator" : "type",
      "properties" : {
        "value" : {
          "$ref" : "#/definitions/Evaluator"
        }
      }
    },
    "ConsumerResourceOperation" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "iconId" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "ACTION", "EXTENSION" ]
        },
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "extensionId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "providerTypeId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "bindingId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "hasForm" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "formScale" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "SMALL", "BIG" ]
        }
      }
    },
    "ContainsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "ContextPermissibleValueList" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PermissibleValueList"
      }, {
        "type" : "object"
      } ]
    },
    "CostToDate" : {
      "type" : "object",
      "properties" : {
        "amount" : {
          "type" : "number",
          "format" : "double"
        },
        "currencyCode" : {
          "type" : "string"
        },
        "asOnDate" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "CriteriaOperator" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "CustomPropertyDefinitionMetadata" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object",
        "required" : [ "field" ],
        "properties" : {
          "field" : {
            "$ref" : "#/definitions/Field"
          }
        }
      } ]
    },
    "CustomValidationConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "DataType" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "typeId" : {
          "type" : "string",
          "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
        }
      }
    },
    "DefaultValueBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "DisplayTextBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "DynamicLayoutReference" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutReference"
      }, {
        "type" : "object",
        "properties" : {
          "dependencies" : {
            "type" : "array",
            "xml" : {
              "name" : "dependency",
              "wrapped" : true
            },
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "DynamicPermissibleValueList" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PermissibleValueList"
      }, {
        "type" : "object",
        "properties" : {
          "context" : {
            "$ref" : "#/definitions/DynamicValueContext"
          },
          "dependencies" : {
            "type" : "array",
            "xml" : {
              "name" : "dependency",
              "wrapped" : true
            },
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "DynamicValueContext" : {
      "type" : "object",
      "required" : [ "parameterMappings" ],
      "properties" : {
        "providerEntityId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "parameterMappings" : {
          "$ref" : "#/definitions/ParameterMappingCollection"
        }
      }
    },
    "EditableBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "ElementState" : {
      "type" : "object",
      "properties" : {
        "dependencies" : {
          "type" : "array",
          "xml" : {
            "name" : "dependency",
            "wrapped" : true
          },
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "facets" : {
          "type" : "array",
          "xml" : {
            "name" : "facet",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/Constraint"
          }
        }
      }
    },
    "ElementValuesPagingInfo" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "EncryptedBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "EndsWithOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "EntitledCatalogItem" : {
      "type" : "object",
      "properties" : {
        "approvalPolicyId" : {
          "type" : "string"
        },
        "hidden" : {
          "type" : "boolean",
          "default" : false
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "catalogItemRef" : {
          "$ref" : "#/definitions/CatalogItem"
        },
        "catalogItemRequestable" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "EntitledResourceOperation" : {
      "type" : "object",
      "properties" : {
        "approvalPolicyId" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "externalId" : {
          "type" : "string"
        },
        "targetResourceTypeRef" : {
          "$ref" : "#/definitions/ResourceType"
        },
        "resourceOperationRef" : {
          "$ref" : "#/definitions/ResourceOperation"
        },
        "resourceOperationType" : {
          "type" : "string",
          "enum" : [ "ACTION", "EXTENSION" ]
        }
      }
    },
    "EntitledService" : {
      "type" : "object",
      "properties" : {
        "approvalPolicyId" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "serviceRef" : {
          "$ref" : "#/definitions/Service"
        }
      }
    },
    "Entitlement" : {
      "type" : "object",
      "required" : [ "status" ],
      "properties" : {
        "description" : {
          "type" : "string"
        },
        "entitledCatalogItems" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EntitledCatalogItem"
          }
        },
        "entitledResourceOperations" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EntitledResourceOperation"
          }
        },
        "entitledServices" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EntitledService"
          }
        },
        "expiryDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "lastUpdatedBy" : {
          "type" : "string"
        },
        "lastUpdatedDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "name" : {
          "type" : "string"
        },
        "organization" : {
          "$ref" : "#/definitions/Organization"
        },
        "principals" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Principal"
          }
        },
        "priorityOrder" : {
          "type" : "integer",
          "format" : "int32"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "DRAFT", "ACTIVE", "INACTIVE" ]
        },
        "statusName" : {
          "type" : "string"
        },
        "localScopeForActions" : {
          "type" : "boolean",
          "default" : false
        },
        "allUsers" : {
          "type" : "boolean",
          "default" : false
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "EntityReferenceDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object"
      } ]
    },
    "EqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "Evaluator" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "Expression" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "operator" : {
            "$ref" : "#/definitions/CriteriaOperator"
          },
          "leftOperand" : {
            "$ref" : "#/definitions/Evaluator"
          },
          "rightOperand" : {
            "$ref" : "#/definitions/Evaluator"
          }
        }
      } ]
    },
    "ExtensionForm" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FormReference"
      }, {
        "type" : "object",
        "properties" : {
          "extensionId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "extensionPointId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        }
      } ]
    },
    "ExtensionRendererContext" : {
      "type" : "object",
      "properties" : {
        "extensionId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "parameterMappings" : {
          "$ref" : "#/definitions/ParameterMappingCollection"
        }
      }
    },
    "ExternalFormReference" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FormReference"
      }, {
        "type" : "object",
        "properties" : {
          "formId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        }
      } ]
    },
    "ExternalValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "required" : [ "dynamicValueProviderInfo" ],
        "properties" : {
          "dynamicValueProviderInfo" : {
            "$ref" : "#/definitions/DynamicValueContext"
          }
        }
      } ]
    },
    "FacetValueMap" : {
      "type" : "object",
      "properties" : {
        "facets" : {
          "type" : "array",
          "xml" : {
            "name" : "facet",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/FacetValueMapEntry"
          }
        }
      }
    },
    "FacetValueMapEntry" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "value" : {
          "$ref" : "#/definitions/literal"
        }
      }
    },
    "Field" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "label" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "dataType" : {
          "$ref" : "#/definitions/DataType"
        },
        "displayAdvice" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "TEXTBOX", "HYPERLINK", "EMAIL", "TEXTAREA", "DATE_TIME_PICKER", "CHECKBOX", "YES_NO", "CHECKBOX_GROUP", "DUAL_LIST", "RADIO_GROUP", "DROPDOWN", "LIST", "SEARCHER", "TREE", "FORM", "IMAGE", "SLIDER", "DATA_TABLE", "VALUE_PICKER", "CONFIRM_PASSWORD" ]
        },
        "orderIndex" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        },
        "permissibleValues" : {
          "$ref" : "#/definitions/PermissibleValueList"
        },
        "state" : {
          "$ref" : "#/definitions/ElementState"
        },
        "isMultiValued" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "columns" : {
          "type" : "array",
          "xml" : {
            "name" : "column",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/Field"
          }
        }
      }
    },
    "FieldReference" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "path" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        }
      } ]
    },
    "FixedValueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "FormReference" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "GreaterThanOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "GreaterThanOrEqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "IaasPropertyNameBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "Icon" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "fileName" : {
          "type" : "string"
        },
        "contentType" : {
          "type" : "string"
        },
        "image" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "byte"
          }
        },
        "organization" : {
          "$ref" : "#/definitions/Organization"
        }
      }
    },
    "IncrementBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "InternalConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "IsDefinedOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "LayoutCell" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "LayoutExtension" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutCell"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "extensionId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "extensionPointId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "fieldPrefix" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          }
        }
      } ]
    },
    "LayoutField" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutFlowElement"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "label" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "orderIndex" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dataType" : {
            "$ref" : "#/definitions/DataType"
          },
          "displayAdvice" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "TEXTBOX", "HYPERLINK", "EMAIL", "TEXTAREA", "DATE_TIME_PICKER", "CHECKBOX", "YES_NO", "CHECKBOX_GROUP", "DUAL_LIST", "RADIO_GROUP", "DROPDOWN", "LIST", "SEARCHER", "TREE", "FORM", "IMAGE", "SLIDER", "DATA_TABLE", "VALUE_PICKER", "CONFIRM_PASSWORD" ]
          },
          "permissibleValues" : {
            "$ref" : "#/definitions/PermissibleValueList"
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          },
          "labelSize" : {
            "type" : "integer",
            "format" : "int32",
            "xml" : {
              "attribute" : true
            }
          },
          "detailLayout" : {
            "$ref" : "#/definitions/LayoutReference"
          },
          "extensionRendererContext" : {
            "$ref" : "#/definitions/ExtensionRendererContext"
          },
          "isMultiValued" : {
            "type" : "boolean",
            "xml" : {
              "attribute" : true
            },
            "default" : false
          },
          "columns" : {
            "type" : "array",
            "xml" : {
              "name" : "column",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/LayoutField"
            }
          }
        }
      } ]
    },
    "LayoutFlow" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutCell"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          },
          "parts" : {
            "type" : "array",
            "xml" : {
              "name" : "part",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/LayoutFlowElement"
            }
          }
        }
      } ]
    },
    "LayoutFlowElement" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutCell"
      }, {
        "type" : "object"
      } ]
    },
    "LayoutPage" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "label" : {
          "type" : "string"
        },
        "state" : {
          "$ref" : "#/definitions/ElementState"
        },
        "sections" : {
          "type" : "array",
          "xml" : {
            "name" : "section",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/LayoutSection"
          }
        }
      }
    },
    "LayoutPlaceholderCell" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutCell"
      }, {
        "type" : "object"
      } ]
    },
    "LayoutReference" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "LayoutRow" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "xml" : {
            "name" : "item",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/LayoutCell"
          }
        }
      }
    },
    "LayoutSection" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "label" : {
          "type" : "string"
        },
        "state" : {
          "$ref" : "#/definitions/ElementState"
        },
        "rows" : {
          "type" : "array",
          "xml" : {
            "name" : "row",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/LayoutRow"
          }
        }
      }
    },
    "LayoutText" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutFlowElement"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "value" : {
            "type" : "string"
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          }
        }
      } ]
    },
    "LessThanOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "LessThanOrEqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "Link" : {
      "type" : "object",
      "properties" : {
        "rel" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "LiteralMapEntry" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "value" : {
          "$ref" : "#/definitions/literal"
        }
      }
    },
    "MandatoryConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaxCardinalityConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaxLengthConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaxValueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaximumValueEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "arguments" : {
            "type" : "array",
            "xml" : {
              "name" : "argument",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "MinCardinalityConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MinLengthConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MinValueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MinimumValueEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "arguments" : {
            "type" : "array",
            "xml" : {
              "name" : "argument",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "MonetaryValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "currencyCode" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The ISO 4217 code used to identify the currency (if any) associated with this value."
          }
        },
        "description" : "Base type for representing monetary values, encapsulating both some kind of quantity and a currency.",
        "xml" : {
          "name" : "literal"
        }
      } ]
    },
    "MoneyTimeRate" : {
      "allOf" : [ {
        "$ref" : "#/definitions/moneyTimeRate"
      }, {
        "type" : "object",
        "description" : "Represents a rate of money over time.",
        "xml" : {
          "name" : "moneyTimeRate"
        }
      } ]
    },
    "MultipleEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "required" : [ "items" ],
        "properties" : {
          "elementTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "NotClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "subClause" : {
            "$ref" : "#/definitions/Clause"
          }
        }
      } ]
    },
    "NotEqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "NullDisplayTextBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "ObjectDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object",
        "properties" : {
          "componentTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "typeFilter" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "label" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        }
      } ]
    },
    "OrClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "subClauses" : {
            "type" : "array",
            "xml" : {
              "name" : "clause"
            },
            "items" : {
              "$ref" : "#/definitions/Clause"
            }
          }
        }
      } ]
    },
    "Organization" : {
      "type" : "object"
    },
    "PageCatalogItem" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CatalogItem"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageCatalogItemType" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CatalogItemType"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageConsumerEntitledCatalogItem" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/consumerEntitledCatalogItem"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageConsumerEntitledCatalogItemView" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/consumerEntitledCatalogItemView"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageConsumerResource" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/catalogResource"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageConsumerResourceView" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CatalogResourceView"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageEntitlement" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Entitlement"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageProvider" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Provider"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageProviderType" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ProviderType"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageResourceOperation" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResourceOperation"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageResourceType" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResourceType"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageService" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Service"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ParameterMapping" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "value" : {
          "$ref" : "#/definitions/Evaluator"
        }
      }
    },
    "ParameterMappingCollection" : {
      "type" : "object",
      "properties" : {
        "params" : {
          "type" : "array",
          "xml" : {
            "name" : "param",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/ParameterMapping"
          }
        }
      }
    },
    "PermissibleValueList" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "customAllowed" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        }
      }
    },
    "PrimitiveDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object",
        "properties" : {
          "typeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
          }
        }
      } ]
    },
    "Principal" : {
      "type" : "object",
      "required" : [ "ref", "tenantName", "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "tenantName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "ref" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "type" : {
          "type" : "string",
          "enum" : [ "GROUP", "USER", "CUSTOM_GROUP", "SSO_GROUP" ]
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "lastSync" : {
          "type" : "string",
          "format" : "date-time"
        },
        "expired" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "Provider" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "providerTypeId" : {
          "$ref" : "#/definitions/ProviderType"
        }
      }
    },
    "ProviderBinding" : {
      "type" : "object",
      "properties" : {
        "bindingId" : {
          "type" : "string"
        },
        "providerRef" : {
          "$ref" : "#/definitions/Provider"
        }
      }
    },
    "ProviderType" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "ReadOnlyConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "RefreshOnChangeBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "RegexpConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object",
        "properties" : {
          "errorMessage" : {
            "type" : "string"
          }
        }
      } ]
    },
    "Request" : {
      "type" : "object",
      "required" : [ "state" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "iconId" : {
          "$ref" : "#/definitions/Icon"
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        },
        "requestNumber" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        },
        "state" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "UNSUBMITTED", "SUBMITTED", "DELETED", "PENDING_PRE_APPROVAL", "PRE_APPROVAL_SEND_ERROR", "PRE_APPROVED", "PRE_REJECTED", "PROVIDER_DELETION_ERROR", "IN_PROGRESS", "PROVIDER_SEND_ERROR", "PROVIDER_COMPLETED", "PROVIDER_FAILED", "PENDING_POST_APPROVAL", "POST_APPROVAL_SEND_ERROR", "POST_APPROVED", "POST_REJECTION_RECEIVED", "ROLLBACK_ERROR", "POST_REJECTED", "SUCCESSFUL", "PARTIALLY_SUCCESSFUL", "FAILED" ]
        },
        "description" : {
          "type" : "string"
        },
        "reasons" : {
          "type" : "string"
        },
        "requestedFor" : {
          "type" : "string"
        },
        "requestedBy" : {
          "type" : "string"
        },
        "organization" : {
          "$ref" : "#/definitions/Organization"
        },
        "requestorEntitlementId" : {
          "$ref" : "#/definitions/Entitlement"
        },
        "preApprovalId" : {
          "type" : "string"
        },
        "postApprovalId" : {
          "type" : "string"
        },
        "dateCreated" : {
          "type" : "string",
          "format" : "date-time"
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time"
        },
        "dateSubmitted" : {
          "type" : "string",
          "format" : "date-time"
        },
        "dateApproved" : {
          "type" : "string",
          "format" : "date-time"
        },
        "dateCompleted" : {
          "type" : "string",
          "format" : "date-time"
        },
        "quote" : {
          "$ref" : "#/definitions/RequestQuote"
        },
        "requestCompletion" : {
          "$ref" : "#/definitions/RequestCompletion"
        },
        "requestData" : {
          "$ref" : "#/definitions/literalMap"
        },
        "retriesRemaining" : {
          "type" : "integer",
          "format" : "int64"
        },
        "requestedItemName" : {
          "type" : "string"
        },
        "requestedItemDescription" : {
          "type" : "string"
        },
        "components" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RequestComponent"
          }
        },
        "stateName" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "phase" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "UNSUBMITTED", "PENDING_PRE_APPROVAL", "IN_PROGRESS", "PENDING_POST_APPROVAL", "SUCCESSFUL", "FAILED", "REJECTED" ]
        },
        "executionStatus" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "NOT_STARTED", "STARTED", "STOPPED" ]
        },
        "approvalStatus" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "PENDING", "PRE_APPROVED", "POST_APPROVED", "REJECTED" ]
        },
        "waitingStatus" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "NOT_WAITING", "WAITING_FOR_APPROVAL", "WAITING_FOR_PROVIDER" ]
        }
      }
    },
    "RequestCompletion" : {
      "type" : "object",
      "required" : [ "requestCompletionState" ],
      "properties" : {
        "requestCompletionState" : {
          "type" : "string",
          "enum" : [ "SUCCESSFUL", "PARTIALLY_SUCCESSFUL", "FAILED", "REJECTED" ]
        },
        "completionDetails" : {
          "type" : "string"
        },
        "resourceBindingIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "RequestComponent" : {
      "type" : "object",
      "required" : [ "requestType" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "requestType" : {
          "type" : "string",
          "enum" : [ "CATALOG_ITEM", "RESOURCE_ACTION" ]
        },
        "requestableItemBindingId" : {
          "type" : "string"
        },
        "providerId" : {
          "type" : "string"
        },
        "cafeResourceId" : {
          "type" : "string",
          "format" : "uuid"
        },
        "componentId" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "parentId" : {
          "type" : "string"
        },
        "classId" : {
          "type" : "string"
        },
        "serviceTypeId" : {
          "type" : "string"
        },
        "typeFilter" : {
          "type" : "string"
        },
        "quote" : {
          "$ref" : "#/definitions/RequestQuote"
        }
      }
    },
    "RequestQuote" : {
      "type" : "object",
      "properties" : {
        "leasePeriod" : {
          "$ref" : "#/definitions/timeSpan"
        },
        "leaseRate" : {
          "$ref" : "#/definitions/moneyTimeRate"
        },
        "totalLeaseCost" : {
          "$ref" : "#/definitions/literal"
        }
      }
    },
    "ResetValueBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "Resource" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "ACTIVE", "PENDING_APPROVAL", "REJECTED", "DELETED" ]
        },
        "catalogItem" : {
          "$ref" : "#/definitions/CatalogItem"
        },
        "request" : {
          "$ref" : "#/definitions/Request"
        },
        "providerBinding" : {
          "$ref" : "#/definitions/ProviderBinding"
        },
        "resourceType" : {
          "$ref" : "#/definitions/ResourceType"
        },
        "owners" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Principal"
          }
        },
        "organization" : {
          "$ref" : "#/definitions/Organization"
        },
        "dateCreated" : {
          "type" : "string",
          "format" : "date-time"
        },
        "dateDeleted" : {
          "type" : "string",
          "format" : "date-time"
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time"
        },
        "archiveDays" : {
          "type" : "integer",
          "format" : "int32"
        },
        "lease" : {
          "$ref" : "#/definitions/ResourceLease"
        },
        "costs" : {
          "description" : "Deprecated since version 7.3. Use expenseMonthToDate to get the expense information.",
          "$ref" : "#/definitions/ResourceCosts"
        },
        "parentResource" : {
          "$ref" : "#/definitions/Resource"
        },
        "childResources" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Resource"
          }
        },
        "resourceData" : {
          "$ref" : "#/definitions/literalMap"
        },
        "destructionDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "icon" : {
          "$ref" : "#/definitions/Icon"
        },
        "expenseMonthToDate" : {
          "$ref" : "#/definitions/CostToDate"
        },
        "requestBindingId" : {
          "type" : "string"
        },
        "linkedIcon" : {
          "$ref" : "#/definitions/Icon"
        },
        "activeChildResources" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Resource"
          }
        },
        "totalLeaseCost" : {
          "$ref" : "#/definitions/literal"
        },
        "tenantId" : {
          "type" : "string"
        },
        "leaseForDisplay" : {
          "$ref" : "#/definitions/timeSpan"
        },
        "costToDate" : {
          "description" : "Deprecated since version 7.3. Use expenseMonthToDate to get the expense information.",
          "$ref" : "#/definitions/literal"
        },
        "tenant" : {
          "$ref" : "#/definitions/CatalogTenant"
        },
        "subTenantId" : {
          "type" : "string"
        }
      }
    },
    "ResourceAction" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ResourceOperation"
      }, {
        "type" : "object",
        "required" : [ "bindingId", "providerTypeRef" ],
        "properties" : {
          "organization" : {
            "$ref" : "#/definitions/Organization"
          },
          "requestSchema" : {
            "$ref" : "#/definitions/SchemaInfo"
          },
          "forms" : {
            "$ref" : "#/definitions/ResourceActionForms"
          },
          "callbacks" : {
            "$ref" : "#/definitions/ResourceActionCallbackSupport"
          },
          "lifecycleAction" : {
            "type" : "string"
          },
          "providerTypeRef" : {
            "$ref" : "#/definitions/ProviderType"
          },
          "bindingId" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ResourceActionCallbackSupport" : {
      "type" : "object",
      "properties" : {
        "validate" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "rollback" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "itemInformation" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "itemInitialize" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        }
      }
    },
    "ResourceActionForms" : {
      "type" : "object",
      "properties" : {
        "catalogRequestInfoHidden" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "requestFormScale" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "SMALL", "BIG" ]
        },
        "requestSubmission" : {
          "$ref" : "#/definitions/FormReference"
        },
        "requestDetails" : {
          "$ref" : "#/definitions/FormReference"
        },
        "requestPreApproval" : {
          "$ref" : "#/definitions/FormReference"
        },
        "requestPostApproval" : {
          "$ref" : "#/definitions/FormReference"
        }
      }
    },
    "ResourceActionRequest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Request"
      }, {
        "type" : "object",
        "required" : [ "resourceActionRef", "resourceRef" ],
        "properties" : {
          "resourceRef" : {
            "$ref" : "#/definitions/Resource"
          },
          "resourceActionRef" : {
            "$ref" : "#/definitions/ResourceAction"
          }
        }
      } ]
    },
    "ResourceCallbackSupport" : {
      "type" : "object",
      "properties" : {
        "list" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "details" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        }
      }
    },
    "ResourceCostFeatures" : {
      "type" : "object",
      "properties" : {
        "lease" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "leaseCost" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        }
      }
    },
    "ResourceCosts" : {
      "type" : "object",
      "properties" : {
        "leaseRate" : {
          "$ref" : "#/definitions/moneyTimeRate"
        }
      }
    },
    "ResourceExtension" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ResourceOperation"
      }, {
        "type" : "object",
        "required" : [ "extensionId" ],
        "properties" : {
          "extensionId" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ResourceForms" : {
      "type" : "object",
      "properties" : {
        "catalogResourceInfoHidden" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "details" : {
          "$ref" : "#/definitions/FormReference"
        }
      }
    },
    "ResourceLease" : {
      "type" : "object",
      "required" : [ "end", "start" ],
      "properties" : {
        "start" : {
          "type" : "string",
          "format" : "date-time"
        },
        "end" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "ResourceOperation" : {
      "type" : "object",
      "required" : [ "name", "status", "targetResourceTypeRef" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "externalId" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "iconId" : {
          "$ref" : "#/definitions/Icon"
        },
        "targetCriteria" : {
          "$ref" : "#/definitions/Clause"
        },
        "targetResourceTypeRef" : {
          "$ref" : "#/definitions/ResourceType"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "STAGING", "PUBLISHED", "RETIRED", "DELETED" ]
        },
        "entitleable" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "ResourceOperationUpdateRequest" : {
      "type" : "object",
      "required" : [ "publishStatus" ],
      "properties" : {
        "publishStatus" : {
          "type" : "string",
          "enum" : [ "STAGING", "PUBLISHED", "RETIRED", "DELETED" ]
        },
        "iconId" : {
          "$ref" : "#/definitions/Icon"
        }
      }
    },
    "ResourceType" : {
      "type" : "object",
      "required" : [ "providerTypeId" ],
      "properties" : {
        "callbacks" : {
          "$ref" : "#/definitions/ResourceCallbackSupport"
        },
        "costFeatures" : {
          "$ref" : "#/definitions/ResourceCostFeatures"
        },
        "description" : {
          "type" : "string"
        },
        "forms" : {
          "$ref" : "#/definitions/ResourceForms"
        },
        "iconId" : {
          "$ref" : "#/definitions/Icon"
        },
        "id" : {
          "type" : "string"
        },
        "listView" : {
          "$ref" : "#/definitions/TableView"
        },
        "name" : {
          "type" : "string"
        },
        "organization" : {
          "$ref" : "#/definitions/Organization"
        },
        "parentTypeId" : {
          "$ref" : "#/definitions/ResourceType"
        },
        "pluralizedName" : {
          "type" : "string"
        },
        "primary" : {
          "type" : "boolean",
          "default" : false
        },
        "providerTypeId" : {
          "$ref" : "#/definitions/ProviderType"
        },
        "schema" : {
          "$ref" : "#/definitions/SchemaInfo"
        },
        "listDescendantTypesSeparately" : {
          "type" : "boolean",
          "default" : false
        },
        "showChildrenOutsideParent" : {
          "type" : "boolean",
          "default" : false
        },
        "deleteIfNoChildren" : {
          "type" : "boolean",
          "default" : false
        },
        "status" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "ACTIVE", "RETIRED", "DELETED" ]
        }
      }
    },
    "RestEntity" : {
      "type" : "object",
      "properties" : {
        "body" : {
          "type" : "object"
        },
        "httpStatus" : {
          "type" : "string",
          "enum" : [ "CONTINUE", "SWITCHING_PROTOCOLS", "PROCESSING", "CHECKPOINT", "OK", "CREATED", "ACCEPTED", "NON_AUTHORITATIVE_INFORMATION", "NO_CONTENT", "RESET_CONTENT", "PARTIAL_CONTENT", "MULTI_STATUS", "ALREADY_REPORTED", "IM_USED", "MULTIPLE_CHOICES", "MOVED_PERMANENTLY", "FOUND", "MOVED_TEMPORARILY", "SEE_OTHER", "NOT_MODIFIED", "USE_PROXY", "TEMPORARY_REDIRECT", "PERMANENT_REDIRECT", "BAD_REQUEST", "UNAUTHORIZED", "PAYMENT_REQUIRED", "FORBIDDEN", "NOT_FOUND", "METHOD_NOT_ALLOWED", "NOT_ACCEPTABLE", "PROXY_AUTHENTICATION_REQUIRED", "REQUEST_TIMEOUT", "CONFLICT", "GONE", "LENGTH_REQUIRED", "PRECONDITION_FAILED", "PAYLOAD_TOO_LARGE", "REQUEST_ENTITY_TOO_LARGE", "URI_TOO_LONG", "REQUEST_URI_TOO_LONG", "UNSUPPORTED_MEDIA_TYPE", "REQUESTED_RANGE_NOT_SATISFIABLE", "EXPECTATION_FAILED", "I_AM_A_TEAPOT", "INSUFFICIENT_SPACE_ON_RESOURCE", "METHOD_FAILURE", "DESTINATION_LOCKED", "UNPROCESSABLE_ENTITY", "LOCKED", "FAILED_DEPENDENCY", "UPGRADE_REQUIRED", "PRECONDITION_REQUIRED", "TOO_MANY_REQUESTS", "REQUEST_HEADER_FIELDS_TOO_LARGE", "INTERNAL_SERVER_ERROR", "NOT_IMPLEMENTED", "BAD_GATEWAY", "SERVICE_UNAVAILABLE", "GATEWAY_TIMEOUT", "HTTP_VERSION_NOT_SUPPORTED", "VARIANT_ALSO_NEGOTIATES", "INSUFFICIENT_STORAGE", "LOOP_DETECTED", "BANDWIDTH_LIMIT_EXCEEDED", "NOT_EXTENDED", "NETWORK_AUTHENTICATION_REQUIRED" ]
        },
        "httpHeaders" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "setLocation" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "Schema" : {
      "type" : "object",
      "properties" : {
        "fields" : {
          "type" : "array",
          "xml" : {
            "name" : "field"
          },
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Field"
          }
        }
      }
    },
    "SchemaInfo" : {
      "type" : "object",
      "properties" : {
        "classId" : {
          "type" : "string"
        },
        "typeFilter" : {
          "type" : "string"
        }
      }
    },
    "Service" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "ACTIVE", "RETIRED", "DELETED" ]
        },
        "statusName" : {
          "type" : "string"
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        },
        "organization" : {
          "$ref" : "#/definitions/Organization"
        },
        "hours" : {
          "$ref" : "#/definitions/TimeRange"
        },
        "changeWindow" : {
          "$ref" : "#/definitions/ChangeWindow"
        },
        "newDuration" : {
          "$ref" : "#/definitions/timeSpan"
        },
        "lastUpdatedDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "lastUpdatedBy" : {
          "type" : "string"
        },
        "iconId" : {
          "$ref" : "#/definitions/Icon"
        },
        "owner" : {
          "$ref" : "#/definitions/Principal"
        },
        "supportTeam" : {
          "$ref" : "#/definitions/Principal"
        }
      }
    },
    "SkipExportBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "Sort" : {
      "type" : "object"
    },
    "StartsWithOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "StaticForm" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FormReference"
      }, {
        "type" : "object",
        "required" : [ "layout" ],
        "properties" : {
          "layout" : {
            "$ref" : "#/definitions/layout"
          }
        }
      } ]
    },
    "StaticLayout" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutReference"
      }, {
        "type" : "object",
        "required" : [ "layout" ],
        "properties" : {
          "layout" : {
            "$ref" : "#/definitions/layout"
          }
        }
      } ]
    },
    "StaticPermissibleValueList" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PermissibleValueList"
      }, {
        "type" : "object",
        "properties" : {
          "values" : {
            "type" : "array",
            "xml" : {
              "name" : "value"
            },
            "items" : {
              "$ref" : "#/definitions/value"
            }
          }
        }
      } ]
    },
    "SubsetOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "SupersetOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "TableView" : {
      "type" : "object",
      "properties" : {
        "columns" : {
          "type" : "array",
          "xml" : {
            "name" : "column",
            "wrapped" : true
          },
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Column"
          }
        },
        "defaultSequence" : {
          "type" : "array",
          "xml" : {
            "name" : "column",
            "wrapped" : true
          },
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "TimeRange" : {
      "type" : "object",
      "properties" : {
        "startTime" : {
          "type" : "string",
          "format" : "date-time"
        },
        "endTime" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "TimeSpan" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "description" : "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days.",
        "xml" : {
          "name" : "timeSpan"
        }
      } ]
    },
    "UniqueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "UnspecifiedEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object"
      } ]
    },
    "VisibilityConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "WithinOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "WrapperClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/Evaluator"
          }
        }
      } ]
    },
    "batchElementUpdateRequest" : {
      "type" : "object",
      "required" : [ "formValues" ],
      "properties" : {
        "formValues" : {
          "$ref" : "#/definitions/literalMap"
        },
        "trigger" : {
          "type" : "string"
        },
        "triggeredDetailsLayout" : {
          "$ref" : "#/definitions/layout"
        },
        "affectedElements" : {
          "type" : "array",
          "xml" : {
            "wrapped" : true
          },
          "items" : {
            "type" : "string"
          }
        }
      },
      "xml" : {
        "name" : "batchElementUpdateRequest"
      }
    },
    "booleanLiteral" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "value" : {
          "type" : "boolean",
          "description" : "The boolean value.",
          "default" : false
        }
      },
      "description" : "Wraps a boolean value.",
      "xml" : {
        "name" : "booleanLiteral"
      }
    },
    "catalogResource" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "iconId" : {
          "type" : "string"
        },
        "resourceTypeRef" : {
          "$ref" : "#/definitions/ResourceType"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "ACTIVE", "PENDING_APPROVAL", "REJECTED", "DELETED" ]
        },
        "catalogItem" : {
          "$ref" : "#/definitions/CatalogItem"
        },
        "requestId" : {
          "$ref" : "#/definitions/Request"
        },
        "requestState" : {
          "type" : "string",
          "enum" : [ "UNSUBMITTED", "SUBMITTED", "DELETED", "PENDING_PRE_APPROVAL", "PRE_APPROVAL_SEND_ERROR", "PRE_APPROVED", "PRE_REJECTED", "PROVIDER_DELETION_ERROR", "IN_PROGRESS", "PROVIDER_SEND_ERROR", "PROVIDER_COMPLETED", "PROVIDER_FAILED", "PENDING_POST_APPROVAL", "POST_APPROVAL_SEND_ERROR", "POST_APPROVED", "POST_REJECTION_RECEIVED", "ROLLBACK_ERROR", "POST_REJECTED", "SUCCESSFUL", "PARTIALLY_SUCCESSFUL", "FAILED" ]
        },
        "providerBinding" : {
          "$ref" : "#/definitions/ProviderBinding"
        },
        "owners" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Principal"
          }
        },
        "organization" : {
          "$ref" : "#/definitions/Organization"
        },
        "dateCreated" : {
          "type" : "string",
          "format" : "date-time"
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time"
        },
        "hasLease" : {
          "type" : "boolean",
          "default" : false
        },
        "lease" : {
          "$ref" : "#/definitions/ResourceLease"
        },
        "leaseForDisplay" : {
          "$ref" : "#/definitions/timeSpan"
        },
        "hasCosts" : {
          "type" : "boolean",
          "default" : false
        },
        "costs" : {
          "description" : "Deprecated since version 7.3. Use expenseMonthToDate to get the expense information.",
          "$ref" : "#/definitions/ResourceCosts"
        },
        "costToDate" : {
          "description" : "Deprecated since version 7.3. Use expenseMonthToDate to get the expense information.",
          "$ref" : "#/definitions/literal"
        },
        "totalCost" : {
          "description" : "Deprecated since version 7.3. Use expenseMonthToDate to get the expense information.",
          "$ref" : "#/definitions/literal"
        },
        "expenseMonthToDate" : {
          "$ref" : "#/definitions/CostToDate"
        },
        "parentResourceRef" : {
          "$ref" : "#/definitions/Resource"
        },
        "hasChildren" : {
          "type" : "boolean",
          "default" : false
        },
        "operations" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConsumerResourceOperation"
          }
        },
        "forms" : {
          "$ref" : "#/definitions/ResourceForms"
        },
        "resourceData" : {
          "$ref" : "#/definitions/literalMap"
        },
        "destroyDate" : {
          "type" : "string",
          "format" : "date-time"
        }
      },
      "xml" : {
        "name" : "catalogResource",
        "namespace" : "http://www.vmware.com/vcac/schema/catalog-service/v7.0"
      }
    },
    "complexLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "componentTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's component type."
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's component."
          },
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's class."
          },
          "typeFilter" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The type filter for this literal."
          },
          "values" : {
            "description" : "Map of values, keyed by the field ids of some complex type.",
            "$ref" : "#/definitions/literalMap"
          }
        },
        "description" : "A complex value composed of multiple values keyed by the field ids of some complex type.",
        "xml" : {
          "name" : "complexLiteral"
        }
      } ]
    },
    "consumerEntitledCatalogItem" : {
      "type" : "object",
      "properties" : {
        "catalogItem" : {
          "$ref" : "#/definitions/CatalogItem"
        },
        "entitledOrganizations" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Organization"
          }
        }
      },
      "xml" : {
        "name" : "consumerEntitledCatalogItem"
      }
    },
    "consumerEntitledCatalogItemView" : {
      "type" : "object",
      "properties" : {
        "entitledOrganizations" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Organization"
          }
        },
        "catalogItemId" : {
          "type" : "string",
          "format" : "uuid"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "isNoteworthy" : {
          "type" : "boolean",
          "default" : false
        },
        "dateCreated" : {
          "type" : "string",
          "format" : "date-time"
        },
        "lastUpdatedDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "links" : {
          "type" : "array",
          "xml" : {
            "name" : "links",
            "wrapped" : true
          },
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "iconId" : {
          "$ref" : "#/definitions/Icon"
        },
        "catalogItemTypeRef" : {
          "$ref" : "#/definitions/CatalogItemType"
        },
        "serviceRef" : {
          "$ref" : "#/definitions/Service"
        },
        "outputResourceTypeRef" : {
          "$ref" : "#/definitions/ResourceType"
        }
      },
      "xml" : {
        "name" : "consumerEntitledCatalogItemView"
      }
    },
    "dateTimeLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date."
          }
        },
        "description" : "Wraps a Date & Time value. This is a wrapper for the Java {@link Date} class.",
        "xml" : {
          "name" : "dateTimeLiteral"
        }
      } ]
    },
    "decimalLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "number",
            "format" : "double",
            "description" : "The decimal value."
          }
        },
        "description" : "Wraps a decimal value.",
        "xml" : {
          "name" : "decimalLiteral"
        }
      } ]
    },
    "elementValues" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "array",
          "xml" : {
            "name" : "value",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/value"
          }
        }
      },
      "xml" : {
        "name" : "elementValues"
      }
    },
    "elementValuesRequest" : {
      "type" : "object",
      "properties" : {
        "text" : {
          "type" : "string"
        },
        "tenantId" : {
          "type" : "string"
        },
        "userId" : {
          "type" : "string"
        },
        "dependencyValues" : {
          "$ref" : "#/definitions/literalMap"
        },
        "pagingInfo" : {
          "$ref" : "#/definitions/ElementValuesPagingInfo"
        },
        "associateValue" : {
          "$ref" : "#/definitions/literal"
        },
        "headers" : {
          "$ref" : "#/definitions/literalMap"
        }
      },
      "xml" : {
        "name" : "elementValuesRequest"
      }
    },
    "entities" : {
      "type" : "object",
      "properties" : {
        "links" : {
          "type" : "array",
          "xml" : {
            "name" : "links",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "content" : {
          "type" : "array",
          "xml" : {
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/resourceTypeNode"
          }
        }
      },
      "xml" : {
        "name" : "entities"
      }
    },
    "entityRef" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier of the type or category to which the referenced entity belongs."
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The unique identifier of the referenced entity, encoded as a string"
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The durable identifier of a component registered in the suite component registry that owns and manages the referenced entity. This can be omitted if this component can be derived from the context within which this entity reference occurs. It must be specified, if no such context exists or if the component differs from that defined by the context."
          },
          "label" : {
            "type" : "string"
          }
        },
        "description" : "Represents a reference to an entity defined somewhere in the suite.",
        "xml" : {
          "name" : "entityRef"
        }
      } ]
    },
    "entityRefEx" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "href" : {
            "type" : "string",
            "description" : "the Href"
          }
        },
        "description" : "Represents a reference to an entity by uri",
        "xml" : {
          "name" : "entityRefEx"
        }
      } ]
    },
    "form" : {
      "type" : "object",
      "properties" : {
        "layout" : {
          "$ref" : "#/definitions/layout"
        },
        "values" : {
          "$ref" : "#/definitions/literalMap"
        },
        "fieldPrefixes" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "xml" : {
        "name" : "form"
      }
    },
    "formUpdateResponse" : {
      "type" : "object",
      "properties" : {
        "elementUpdates" : {
          "type" : "array",
          "xml" : {
            "name" : "elementUpdate",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/updateElementEntry"
          }
        }
      },
      "xml" : {
        "name" : "formUpdateResponse"
      }
    },
    "integerLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The integer value."
          }
        },
        "description" : "Wraps a signed 64-bit integer value.",
        "xml" : {
          "name" : "integerLiteral"
        }
      } ]
    },
    "layout" : {
      "type" : "object",
      "properties" : {
        "pages" : {
          "type" : "array",
          "xml" : {
            "name" : "page",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/LayoutPage"
          }
        }
      },
      "xml" : {
        "name" : "layout"
      }
    },
    "literal" : {
      "type" : "object",
      "discriminator" : "type",
      "description" : "Wraps a value such that values of different types can be treated generically.",
      "xml" : {
        "name" : "literal"
      }
    },
    "literalMap" : {
      "type" : "object",
      "properties" : {
        "entries" : {
          "type" : "array",
          "xml" : {
            "name" : "entry"
          },
          "items" : {
            "$ref" : "#/definitions/LiteralMapEntry"
          }
        }
      },
      "description" : "Equivalent of java.util.Map",
      "xml" : {
        "name" : "literalMap"
      }
    },
    "money" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "format" : "double",
            "description" : "The amount associated with this value (with no specific currency)."
          }
        },
        "description" : "Represents a single, precise monetary value.",
        "xml" : {
          "name" : "money"
        }
      } ]
    },
    "moneyRange" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "minValue" : {
            "type" : "number",
            "format" : "double",
            "description" : "The lower limit of the range."
          },
          "maxValue" : {
            "type" : "number",
            "format" : "double",
            "description" : "The upper limit of the range."
          }
        },
        "description" : "Represents a range of money values, between some defined minimums and maximums.",
        "xml" : {
          "name" : "moneyRange"
        }
      } ]
    },
    "moneyRate" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "cost" : {
            "description" : "The cost (including optional currency code).",
            "$ref" : "#/definitions/literal"
          }
        },
        "description" : "A base type for literals representing a rate of some monetary value over a specified basis. E.g. $5 / hour; $1-2 / GB.",
        "xml" : {
          "name" : "moneyRate"
        }
      } ]
    },
    "moneyTimeRate" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "basis" : {
            "description" : "The span of time to calculate the rate of money for.",
            "$ref" : "#/definitions/timeSpan"
          }
        },
        "description" : "Represents a rate of money over time.",
        "xml" : {
          "name" : "moneyTimeRate"
        }
      } ]
    },
    "multipleLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "elementTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The data type of the items in the list.",
            "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
          },
          "items" : {
            "type" : "array",
            "xml" : {
              "name" : "item"
            },
            "description" : "The list of specified values. NOTE: All values must be of the same data type.",
            "items" : {
              "$ref" : "#/definitions/literal"
            }
          }
        },
        "description" : "A literal which represents multiple values. All of these component values must be of the same data type.",
        "xml" : {
          "name" : "multipleLiteral"
        }
      } ]
    },
    "resourceTypeNode" : {
      "type" : "object",
      "required" : [ "resourceType" ],
      "properties" : {
        "resourceType" : {
          "$ref" : "#/definitions/ResourceType"
        },
        "children" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/resourceTypeNode"
          }
        }
      },
      "xml" : {
        "name" : "resourceTypeNode"
      }
    },
    "secureString" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "The string value."
          }
        },
        "description" : "Wraps a secured string value, such as a password.",
        "xml" : {
          "name" : "secureString"
        }
      } ]
    },
    "stringLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "The string value."
          }
        },
        "description" : "Wraps a String value.",
        "xml" : {
          "name" : "stringLiteral"
        }
      } ]
    },
    "timeSpan" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "unit" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "description" : "The unit of measure for the time span. e.g: days.",
          "enum" : [ "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS", "WEEKS", "MONTHS", "YEARS" ]
        },
        "amount" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          },
          "description" : "The amount for the time span."
        }
      },
      "description" : "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days.",
      "xml" : {
        "name" : "timeSpan"
      }
    },
    "updateElementEntry" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "detailLayout" : {
          "$ref" : "#/definitions/layout"
        },
        "facetValues" : {
          "$ref" : "#/definitions/FacetValueMap"
        },
        "extensionRendererContext" : {
          "$ref" : "#/definitions/literalMap"
        },
        "permissibleValues" : {
          "type" : "array",
          "xml" : {
            "name" : "value",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/value"
          }
        },
        "errors" : {
          "type" : "array",
          "xml" : {
            "name" : "error",
            "wrapped" : true
          },
          "items" : {
            "type" : "string"
          }
        }
      },
      "xml" : {
        "name" : "updateElementEntry"
      }
    },
    "value" : {
      "type" : "object",
      "properties" : {
        "underlyingValue" : {
          "$ref" : "#/definitions/literal"
        },
        "label" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "value"
      }
    }
  }
}