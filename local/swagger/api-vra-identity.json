{
  "swagger" : "2.0",
  "info" : {
    "description" : "# Identity Overview\n\nThe Identity Service is composed of two components: authentication and authorization. Further details on these components can be found below.\n\n## Authentication Overview\n\nThe authentication component manages tenants, business groups (formerly named subtenants), groups (both Single-Sign-On and Custom groups), users and identity stores.\n\n### Tenancy\n\nA tenant is an organizational unit in a vRealize Automation deployment. A tenant can represent a business unit in an enterprise or a company that subscribes to cloud services from a service provider.\n\nEach tenant has its own dedicated configuration. Some system-level configuration is shared across tenants.\n\n### User and Group Management\n\nAll user authentication is handled through single sign-on. Each tenant has one or more identity stores, such as Active Directory servers, that provide authentication.\n\nThe system administrator performs the initial configuration of single sign-on and basic tenant setup, including designating at least one identity store and a tenant administrator for each tenant. Thereafter, a tenant administrator can configure additional identity stores and assign roles to users or groups from the identity stores.\n\nTenant administrators can also create custom groups within their own tenant and add users and groups defined in the identity store to custom groups. Custom groups, like identity store groups and users, can be assigned roles or designated as the approvers in an approval policy.\n\nTenant administrators can also create business groups within their tenant. A business group is a set of users, often corresponding to a line of business, department or other organizational unit, that can be associated with a set of catalog services and infrastructure resources. Users, identity store groups, and custom groups can be added to business groups.\n\n### Authentication API Examples\n\n#### Identifying and groups and users\n\nBoth groups (SSO and custom) and users use the same object for identification - the principal id. Principal id consists of name and domain and is serialized in the form of `name@domain.`\n\nExample usages include:\n\n*   Getting a group by principal id: `GET /tenants/vcac.local/groups/Administrators@vcac.local`\n*   Getting a user by principal id: `GET /tenants/vcac.local/principals/Administrator@vcac.local`\n*   Search all groups using criteria instead of principal id:\n`GET /tenants/vcac.local/groups?criteria=administrator`\n\n*   Creating a group: `POST /tenants/vcac.local/groups` \n\n```json \n{ \n  \"@type\": \"Group\", \n  \"groupType\": \"CUSTOM\", \n  \"name\": \"Developers\", \n  \"domain\": \"vcac.local\", \n  \"description\": \"Developer Group\",\n  \"principalId\": { \n    \"domain\": \"vcac.local\", \n    \"name\": \"DevGroup\"\n  }\n} \n```\n\n## Authorization Overview\n\nThe authorization component manages authorization configurations as a set of triples\n\n*   `Principal` - The user or group to whom access is granted\n    *   principals are externally definded in authentication service and merely referenced in the authorization service.\n*   `Permission` - Identifies the action or data the principal is granted access to.\n    *   Permissions can correspond to atomic actions (e.g. \"Power On VM\").\n    *   They can also act as an abstraction for an entire set of activities (e.g. \"VM Power Lifecycle\").\n*   `Scope` - Defines the context within which the access applies.\n    *   A scope can identify an object (or an object representing a set of objects) upon which the action identified by a permission can be performed. (i.e. To define an Access Control List (ACL).)\n    *   A scope can be used to represent a group and the permissions identify the roles of different users within the group. (i.e. To define business groups, aka: sub-tenants)\n    *   Scope is optional\n\nNOTE: Roles and Permissions are both a part of the PrincipalExtensionApi REST resource.\n\n### Role Management\n\nRoles consist of a set of privileges that can be associated with users to determine what tasks they can perform. Based on their responsibilities, individuals might have one or more roles associated with their user account.\n\nAll user roles are assigned within the context of a specific tenant. However, some roles in the default tenant can manage system-wide configuration that applies to multiple tenants.\n\nFor more high-level details, see the \"Foundations and Concepts\" documentation located on the [vRA public documentation site](https://www.vmware.com/support/pubs/vcac-pubs.html)\n\n### Authorization API Examples\n\n#### Getting a specific role by id\n\n`GET /authorization/roles/CSP_TENANT_ADMIN`\n\n#### Creating a new role (e.g: one for helpdesk personnel)\n\n`POST /authorization/roles` \n```json\n{ \n  \"@type\" : \"TenantRole\", \n  \"id\" : \"HELPDESK_TENANT_ROLE\", \n  \"name\" : \"Helpdesk Administrator Tenant Role\", \n  \"description\" : \"Role representing helpdesk personnel\" \n}\n```\n\n#### Adding a permission to a role (e.g.: adding permission to tenant administration GUI\n\n`PUT /authorization/roles/HELPDESK_TENANT_ROLE/permissions/assigned/GUI_MY_TENANT_MANAGEMENT`\n\nNOTE: For this PUT, there is an empty request body. \n```json\n{} \n```\n",
    "version" : "7.4.0-SNAPSHOT",
    "title" : "Identity Service API"
  },
  "basePath" : "/identity",
  "schemes" : [ "https" ],
  "paths" : {
    "/api/authorization/permissions" : {
      "get" : {
        "summary" : "Returns a page of the resources",
        "description" : "",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/authorization/permissions/{id}" : {
      "get" : {
        "summary" : "Returns the resource associated with the given id",
        "description" : "",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the resource",
          "required" : true,
          "type" : "object"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "put" : {
        "summary" : "Create or update a permission",
        "description" : "",
        "operationId" : "updatePermission",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "the id of the permission to be created or updated",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the permission to use for the operation",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Permission"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/authorization/permissions/{permissionId}/permissions/admin" : {
      "get" : {
        "summary" : "Return the admin permissions of a permission",
        "description" : "",
        "operationId" : "getPermissionAdminPermissions",
        "parameters" : [ {
          "name" : "permissionId",
          "in" : "path",
          "description" : "the id of the permission",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "put" : {
        "summary" : "Add an empty permission to admin permissions",
        "description" : "Adds an empty permission to the list of admin permissions of another permission.\nUsed for testing purposes only.",
        "operationId" : "addEmptyAdminPermission",
        "parameters" : [ {
          "name" : "permissionId",
          "in" : "path",
          "description" : "the id of the permission to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful."
          }
        }
      },
      "delete" : {
        "summary" : "Delete an empty permission from admin permissions",
        "description" : "Removes an empty permission from the list of admin permissions of another permission. Used for testing purposes only.",
        "operationId" : "removeEmptyAdminPermission",
        "parameters" : [ {
          "name" : "permissionId",
          "in" : "path",
          "description" : "the id of the permission to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful."
          }
        }
      }
    },
    "/api/authorization/permissions/{permissionId}/permissions/admin/{adminPermissionId}" : {
      "put" : {
        "summary" : "Add a permission to admin permissions",
        "description" : "Add a permission to the list of admin permissions of another permission.",
        "parameters" : [ {
          "name" : "permissionId",
          "in" : "path",
          "description" : "the id of the permission to update",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "adminPermissionId",
          "in" : "path",
          "description" : "the id of the admin permission to add",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful."
          }
        }
      },
      "delete" : {
        "summary" : "Delete a permission from admin permissions",
        "description" : "Removes a permission from the list of admin permissions of another permission.",
        "parameters" : [ {
          "name" : "permissionId",
          "in" : "path",
          "description" : "the id of the permission to update",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "adminPermissionId",
          "in" : "path",
          "description" : "the id permission to remove",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful."
          }
        }
      }
    },
    "/api/authorization/resource-types" : {
      "get" : {
        "summary" : "Returns a page of the resources",
        "description" : "",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/authorization/resource-types/{id}" : {
      "get" : {
        "summary" : "Returns the resource associated with the given id",
        "description" : "",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the resource",
          "required" : true,
          "type" : "object"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "put" : {
        "summary" : "Update or create a resource type by its id",
        "description" : "",
        "operationId" : "updateResourceType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "the id of the resource type to update or create",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the resource type to update or create",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ResourceTypeRef"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/authorization/roles" : {
      "get" : {
        "summary" : "Returns a page of the resources",
        "description" : "",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/authorization/roles/assignable" : {
      "get" : {
        "summary" : "Return the roles to assign to other users",
        "description" : "Return the roles that the current user has permissions to assign to other users.",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/authorization/roles/extensions" : {
      "get" : {
        "summary" : "Returns a page of the resources",
        "description" : "",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/authorization/roles/extensions/{extensionId}/permissions/assigned" : {
      "put" : {
        "summary" : "Add an empty permission to a role extension.",
        "description" : "Adds an empty permission to the list of permissions of a role extension.\nUsed for testing purposes only.",
        "operationId" : "addEmptyPermission",
        "parameters" : [ {
          "name" : "extensionId",
          "in" : "path",
          "description" : "the id of the role extension",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful."
          }
        }
      },
      "delete" : {
        "summary" : "Remove an empty permission from a role extension",
        "description" : "Removes an empty permission from the list of permissions of a role extension.\nUsed for testing purposes only.",
        "operationId" : "removeEmptyPermission",
        "parameters" : [ {
          "name" : "extensionId",
          "in" : "path",
          "description" : "the id of the role extension to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful."
          }
        }
      }
    },
    "/api/authorization/roles/extensions/{extensionId}/permissions/assigned/{permissionId}" : {
      "put" : {
        "summary" : "Add a permission to a role extension",
        "description" : "Adds a permission to the list of permissions of a role extension.",
        "parameters" : [ {
          "name" : "extensionId",
          "in" : "path",
          "description" : "the id of the role extension",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "permissionId",
          "in" : "path",
          "description" : "the id of the permission to add",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful."
          }
        }
      },
      "delete" : {
        "summary" : "Remove a permission from a role extension",
        "description" : "Removes a permission from the list of permissions of a role extension.",
        "parameters" : [ {
          "name" : "extensionId",
          "in" : "path",
          "description" : "the id of the role extension to update",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "permissionId",
          "in" : "path",
          "description" : "the id of the permission to remove",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful."
          }
        }
      }
    },
    "/api/authorization/roles/extensions/{id}" : {
      "get" : {
        "summary" : "Returns the resource associated with the given id",
        "description" : "",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the resource",
          "required" : true,
          "type" : "object"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "put" : {
        "summary" : "Update or create a role extension",
        "description" : "",
        "operationId" : "updateOrCreateRoleExtension",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "the id of the role extension",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the role extension to update or create",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RoleExtension"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/authorization/roles/{id}" : {
      "get" : {
        "summary" : "Returns the resource associated with the given id",
        "description" : "",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the resource",
          "required" : true,
          "type" : "object"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/authorization/roles/{roleId}/extensions" : {
      "get" : {
        "summary" : "Return the role extension assigned to a role",
        "description" : "",
        "parameters" : [ {
          "name" : "roleId",
          "in" : "path",
          "description" : "the id of the role",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/authorization/roles/{roleId}/permissions" : {
      "get" : {
        "summary" : "Return all permissions of a role",
        "description" : "Return all the permissions of a role, taken from the permissions directly assigned to the role and form the permissions of the role's role extensions.",
        "parameters" : [ {
          "name" : "roleId",
          "in" : "path",
          "description" : "the id of the role",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/authorization/roles/{roleId}/permissions/admin" : {
      "get" : {
        "summary" : "Return the admin permissions of a role",
        "description" : "Return all the admin permissions of a role, computed as the union of the admin permissions of all the admin permissions of the role's permissions.",
        "operationId" : "getRoleAdminPermissions",
        "parameters" : [ {
          "name" : "roleId",
          "in" : "path",
          "description" : "the id of the role",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/authorization/roles/{roleId}/permissions/assigned" : {
      "get" : {
        "summary" : "Return the permissions assigned to a role",
        "description" : "Return the permissions directly assigned to a role.",
        "parameters" : [ {
          "name" : "roleId",
          "in" : "path",
          "description" : "the id of the role",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "put" : {
        "summary" : "Add an empty permission to a role.",
        "description" : "Adds an empty permission to the list of permissions of a role.\nUsed for testing purposes only.",
        "operationId" : "addEmptyRolePermission",
        "parameters" : [ {
          "name" : "roleId",
          "in" : "path",
          "description" : "the id of the role",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful."
          }
        }
      },
      "delete" : {
        "summary" : "Remove an empty permission from a role.",
        "description" : "Remove an empty permission from the list of permissions of a role.\nUsed for testing purposes only.",
        "operationId" : "removeRoleEmptyPermission",
        "parameters" : [ {
          "name" : "roleId",
          "in" : "path",
          "description" : "the id of the role",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful."
          }
        }
      }
    },
    "/api/authorization/roles/{roleId}/permissions/assigned/{permissionId}" : {
      "put" : {
        "summary" : "Add a permission to a role.",
        "description" : "Adds a permission to the list of permissions of a role.",
        "operationId" : "addRolePermission",
        "parameters" : [ {
          "name" : "roleId",
          "in" : "path",
          "description" : "the id of the role",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "permissionId",
          "in" : "path",
          "description" : "the id of the permission to add",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful."
          }
        }
      },
      "delete" : {
        "summary" : "Remove permission from a role.",
        "description" : "Remove permission from the list of permissions of a role.",
        "operationId" : "removeRolePermission",
        "parameters" : [ {
          "name" : "roleId",
          "in" : "path",
          "description" : "the id of the role",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "permissionId",
          "in" : "path",
          "description" : "the id of the permission to remove",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful."
          }
        }
      }
    },
    "/api/authorization/scopes/types" : {
      "get" : {
        "summary" : "Returns a page of the resources",
        "description" : "",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/authorization/scopes/types/{id}" : {
      "get" : {
        "summary" : "Returns the resource associated with the given id",
        "description" : "",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the resource",
          "required" : true,
          "type" : "object"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "put" : {
        "summary" : "Create or update a scope type by id",
        "description" : "",
        "operationId" : "updateScopeType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "the id of the scope type to update or create",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the scope type to update or create",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ScopeType"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/authorization/scopes/types/{typeId}/permissions/admin" : {
      "get" : {
        "summary" : "Return admin permission for a scope type",
        "description" : "Return the prerequisite admin permissions associated with the requested scope.",
        "parameters" : [ {
          "name" : "typeId",
          "in" : "path",
          "description" : "the id of the scope type",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "put" : {
        "summary" : "Add empty permission to a scope type",
        "description" : "Add an empty permission to the list of admin permissions of a scope type.\nUsed for testing purposes only.",
        "operationId" : "addEmptyScopeTypeAdminPermission",
        "parameters" : [ {
          "name" : "typeId",
          "in" : "path",
          "description" : "the id of the scope type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful."
          }
        }
      },
      "delete" : {
        "summary" : "Delete empty permission from a scope type",
        "description" : "Delete an empty permission from the list of admin permissions of a scope type.\nUsed for testing purposes only.",
        "operationId" : "removeEmptyScopeTypeAdminPermission",
        "parameters" : [ {
          "name" : "typeId",
          "in" : "path",
          "description" : "the id of the scope type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful."
          }
        }
      }
    },
    "/api/authorization/scopes/types/{typeId}/permissions/admin/{adminPermissionId}" : {
      "put" : {
        "summary" : "Add permission to a scope type",
        "description" : "Add a permission to the list of admin permissions of a scope type.",
        "operationId" : "addScopeTypeAdminPermission",
        "parameters" : [ {
          "name" : "typeId",
          "in" : "path",
          "description" : "the id of the scope type",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "adminPermissionId",
          "in" : "path",
          "description" : "the id of the permission to add",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful."
          }
        }
      },
      "delete" : {
        "summary" : "Delete permission from a scope type",
        "description" : "Delete a permission from the list of admin permissions of a scope type.",
        "operationId" : "removeScopeTypeAdminPermission",
        "parameters" : [ {
          "name" : "typeId",
          "in" : "path",
          "description" : "the id of the scope type",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "adminPermissionId",
          "in" : "path",
          "description" : "the id of the permission to add",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful."
          }
        }
      }
    },
    "/api/authorization/tenants/{tenantId}/acl" : {
      "get" : {
        "summary" : "Return ACL for a tenant",
        "description" : "Retrieves ACL entries from the specified tenant. The result can be filtered directly by principal, resource and/or role. If no filter is specified a custom query can be provided within the pagination information.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant id to find ACL entries for",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "principalId",
          "in" : "query",
          "description" : "the id of the principal",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceRefId",
          "in" : "query",
          "description" : "the id of the resource",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "roleId",
          "in" : "query",
          "description" : "the id of the role",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageAclEntry"
            }
          }
        }
      },
      "post" : {
        "summary" : "Add ACL to a tenant",
        "description" : "Adds a collection of ACL entries to the specified tenant.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant which the ACL entry belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "collection of ACL entries",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/AclEntry"
            }
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "operation is successful"
          }
        }
      },
      "put" : {
        "summary" : "Set ACL of a tenant",
        "description" : "Set a collection of ACL entries to the specified tenant after removing the tenant's existing ACL entries.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant which the ACL entry belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "collection of ACL entries to set",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/AclEntry"
            }
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "operation is successful"
          }
        }
      },
      "delete" : {
        "summary" : "Remove ACL entries from a tenant",
        "description" : "",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant which the ACL entry belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "principalId",
          "in" : "query",
          "description" : "the id of the principal",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceRefId",
          "in" : "query",
          "description" : "the id of the resource",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "roleId",
          "in" : "query",
          "description" : "the id of the role",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "operation is successful"
          }
        }
      }
    },
    "/api/authorization/tenants/{tenantId}/authorities/extended" : {
      "put" : {
        "summary" : "Return the extended authorities for principals",
        "description" : "Retrieves the extended authorities that a collection of principal references hold system wide, including effective roles and effective permissions.\n\nIf some principals in 'refs' are not found, the operation doesn't fail with a 404, but instead returns a result for the ones that were found.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant of the principal reference(s)",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the collection of principal reference(s).",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/PrincipalRef"
            }
          }
        }, {
          "name" : "",
          "in" : "query",
          "description" : "list of RoleType's to include in the result",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "SYSTEM", "TENANT", "SCOPE" ]
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/authorization/tenants/{tenantId}/authorities/extended/permissions" : {
      "put" : {
        "summary" : "Return the extended authorities permissions for principals",
        "description" : "Retrieves the extended authorities that a collection of principal references hold system wide, including effective roles and effective permissions.\n\nIf some principals in 'refs' are not found, the operation doesn't fail with a 404, but instead returns a result for the ones that were found.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant of the principal reference(s)",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the collection of principal reference(s).",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/PrincipalRef"
            }
          }
        }, {
          "name" : "",
          "in" : "query",
          "description" : "list of RoleType's to include in the result",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "SYSTEM", "TENANT", "SCOPE" ]
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/authorization/tenants/{tenantId}/authorities/extended/roles" : {
      "put" : {
        "summary" : "Return the extended authorities roles for principals",
        "description" : "Retrieves the extended authorities that a collection of principal references hold system wide, including effective roles and effective permissions.\n\nIf some principals in 'refs' are not found, the operation doesn't fail with a 404, but instead returns a result for the ones that were found.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant of the principal reference(s)",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the collection of principal reference(s).",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/PrincipalRef"
            }
          }
        }, {
          "name" : "",
          "in" : "query",
          "description" : "list of RoleType's to include in the result",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "SYSTEM", "TENANT", "SCOPE" ]
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/authorization/tenants/{tenantId}/authorities/permissions" : {
      "put" : {
        "summary" : "Return permissions for principals",
        "description" : "Retrieves the authorities that a collection of principal references hold system wide, including effective roles and effective permissions.\n\nIf some principals in 'refs' are not found, the operation doesn't fail with a 404, but instead returns a result for the ones that were found.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant of the principal reference(s)",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the collection of principal reference(s).",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/PrincipalRef"
            }
          }
        }, {
          "name" : "",
          "in" : "query",
          "description" : "list of RoleType's to include in the result",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "SYSTEM", "TENANT", "SCOPE" ]
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/authorization/tenants/{tenantId}/authorities/roles" : {
      "put" : {
        "summary" : "Return roles for principals",
        "description" : "Retrieves the authorities that a collection of principal references hold system wide, including effective roles and effective permissions.\n\nIf some principals in 'refs' are not found, the operation doesn't fail with a 404, but instead returns a result for the ones that were found.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant of the principal reference(s)",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the collection of principal reference(s).",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/PrincipalRef"
            }
          }
        }, {
          "name" : "",
          "in" : "query",
          "description" : "list of RoleType's to include in the result",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "SYSTEM", "TENANT", "SCOPE" ]
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/authorization/tenants/{tenantId}/principals" : {
      "get" : {
        "summary" : "Return principal extensions",
        "description" : "Retrieves the principal extensions for the specified tenant, and optionally filtered by type of roles associated with it. Scope roles are not taken into account in the filtering.",
        "operationId" : "returnPrincipalExtensions",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant for which to get principal extensions",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "containsRole",
          "in" : "query",
          "description" : "the type of the role that any given principal extension should have in order to be included into the result",
          "required" : false,
          "type" : "string",
          "enum" : [ "ANY", "ANY_SYSTEM_ROLE", "ANY_TENANT_ROLE" ]
        }, {
          "name" : "hasRole",
          "in" : "query",
          "description" : "the role that any given principal extension should have in order to be included into the result",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "summary" : "Delete all principal extensions",
        "description" : "Deletes all principal extensions, filtering them by the oData query inside the paging information if provided.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant which the principals belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "operation is successful."
          }
        }
      }
    },
    "/api/authorization/tenants/{tenantId}/principals/{principalId}" : {
      "get" : {
        "summary" : "Return a principal extension by id",
        "description" : "",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant which the principal belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "principalId",
          "in" : "path",
          "description" : "the id of the principal",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/principal"
            }
          }
        }
      },
      "put" : {
        "summary" : "Create or update a principal extension",
        "description" : "",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant which the principal belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "principalId",
          "in" : "path",
          "description" : "the id of the principal",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the principal extension to create or update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/principal"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful."
          }
        }
      },
      "delete" : {
        "summary" : "Delete a principal extension",
        "description" : "Deletes the principal extension associated with a principal id.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant which the principal belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "principalId",
          "in" : "path",
          "description" : "the id of the principal",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : "operation is successful."
          }
        }
      }
    },
    "/api/authorization/tenants/{tenantId}/principals/{principalId}/permissions" : {
      "get" : {
        "summary" : "Return the effective permissions for principal",
        "description" : "Retrieves the effective permissions a principal holds system wide, determined by their cumulative system, tenant and scope roles. It's possible to filter the permissions by type(s), and the type and/or id of the scope for scope roles.",
        "operationId" : "getEffectivePermissionsForPrincipal",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant which the principal belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "principalId",
          "in" : "path",
          "description" : "the id of the principal",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "roleType",
          "in" : "query",
          "description" : "the types of role to filter on",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "SYSTEM", "TENANT", "SCOPE" ]
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "scopeType",
          "in" : "query",
          "description" : "the type of scope type to filter on",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "scopeId",
          "in" : "query",
          "description" : "the id of the scope to filter on",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/authorization/tenants/{tenantId}/principals/{principalId}/roles" : {
      "get" : {
        "summary" : "Return the effective roles for principal",
        "description" : "Retrieves the effective roles a principal holds system wide. It's possible to filter the roles by type(s), and the type and/or id of the scope for scope roles.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant which the principal belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "principalId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "the types of role to filter on",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "SYSTEM", "TENANT", "SCOPE" ]
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "scopeType",
          "in" : "query",
          "description" : "the types of role to filter on",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "scopeId",
          "in" : "query",
          "description" : "the id of the scope to filter on",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "put" : {
        "summary" : "Set System and Tenant roles(s) to a principal",
        "description" : "Sets the specified System and Tenant role(s) to a principal. As result the principal will contain only that set of System and Tenant roles.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant which the principal belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "principalId",
          "in" : "path",
          "description" : "the id of the principal",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "collection with the id(s) of the role(s) to set",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful."
          }
        }
      },
      "delete" : {
        "summary" : "Remove an empty System or Tenant role from a principal",
        "description" : "Remove an empty System or Tenant role from a principal.\nUsed for testing purposes only.",
        "operationId" : "removeEmptyPrincipalRole",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant which the principal belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "principalId",
          "in" : "path",
          "description" : "the id of the principal",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/authorization/tenants/{tenantId}/principals/{principalId}/roles/{roleId}" : {
      "put" : {
        "summary" : "Add System or Tenant role to a principal",
        "description" : "",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant which the principal belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "principalId",
          "in" : "path",
          "description" : "the id of the principal",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "roleId",
          "in" : "path",
          "description" : "the id of the role to add",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful."
          }
        }
      },
      "delete" : {
        "summary" : "Remove a System or Tenant tole from a principal",
        "description" : "",
        "operationId" : "removePrincipalRole",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant which the principal belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "principalId",
          "in" : "path",
          "description" : "the id of the principal",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "roleId",
          "in" : "path",
          "description" : "the role to remove",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/authorization/tenants/{tenantId}/principals/{principalId}/scopes" : {
      "get" : {
        "summary" : "Return the scopes for principal",
        "description" : "Return the scopes a principal is included in system wide.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant which the principal belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "principalId",
          "in" : "path",
          "description" : "the id of the principal",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/authorization/tenants/{tenantId}/principals/{principalId}/scopes/{scopeId}" : {
      "get" : {
        "summary" : "Return a specific scope for principal",
        "description" : "Retrieve a specific scope a principal is included in system wide.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant which the principal belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "principalId",
          "in" : "path",
          "description" : "the id of the principal",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "scopeId",
          "in" : "path",
          "description" : "the id of the scope",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Scope"
            }
          }
        }
      }
    },
    "/api/authorization/tenants/{tenantId}/principals/{principalId}/scopes/{scopeId}/roles" : {
      "post" : {
        "summary" : "Add scope role(s) to a principal",
        "description" : "Add the specified Scope role(s) to a principal in the context of a scope.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant which the principal belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "principalId",
          "in" : "path",
          "description" : "the id of the principal",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "scopeId",
          "in" : "path",
          "description" : "the id of the scope",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "collection with id(s) of the scope role(s) to add",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful."
          }
        }
      },
      "put" : {
        "summary" : "Set scope role(s) to a principal",
        "description" : "Sets the specified Scope role(s) to a principal in the context of a scope. As result the principal will contain only that set of Scope roles.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant which the principal belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "principalId",
          "in" : "path",
          "description" : "the id of the principal",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "scopeId",
          "in" : "path",
          "description" : "the id of the scope",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "collection with id(s) of the scope role(s) to set",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful."
          }
        }
      },
      "delete" : {
        "summary" : "Remove an empty Scope role from a principal",
        "description" : "Remove an empty scope role from a principal in the context of a scope.\nUsed for testing purposes only.",
        "operationId" : "removeEmptyScopeRoleForPrincipal",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant which the principal belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "principalId",
          "in" : "path",
          "description" : "the id of the principal",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "scopeId",
          "in" : "path",
          "description" : "the id of the scope",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/authorization/tenants/{tenantId}/principals/{principalId}/scopes/{scopeId}/roles/{scopeRoleId}" : {
      "put" : {
        "summary" : "Add a scope role to a principal in the context of a scope",
        "description" : "",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant which the principal belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "principalId",
          "in" : "path",
          "description" : "the id of the principal",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "scopeId",
          "in" : "path",
          "description" : "the id of the scope",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "scopeRoleId",
          "in" : "path",
          "description" : "the id of the scope role to add",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful."
          }
        }
      },
      "delete" : {
        "summary" : "Remove an Scope role from a principal",
        "description" : "Remove a scope role from a principal in the context of a scope.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant which the principal belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "principalId",
          "in" : "path",
          "description" : "the id of the principal",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "scopeId",
          "in" : "path",
          "description" : "the id of the scope",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "scopeRoleId",
          "in" : "path",
          "description" : "the id of the scope role to remove",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/authorization/tenants/{tenantId}/resources" : {
      "get" : {
        "summary" : "Return resources",
        "description" : "Return resource for the specified tenant.",
        "operationId" : "returnResources",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant id to find resource for",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "summary" : "Delete resources",
        "description" : "Deletes resources within the specified tenant.\nCan delete resources based on ODATA query options.",
        "operationId" : "deleteAllResources",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant which the resources belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "operation is successful."
          }
        }
      }
    },
    "/api/authorization/tenants/{tenantId}/resources/{resourceId}" : {
      "get" : {
        "summary" : "Return resource by its id",
        "description" : "",
        "operationId" : "returnResource",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant which the resources belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "resourceId",
          "in" : "path",
          "description" : "the id of the resource",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResourceRef"
            }
          }
        }
      },
      "put" : {
        "summary" : "Update or create a resource by its id",
        "description" : "",
        "operationId" : "updateResource",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant which the resources belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "resourceId",
          "in" : "path",
          "description" : "the id of the resource",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the resource to create or update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ResourceRef"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "summary" : "Delete resource",
        "description" : "",
        "operationId" : "deleteResource",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant which the resource belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "resourceId",
          "in" : "path",
          "description" : "the id of the resource",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : "operation is successful."
          }
        }
      }
    },
    "/api/authorization/tenants/{tenantId}/scopes" : {
      "get" : {
        "summary" : "Return scopes for tenant",
        "description" : "",
        "operationId" : "returnScopes",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "summary" : "Delete all scopes for a tenant",
        "description" : "Can delete scope based on ODATA query options.",
        "operationId" : "deleteAllScopes",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "operation is successful."
          }
        }
      }
    },
    "/api/authorization/tenants/{tenantId}/scopes-principals" : {
      "put" : {
        "summary" : "Return principals that belong to a set of scopes",
        "description" : "Return the principals that belong to a collection of scopes, and optionally filtered by a specific role or a specific permission. When filtering the result the role takes precedence over the permission.",
        "operationId" : "returnPrincipalFromScopes",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the set of scopes the principals belongs to",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "roleId",
          "in" : "query",
          "description" : "the role to filter by",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "permissionId",
          "in" : "query",
          "description" : "the permission to filter by",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/authorization/tenants/{tenantId}/scopes/{scopeId}" : {
      "get" : {
        "summary" : "Return scope by id",
        "description" : "",
        "operationId" : "returnScope",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "scopeId",
          "in" : "path",
          "description" : "the id of the scope to return",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Scope"
            }
          }
        }
      },
      "put" : {
        "summary" : "Create or update a scope by id",
        "description" : "",
        "operationId" : "updateScope",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "scopeId",
          "in" : "path",
          "description" : "the id of the scope to create or update",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the scope to create or update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Scope"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "summary" : "Delete a scope",
        "description" : "",
        "operationId" : "deleteScope",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "scopeId",
          "in" : "path",
          "description" : "the id of the scope to delete",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : "operation is successful."
          }
        }
      }
    },
    "/api/authorization/tenants/{tenantId}/scopes/{scopeId}/resources" : {
      "post" : {
        "summary" : "Add resources to a scope",
        "description" : "",
        "operationId" : "addResourcesToScope",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "scopeId",
          "in" : "path",
          "description" : "the id of the scope",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "collection with the resource(s) to add",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ResourceRef"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful."
          }
        }
      },
      "put" : {
        "summary" : "Set resource(s) to a scope",
        "description" : "Set the specified resource(s) to a scope. As result the scope will contain only that set of resources.",
        "operationId" : "setResourcesToScope",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "scopeId",
          "in" : "path",
          "description" : "the id of the scope",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "collection with the resource(s) to set",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ResourceRef"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful."
          }
        }
      },
      "delete" : {
        "summary" : "Remve resources from a scope",
        "description" : "",
        "operationId" : "removeResourcesFromScope",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "scopeId",
          "in" : "path",
          "description" : "the id of the scope",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful."
          }
        }
      }
    },
    "/api/authorization/tenants/{tenantId}/scopes/{scopeId}/resources/{resourceId}" : {
      "delete" : {
        "summary" : "Remove resource from a scope",
        "description" : "",
        "operationId" : "removeResourceFromScope",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "scopeId",
          "in" : "path",
          "description" : "the id of the scope",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "name" : "resourceId",
          "in" : "path",
          "description" : "the id of the resource to remove",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful."
          }
        }
      }
    },
    "/api/data-service/data/{classId}/{id}" : {
      "post" : {
        "summary" : "Get a set of data for the specified object",
        "description" : "Get a set of data for the specified object.",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The identifier of the type of object to get data for.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The unique id of the object to get data for. This should be sufficient to identify the object given classId.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DynamicDataRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the data",
            "schema" : {
              "$ref" : "#/definitions/DynamicDataResponse"
            }
          }
        }
      }
    },
    "/api/data-service/list/{classId}/default" : {
      "post" : {
        "summary" : "Retrieves the list of possible values for a given type of object",
        "description" : "Retrieves the list of possible values for a given type of object.",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The class of object.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/elementValuesRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the data",
            "schema" : {
              "$ref" : "#/definitions/elementValues"
            }
          }
        }
      }
    },
    "/api/data-service/list/{classId}/types/{typeFilter}" : {
      "post" : {
        "summary" : "Retrieves the list of possible values for a given type of object",
        "description" : "Retrieves the list of possible values for a given type of object.",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The class of object.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "typeFilter",
          "in" : "path",
          "description" : "A type filter defining the specific subtype that owns the field.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/elementValuesRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the data",
            "schema" : {
              "$ref" : "#/definitions/elementValues"
            }
          }
        }
      }
    },
    "/api/data-service/schema/{classId}/default" : {
      "get" : {
        "summary" : "Get the schema for the specified object class",
        "description" : "Get the schema for the specified object class.",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The class of object to retrieve the schema for.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the data",
            "schema" : {
              "$ref" : "#/definitions/Schema"
            }
          }
        }
      }
    },
    "/api/data-service/schema/{classId}/default/update" : {
      "post" : {
        "summary" : "Get the state of a field in the specified schema",
        "description" : "Get the state of a field in the specified schema.",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The class of object.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/batchElementUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the data",
            "schema" : {
              "$ref" : "#/definitions/formUpdateResponse"
            }
          }
        }
      }
    },
    "/api/data-service/schema/{classId}/default/{fieldId}/values" : {
      "post" : {
        "summary" : "Get the permissible values of a field in the specified schema",
        "description" : "Get the permissible values of a field in the specified schema.",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The class of object.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fieldId",
          "in" : "path",
          "description" : "The id of a field on the schema of the specified object class.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/elementValuesRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the data",
            "schema" : {
              "$ref" : "#/definitions/elementValues"
            }
          }
        }
      }
    },
    "/api/data-service/schema/{classId}/instances/{id}" : {
      "get" : {
        "summary" : "Get the schema for the specified object",
        "description" : "This returns the schema of a particular type adjusted to the state of a specific instance..",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The class of object to retrieve the schema for.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of an instance of the object.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the data",
            "schema" : {
              "$ref" : "#/definitions/Schema"
            }
          }
        }
      }
    },
    "/api/data-service/schema/{classId}/instances/{id}/update" : {
      "post" : {
        "summary" : "Get the state of a field in the specified schema",
        "description" : "Get the state of a field in the specified schema.",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The class of object.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of an instance of the object.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/batchElementUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the data",
            "schema" : {
              "$ref" : "#/definitions/formUpdateResponse"
            }
          }
        }
      }
    },
    "/api/data-service/schema/{classId}/instances/{id}/{fieldId}/values" : {
      "post" : {
        "summary" : "Get the permissible values of a field in the specified schema",
        "description" : "Get the permissible values of a field in the specified schema.",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The class of object.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of an instance of the object.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fieldId",
          "in" : "path",
          "description" : "The id of a field on the schema of the specified object class.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/elementValuesRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the data",
            "schema" : {
              "$ref" : "#/definitions/elementValues"
            }
          }
        }
      }
    },
    "/api/data-service/schema/{classId}/types/{typeFilter}" : {
      "get" : {
        "summary" : "Get the schema for the specified object type",
        "description" : "This returns the schema of a particular type within a class of object.",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The class of object to retrieve the schema for.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "typeFilter",
          "in" : "path",
          "description" : "A type filter defining the specific subtype that owns the field.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the data",
            "schema" : {
              "$ref" : "#/definitions/Schema"
            }
          }
        }
      }
    },
    "/api/data-service/schema/{classId}/types/{typeFilter}/update" : {
      "post" : {
        "summary" : "Get the state of a field in the specified schema",
        "description" : "Get the state of a field in the specified schema.",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The class of object.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "typeFilter",
          "in" : "path",
          "description" : "A type filter defining the specific subtype that owns the field.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/batchElementUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the data",
            "schema" : {
              "$ref" : "#/definitions/formUpdateResponse"
            }
          }
        }
      }
    },
    "/api/data-service/schema/{classId}/types/{typeFilter}/{fieldId}/values" : {
      "post" : {
        "summary" : "Get the permissible values of a field in the specified schema",
        "description" : "Get the permissible values of a field in the specified schema.",
        "parameters" : [ {
          "name" : "classId",
          "in" : "path",
          "description" : "The class of object.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "typeFilter",
          "in" : "path",
          "description" : "A type filter defining the specific subtype that owns the field.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fieldId",
          "in" : "path",
          "description" : "The id of a field on the schema of the specified object class.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/elementValuesRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'Success' with the data",
            "schema" : {
              "$ref" : "#/definitions/elementValues"
            }
          }
        }
      }
    },
    "/api/tenants" : {
      "get" : {
        "summary" : "Return a page of tenants",
        "description" : "",
        "operationId" : "returnTenants",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/tenants/solutions" : {
      "put" : {
        "summary" : "Update service client secret",
        "description" : "Update service client secret (or in case of SSO2 solution user certificate) with the target tenant",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Solution info data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/solutionInfo"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Update is successful"
          }
        }
      }
    },
    "/api/tenants/{tenantId}" : {
      "get" : {
        "summary" : "Return a tenant by its id.",
        "description" : "",
        "operationId" : "getTenant",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Tenant"
            }
          }
        }
      },
      "put" : {
        "summary" : "Create or update a tenant.",
        "description" : "",
        "operationId" : "updateTenant",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant id",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the tenant to update or create",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Tenant"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "summary" : "Delete a tenant by its id",
        "description" : "",
        "operationId" : "deleteTenant",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Tenant deleted successfully"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/directories" : {
      "get" : {
        "summary" : "Return identity stores (aka: directories)",
        "description" : "Return the requested page of identity stores (aka: directories) for the provided tenant",
        "operationId" : "getDirectories",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageIdentityStore"
            }
          }
        }
      },
      "post" : {
        "summary" : "Create an identity store",
        "description" : "Create an identity store. Http status 400 will be returned if an IdentityStore with the given domain exist for the target tenant.",
        "operationId" : "createDirectory",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the target tenant id for the provided identity store",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the identity store to create\n\n**NOTE** the fields ~~*groupBaseSearchDn*~~ and ~~*userBaseSearchDn*~~ are superseded by the corresponding array fields *groupBaseSearchDns* and *userBaseSearchDns* and thus deprecated, any value set to those fields will be ignored",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/directory"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/directory"
            }
          },
          "201" : {
            "description" : "creation is successful"
          },
          "400" : {
            "description" : "creation of identity store failed."
          }
        }
      }
    },
    "/api/tenants/{tenantId}/directories/connectivity" : {
      "put" : {
        "summary" : "Test the connectivity to an identity store",
        "description" : "",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the target tenant id for the provided identity store",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the identity store configuration to test",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/directory"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/tenants/{tenantId}/directories/{id}" : {
      "get" : {
        "summary" : "Retrieve an identity store by its id",
        "description" : "",
        "operationId" : "getDirectory",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the target tenant id for the provided identity store",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/directory"
            }
          }
        }
      },
      "put" : {
        "summary" : "Create or update an identity store",
        "description" : "Creates or update a given IdentityStore. Use the returned instance for further operations as the save operation might have changed the entity instance completely.",
        "operationId" : "updateDirectory",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the target tenant id for the provided identity store",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "the domain of the identity store",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the identity store to update or create\n\n**NOTE** the fields ~~*groupBaseSearchDn*~~ and ~~*userBaseSearchDn*~~ are superseded by the corresponding array fields *groupBaseSearchDns* and *userBaseSearchDns* and thus deprecated, any value set to those fields will be ignored",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/directory"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "create/update is successful"
          },
          "400" : {
            "description" : "creation/update of identity store failed."
          }
        }
      },
      "delete" : {
        "summary" : "Delete an identity store",
        "description" : "Delete an existing identity store identified by its id.",
        "operationId" : "deleteDirectory",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the target tenant id for the provided identity store",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "the domain of the identity store",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "name" : "ignoreBusinessGroupReferences",
          "in" : "query",
          "description" : "perform the deletion even if there are business groups referencing any objects from the identity store",
          "required" : true,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "delete is successful"
          },
          "400" : {
            "description" : "if the message equals 'cms.delete.directory.config.forbidden.associated.connector.instance.domain.joined' this means that the delete operation has failed when deleting a Native AD in the default tenant. In this case it is required to first leave the domain manually and then perform the delete operation."
          },
          "404" : {
            "description" : "identity store with the provided id was not found."
          }
        }
      }
    },
    "/api/tenants/{tenantId}/directories/{id}/status" : {
      "get" : {
        "summary" : "Retrieve the status of an identity store",
        "description" : "Retrieve the status of an identity store identified by its id.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the target tenant id for the provided identity store",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IdentityStoreStatus"
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/groups" : {
      "get" : {
        "summary" : "Retrieves all custom groups and SSO groups.",
        "description" : "Retrieves all custom groups and SSO groups that correspond to the search criteria.\nParameters 'page', '$top' and 'limit' are taken into account only when 'groupType' is set to CUSTOM.\nParameters '$skip', '$filter', '$orderby' are never takeninto account. Please use 'criteria' instead of '$filter'.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "criteria",
          "in" : "query",
          "description" : "the search criteria",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "domain",
          "in" : "query",
          "description" : "the group domain",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentGroup",
          "in" : "query",
          "description" : "parent group id if searching for child groups",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "groupType",
          "in" : "query",
          "description" : "the type of group (either SSO or CUSTOM)",
          "required" : false,
          "type" : "string",
          "enum" : [ "SSO", "CUSTOM" ]
        }, {
          "name" : "permissionFiltered",
          "in" : "query",
          "description" : "optional filter based on assigned status (either 'NOT_ASSIGNED', 'ASSIGNED' or 'CUSTOM_ALL_SSO_ASSIGNED'",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "role",
          "in" : "query",
          "description" : "role if the result should contain only groups which have a specific role",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "operation is successful",
            "schema" : {
              "type" : "object"
            }
          },
          "206" : {
            "description" : "partial result is returned. Some of the directories could not be searched."
          }
        }
      },
      "post" : {
        "summary" : "Create a custom group",
        "description" : "Create a custom group at the top of the tree.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the group to be created",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/group"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "201" : {
            "description" : "creation is successful"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/groups/assigned" : {
      "get" : {
        "summary" : "Retrieves all assigned custom groups and SSO groups.",
        "description" : "Retrieves all custom groups and SSO that has assigned roles and groups that correspond to the search criteria.\nParameter '$filter' is not taken into account, please use 'criteria' instead.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "criteria",
          "in" : "query",
          "description" : "the search criteria",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "operation is successful",
            "schema" : {
              "type" : "object"
            }
          },
          "206" : {
            "description" : "partial result is returned. Some of the directories could not be searched."
          }
        }
      }
    },
    "/api/tenants/{tenantId}/groups/{groupId}" : {
      "get" : {
        "summary" : "Retrieve a group.",
        "description" : "Retrieve a group by its id.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "groupId",
          "in" : "path",
          "description" : "the principal id of the group",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/group"
            }
          }
        }
      },
      "post" : {
        "summary" : "Add users/grops to a parent group.",
        "description" : "Adds a set of groups and users to a parent group. Each group and element must be already existing, otherwise the request will fail. This request will append the provided relations to the already existing ones.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "groupId",
          "in" : "path",
          "description" : "the principal id of the parent group",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "wrapper of the incoming groups and users",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/wrapper"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "operation is successful"
          }
        }
      },
      "put" : {
        "summary" : "Update a custom group",
        "description" : "Updates a Custom group. Only the group data is updated, all members are untouched.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "groupId",
          "in" : "path",
          "description" : "the principal id of the group to update",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "custom grroup data to update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/group"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/group"
            }
          }
        }
      },
      "delete" : {
        "summary" : "Delete a custom group",
        "description" : "Delete a custom group. All child custom groups are preserved and are moved at the top of the tree.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "groupId",
          "in" : "path",
          "description" : "principal id of the group to be deleted",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "delete is successful"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/groups/{groupId}/parents" : {
      "get" : {
        "summary" : "Return all parent groups",
        "description" : "Return all parent groups of a child group. Groups are iterated recursively up the tree.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "groupId",
          "in" : "path",
          "description" : "principal id of child group",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "groupType",
          "in" : "query",
          "description" : "if not null, filter the results by the provided group type",
          "required" : false,
          "type" : "string",
          "enum" : [ "SSO", "CUSTOM" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/groups/{groupId}/subtenants" : {
      "get" : {
        "summary" : "Find business groups of a group",
        "description" : "",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "groupId",
          "in" : "path",
          "description" : "principal id of the group to find business groups for",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "role",
          "in" : "query",
          "description" : "the role to filter",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/groups/{parentGroupId}/groups/{groupId}" : {
      "delete" : {
        "summary" : "Delete a SSO group from a custom group",
        "description" : "",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "parentGroupId",
          "in" : "path",
          "description" : "Distinguished name of the parent group",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "groupId",
          "in" : "path",
          "description" : "Distinguished name of the group to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "delete is successful"
          },
          "404" : {
            "description" : "group with the provided id is not found"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/groups/{parentGroupId}/users" : {
      "get" : {
        "summary" : "Find users in groups",
        "description" : "Finds users in both SSO and Custom groups by tenant and parent group.\nParameters 'page', 'limit', '$skip', '$filter','$orderby' are not taken into account. Please use 'criteria' instead of '$filter'.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "parentGroupId",
          "in" : "path",
          "description" : "principal id of the parent group",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "criteria",
          "in" : "query",
          "description" : "the search criteria",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "expandGroups",
          "in" : "query",
          "description" : "if 'true' then all child groups will be expanded and searched",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/groups/{parentGroupId}/users/{userId}" : {
      "delete" : {
        "summary" : "Remove a user from a custom group",
        "description" : "",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "parentGroupId",
          "in" : "path",
          "description" : "Distinguished name of the parent group",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "Distinguished name of the user to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "delete is successful"
          },
          "404" : {
            "description" : "group with the provided id is not found"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/principals" : {
      "get" : {
        "summary" : "FindsXXX regular users in one of the identity providers configured for the tenant.",
        "description" : "Below are the priorities for each search option:\n- if 'role' is set, find all users matching that role and return\n- else use 'criteria' to search either the account name, first name, last name, or description of the account. Filter results based on 'permissionFiltered' (if provided).\n\nParameters 'page', '$skip' and '$filter' are not taken into account. Use 'limit' and 'criteria' instead.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the url of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "criteria",
          "in" : "query",
          "description" : "the search criteria",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "domain",
          "in" : "query",
          "description" : "the domain in which the service will search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentGroup",
          "in" : "query",
          "description" : "the parent group id to search from",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "permissionFiltered",
          "in" : "query",
          "description" : "optional filter based on assigned status (either 'NOT_ASSIGNED' or 'ASSIGNED'",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "role",
          "in" : "query",
          "description" : "find users who have the provided role. All other search parameters ignored if this is set",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "expandGroups",
          "in" : "query",
          "description" : "If 'true' all child groups will be expanded and search",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "localUsersOnly",
          "in" : "query",
          "description" : "If 'true' only local users will be searched. Supported in Horizon mode only",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "post" : {
        "summary" : "Create a local user.",
        "description" : "Create a local user in vIDM. Applicable only in vIDM mode. Returns 405 Method Not Allowed in SSO2 mode.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant id",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the user to create",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/user"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation is successful.",
            "schema" : {
              "$ref" : "#/definitions/user"
            }
          },
          "405" : {
            "description" : "in case of SSO2 deployment."
          }
        }
      },
      "put" : {
        "summary" : "Return users by ids.",
        "description" : "",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant id",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "list of principal ids to fetch data for",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/principalId"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation is successful.",
            "schema" : {
              "type" : "object"
            }
          },
          "404" : {
            "description" : "Partial result is returned Some directories could not be contacted."
          }
        }
      }
    },
    "/api/tenants/{tenantId}/principals/{userId}" : {
      "get" : {
        "summary" : "Return a user",
        "description" : "Find a single user by id. This method performs a search in SSO",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "the principal id (user@domain) of the user",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation is successful.",
            "schema" : {
              "type" : "object"
            }
          },
          "404" : {
            "description" : "User is not found."
          }
        }
      },
      "put" : {
        "summary" : "Update a local user.",
        "description" : "Update a local user in vIDM. Applicable only in vIDM mode. Returns 405 Method Not Allowed in SSO2 mode.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "the principal id of the user to update",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the user update data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/user"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation is successful.",
            "schema" : {
              "$ref" : "#/definitions/user"
            }
          },
          "405" : {
            "description" : "in case of SSO2 deployment."
          }
        }
      },
      "delete" : {
        "summary" : "Delete a local user.",
        "description" : "Delete a local user in vIDM. Applicable only in vIDM mode. Returns 405 Method Not Allowed in SSO2 mode.",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "the principal id of the user to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation is successful."
          },
          "405" : {
            "description" : "in case of SSO2 deployment."
          }
        }
      }
    },
    "/api/tenants/{tenantId}/principals/{userId}/groups" : {
      "get" : {
        "summary" : "Return parent groups of a user",
        "description" : "",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "the user principal id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "groupType",
          "in" : "query",
          "description" : "which groups to return (SSO or CUSTOM groups).",
          "required" : false,
          "type" : "string",
          "enum" : [ "SSO", "CUSTOM" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation is successful.",
            "schema" : {
              "type" : "object"
            }
          },
          "404" : {
            "description" : "User is not found."
          }
        }
      }
    },
    "/api/tenants/{tenantId}/principals/{userId}/subtenants" : {
      "get" : {
        "summary" : "Return business groups for a user",
        "description" : "Finds business groups that a user belongs to. They might be filtered by role and/or expanded to take into account SSO/custom groups that the user belongs to. The returned collection of subtenants contains the list of roles that the user has on those tenants (without the list of principals that belong to those tenants).",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "the user principal id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "role",
          "in" : "query",
          "description" : "the role to filter",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "expandGroups",
          "in" : "query",
          "description" : "'true' to recursively expand groups",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/relyingparty" : {
      "put" : {
        "summary" : "Register or update relying party",
        "description" : "Register or update a relying party with the target tenant",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the tenant id",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "relying party data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/relyingParty"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Relying party registered successfully"
          }
        }
      }
    },
    "/api/tenants/{tenantId}/subtenants" : {
      "get" : {
        "summary" : "List all business groups",
        "description" : "",
        "operationId" : "getBusinessGroups",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageSubtenant"
            }
          }
        }
      },
      "post" : {
        "summary" : "Create a business group",
        "description" : "",
        "operationId" : "createBusinessGroup",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the business group to create",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/subtenant"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/subtenant"
            }
          },
          "201" : {
            "description" : "Business group successfully created."
          }
        }
      }
    },
    "/api/tenants/{tenantId}/subtenants/principals" : {
      "put" : {
        "summary" : "Return business groups principals",
        "description" : "Return a list of principals for the specified list of business groups, optionally filtered by role name.\nAll business groups must belong to the same tenant.",
        "operationId" : "returnBusinessGroupsPrincipals",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "criteria",
          "in" : "query",
          "description" : "the filtering criteria (optional)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "role",
          "in" : "query",
          "description" : "the filtering role (optional)",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the list of business group ids",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PagePrincipalData"
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/subtenants/roles/{scopeRoleRef}/principals" : {
      "put" : {
        "summary" : "Find principals assigned to a role",
        "description" : "Find all principals within the provided business groups who are assigned to a provided role.",
        "operationId" : "findPrincipalsFromBusinessGroupRole",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "scopeRoleRef",
          "in" : "path",
          "description" : "find all principals who have the provided business group role",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "list of business group ids",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        }, {
          "name" : "",
          "in" : "query",
          "description" : "whether to retrieve the principals display name and type or not. Fetching the additional details will increase the payload and system utilization.",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/subtenants/{id}" : {
      "get" : {
        "summary" : "Get a business group",
        "description" : "Get a business group by its id",
        "operationId" : "getBusinessGroup",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "the business group id to retrieve",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/subtenant"
            }
          }
        }
      },
      "put" : {
        "summary" : "Update a business group",
        "description" : "",
        "operationId" : "updateBusinessGroup",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "the business group id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the business group to update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/subtenant"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/subtenant"
            }
          }
        }
      },
      "delete" : {
        "summary" : "Delete a business group",
        "description" : "Delete a business group by its id",
        "operationId" : "deleteBusinessGroup",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "the business group id to delete",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "204" : {
            "description" : "Business group deleted successfully."
          }
        }
      }
    },
    "/api/tenants/{tenantId}/subtenants/{id}/principals" : {
      "get" : {
        "summary" : "Return business group principals",
        "description" : "Return a list of principals for the specified business group, optionally filtered by role name.",
        "operationId" : "returnBusinessGroupPrincipals",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "the business group id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "criteria",
          "in" : "query",
          "description" : "the filtering criteria (optional)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "role",
          "in" : "query",
          "description" : "the filtering role (optional)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PagePrincipalData"
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/subtenants/{id}/principals/{principalId}/roles" : {
      "get" : {
        "summary" : "Return roles for principal",
        "description" : "Return a list of business group roles that the provided principal has in the provided business group",
        "operationId" : "returnBusinesGroupsPrincipalRoles",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "the business group id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "principalId",
          "in" : "path",
          "description" : "the principal id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageSubtenantRole"
            }
          }
        }
      }
    },
    "/api/tenants/{tenantId}/subtenants/{id}/roles" : {
      "get" : {
        "summary" : "Return business group roles",
        "description" : "",
        "operationId" : "getBusinessGroupRoles",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "the business group id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageSubtenantRole"
            }
          }
        }
      },
      "post" : {
        "summary" : "Add roles to a business group",
        "description" : "Adds a list of business group roles to the already existing roles of the specified business group.",
        "operationId" : "addBusinessGroupRoles",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "the business group id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the roles to add",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/subtenantRole"
            }
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "201" : {
            "description" : "Roles successfully added to the business group."
          }
        }
      }
    },
    "/api/tenants/{tenantId}/subtenants/{id}/roles/{scopeRoleRef}" : {
      "delete" : {
        "summary" : "Remove role from a business group",
        "description" : "Remove the specified business group role from the given business group",
        "operationId" : "removeBusinessGroupRole",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "the business group id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "scopeRoleRef",
          "in" : "path",
          "description" : "the name of the business group role to remove",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Role successfully removed from the business group."
          }
        }
      }
    },
    "/api/tenants/{tenantId}/subtenants/{id}/roles/{scopeRoleRef}/principals" : {
      "get" : {
        "summary" : "Find business group principals assigned with a role",
        "description" : "Finds all principals within a business group who are assigned a given role.",
        "operationId" : "getBusinessGroupPrincipalWithRole",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "the business group id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "scopeRoleRef",
          "in" : "path",
          "description" : "find all users who have this business group role name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PagePrincipalData"
            }
          }
        }
      },
      "post" : {
        "summary" : "Add principals to a business group role",
        "description" : "Adds the provided principals to the identified business group role.",
        "operationId" : "addPrincipalsToBusinessGroupRole",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "the business group id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "scopeRoleRef",
          "in" : "path",
          "description" : "the business group role name to add the provided principal to",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the principals to add to the provided subtenant role",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/principalId"
            }
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "201" : {
            "description" : "Principals successfully added to the business group role."
          }
        }
      }
    },
    "/api/tenants/{tenantId}/subtenants/{id}/roles/{scopeRoleRef}/principals/{principalId}" : {
      "delete" : {
        "summary" : "Remove a principal from a business group role",
        "description" : "",
        "operationId" : "removePrincipalFromBusinessGroupRole",
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "path",
          "description" : "the id of the tenant",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "the business group id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "scopeRoleRef",
          "in" : "path",
          "description" : "the business group role name to add the principal to",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "principalId",
          "in" : "path",
          "description" : "the principals to remove from the business group role",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "User successfully removed from a business group role."
          }
        }
      }
    },
    "/api/tokens" : {
      "post" : {
        "summary" : "Returns a token associated with the provided credentials.",
        "description" : "",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The user credentials.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/auth"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/token"
            }
          }
        }
      }
    },
    "/api/tokens/principals/{principal}" : {
      "delete" : {
        "summary" : "Deletes the UserTokenResource associated with the provided principal.",
        "description" : "",
        "parameters" : [ {
          "name" : "principal",
          "in" : "path",
          "description" : "The principal for which the UserTokenResource should be deleted.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "UserTokenResource is deleted successfully."
          }
        }
      }
    },
    "/api/tokens/suiteToken" : {
      "post" : {
        "summary" : "Returns a token matching the provided request details.",
        "description" : "",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The requested token details.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/suiteTokenRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/token"
            }
          }
        }
      }
    },
    "/api/tokens/{tokenId}" : {
      "head" : {
        "summary" : "Validates if a given token is still valid and not expired.",
        "description" : "",
        "parameters" : [ {
          "name" : "tokenId",
          "in" : "path",
          "description" : "The token id associated with UserTokenResource.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestEntity"
            }
          },
          "204" : {
            "description" : "Token is valid."
          },
          "404" : {
            "description" : "Token is invalid or has expired."
          }
        }
      },
      "delete" : {
        "summary" : "Deletes the UserTokenResource associated with the provided token id.",
        "description" : "",
        "parameters" : [ {
          "name" : "tokenId",
          "in" : "path",
          "description" : "The token id associated with the UserTokenResource that should be deleted.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "UserTokenResource is deleted successfully."
          }
        }
      }
    },
    "/api/tokens/{tokenId}/securityContext" : {
      "get" : {
        "summary" : "Returns the UserSecurityContext associated with the provided token id.",
        "description" : "",
        "parameters" : [ {
          "name" : "tokenId",
          "in" : "path",
          "description" : "The token id associated with the UserTokenResource.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/userSecurityContext"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "AclEntry" : {
      "type" : "object",
      "properties" : {
        "resourceRefId" : {
          "type" : "string"
        },
        "principalId" : {
          "type" : "string"
        },
        "tenant" : {
          "type" : "string"
        },
        "roleId" : {
          "type" : "string"
        }
      }
    },
    "AndClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "subClauses" : {
            "type" : "array",
            "xml" : {
              "name" : "clause"
            },
            "items" : {
              "$ref" : "#/definitions/Clause"
            }
          }
        }
      } ]
    },
    "BooleanLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/booleanLiteral"
      }, {
        "type" : "object",
        "description" : "Wraps a boolean value.",
        "xml" : {
          "name" : "booleanLiteral"
        }
      } ]
    },
    "CallbackEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object"
      } ]
    },
    "Clause" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "CoalesceEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "arguments" : {
            "type" : "array",
            "xml" : {
              "name" : "argument",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "ComplexDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object",
        "properties" : {
          "schema" : {
            "$ref" : "#/definitions/Schema"
          }
        }
      } ]
    },
    "ComplexEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "componentTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "typeFilter" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "values" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "ConditionalEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "cases" : {
            "type" : "array",
            "xml" : {
              "name" : "case"
            },
            "items" : {
              "$ref" : "#/definitions/ConditionalEvaluatorCase"
            }
          },
          "defaulValue" : {
            "$ref" : "#/definitions/Evaluator"
          }
        }
      } ]
    },
    "ConditionalEvaluatorCase" : {
      "type" : "object",
      "properties" : {
        "condition" : {
          "$ref" : "#/definitions/Clause"
        },
        "value" : {
          "$ref" : "#/definitions/Evaluator"
        }
      }
    },
    "ConstantClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/booleanLiteral"
          }
        }
      } ]
    },
    "ConstantValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/literal"
          }
        }
      } ]
    },
    "Constraint" : {
      "type" : "object",
      "required" : [ "value" ],
      "discriminator" : "type",
      "properties" : {
        "value" : {
          "$ref" : "#/definitions/Evaluator"
        }
      }
    },
    "ContainsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "ContextPermissibleValueList" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PermissibleValueList"
      }, {
        "type" : "object"
      } ]
    },
    "CriteriaOperator" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "CustomPropertyDefinitionMetadata" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object",
        "required" : [ "field" ],
        "properties" : {
          "field" : {
            "$ref" : "#/definitions/Field"
          }
        }
      } ]
    },
    "CustomValidationConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "DataType" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "typeId" : {
          "type" : "string",
          "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
        }
      }
    },
    "DefaultValueBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "DisplayTextBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "DynamicDataRequest" : {
      "type" : "object",
      "properties" : {
        "tenantId" : {
          "type" : "string"
        },
        "ignoreUnknownFields" : {
          "type" : "boolean",
          "default" : false
        },
        "ids" : {
          "type" : "array",
          "xml" : {
            "name" : "id"
          },
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "DynamicDataResponse" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "$ref" : "#/definitions/literalMap"
        }
      }
    },
    "DynamicLayoutReference" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutReference"
      }, {
        "type" : "object",
        "properties" : {
          "dependencies" : {
            "type" : "array",
            "xml" : {
              "name" : "dependency",
              "wrapped" : true
            },
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "DynamicPermissibleValueList" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PermissibleValueList"
      }, {
        "type" : "object",
        "properties" : {
          "context" : {
            "$ref" : "#/definitions/DynamicValueContext"
          },
          "dependencies" : {
            "type" : "array",
            "xml" : {
              "name" : "dependency",
              "wrapped" : true
            },
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "DynamicValueContext" : {
      "type" : "object",
      "required" : [ "parameterMappings" ],
      "properties" : {
        "providerEntityId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "parameterMappings" : {
          "$ref" : "#/definitions/ParameterMappingCollection"
        }
      }
    },
    "EditableBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "ElementState" : {
      "type" : "object",
      "properties" : {
        "dependencies" : {
          "type" : "array",
          "xml" : {
            "name" : "dependency",
            "wrapped" : true
          },
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "facets" : {
          "type" : "array",
          "xml" : {
            "name" : "facet",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/Constraint"
          }
        }
      }
    },
    "ElementValuesPagingInfo" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "EncryptedBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "EndsWithOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "EntityReferenceDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object"
      } ]
    },
    "EqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "Evaluator" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "Expression" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "operator" : {
            "$ref" : "#/definitions/CriteriaOperator"
          },
          "leftOperand" : {
            "$ref" : "#/definitions/Evaluator"
          },
          "rightOperand" : {
            "$ref" : "#/definitions/Evaluator"
          }
        }
      } ]
    },
    "ExtensionRendererContext" : {
      "type" : "object",
      "properties" : {
        "extensionId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "parameterMappings" : {
          "$ref" : "#/definitions/ParameterMappingCollection"
        }
      }
    },
    "ExternalValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "required" : [ "dynamicValueProviderInfo" ],
        "properties" : {
          "dynamicValueProviderInfo" : {
            "$ref" : "#/definitions/DynamicValueContext"
          }
        }
      } ]
    },
    "FacetValueMap" : {
      "type" : "object",
      "properties" : {
        "facets" : {
          "type" : "array",
          "xml" : {
            "name" : "facet",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/FacetValueMapEntry"
          }
        }
      }
    },
    "FacetValueMapEntry" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "value" : {
          "$ref" : "#/definitions/literal"
        }
      }
    },
    "Field" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "label" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "dataType" : {
          "$ref" : "#/definitions/DataType"
        },
        "displayAdvice" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "TEXTBOX", "HYPERLINK", "EMAIL", "TEXTAREA", "DATE_TIME_PICKER", "CHECKBOX", "YES_NO", "CHECKBOX_GROUP", "DUAL_LIST", "RADIO_GROUP", "DROPDOWN", "LIST", "SEARCHER", "TREE", "FORM", "IMAGE", "SLIDER", "DATA_TABLE", "VALUE_PICKER", "CONFIRM_PASSWORD" ]
        },
        "orderIndex" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        },
        "permissibleValues" : {
          "$ref" : "#/definitions/PermissibleValueList"
        },
        "state" : {
          "$ref" : "#/definitions/ElementState"
        },
        "isMultiValued" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "columns" : {
          "type" : "array",
          "xml" : {
            "name" : "column",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/Field"
          }
        }
      }
    },
    "FieldReference" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "path" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        }
      } ]
    },
    "FixedValueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "GreaterThanOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "GreaterThanOrEqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "IaasPropertyNameBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "IdentityStoreConnectivityStatus" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "FAILURE", "UNDEFINED" ]
        },
        "message" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "IdentityStoreConnectivityStatus"
      }
    },
    "IdentityStoreStatus" : {
      "type" : "object",
      "properties" : {
        "syncStatus" : {
          "$ref" : "#/definitions/IdentityStoreSyncStatus"
        }
      },
      "xml" : {
        "name" : "IdentityStoreStatus"
      }
    },
    "IdentityStoreSyncStatus" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "COMPLETED", "FAILED", "RUNNING", "UNDEFINED" ]
        },
        "message" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "IdentityStoreSyncStatus"
      }
    },
    "IncrementBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "InternalConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "IsDefinedOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "LayoutCell" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "LayoutExtension" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutCell"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "extensionId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "extensionPointId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "fieldPrefix" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          }
        }
      } ]
    },
    "LayoutField" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutFlowElement"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "label" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "orderIndex" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dataType" : {
            "$ref" : "#/definitions/DataType"
          },
          "displayAdvice" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "TEXTBOX", "HYPERLINK", "EMAIL", "TEXTAREA", "DATE_TIME_PICKER", "CHECKBOX", "YES_NO", "CHECKBOX_GROUP", "DUAL_LIST", "RADIO_GROUP", "DROPDOWN", "LIST", "SEARCHER", "TREE", "FORM", "IMAGE", "SLIDER", "DATA_TABLE", "VALUE_PICKER", "CONFIRM_PASSWORD" ]
          },
          "permissibleValues" : {
            "$ref" : "#/definitions/PermissibleValueList"
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          },
          "labelSize" : {
            "type" : "integer",
            "format" : "int32",
            "xml" : {
              "attribute" : true
            }
          },
          "detailLayout" : {
            "$ref" : "#/definitions/LayoutReference"
          },
          "extensionRendererContext" : {
            "$ref" : "#/definitions/ExtensionRendererContext"
          },
          "isMultiValued" : {
            "type" : "boolean",
            "xml" : {
              "attribute" : true
            },
            "default" : false
          },
          "columns" : {
            "type" : "array",
            "xml" : {
              "name" : "column",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/LayoutField"
            }
          }
        }
      } ]
    },
    "LayoutFlow" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutCell"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          },
          "parts" : {
            "type" : "array",
            "xml" : {
              "name" : "part",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/LayoutFlowElement"
            }
          }
        }
      } ]
    },
    "LayoutFlowElement" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutCell"
      }, {
        "type" : "object"
      } ]
    },
    "LayoutPage" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "label" : {
          "type" : "string"
        },
        "state" : {
          "$ref" : "#/definitions/ElementState"
        },
        "sections" : {
          "type" : "array",
          "xml" : {
            "name" : "section",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/LayoutSection"
          }
        }
      }
    },
    "LayoutPlaceholderCell" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutCell"
      }, {
        "type" : "object"
      } ]
    },
    "LayoutReference" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "LayoutRow" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "xml" : {
            "name" : "item",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/LayoutCell"
          }
        }
      }
    },
    "LayoutSection" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "label" : {
          "type" : "string"
        },
        "state" : {
          "$ref" : "#/definitions/ElementState"
        },
        "rows" : {
          "type" : "array",
          "xml" : {
            "name" : "row",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/LayoutRow"
          }
        }
      }
    },
    "LayoutText" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutFlowElement"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "value" : {
            "type" : "string"
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          }
        }
      } ]
    },
    "LessThanOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "LessThanOrEqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "LiteralMapEntry" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "value" : {
          "$ref" : "#/definitions/literal"
        }
      }
    },
    "MandatoryConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaxCardinalityConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaxLengthConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaxValueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaximumValueEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "arguments" : {
            "type" : "array",
            "xml" : {
              "name" : "argument",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "MinCardinalityConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MinLengthConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MinValueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MinimumValueEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "arguments" : {
            "type" : "array",
            "xml" : {
              "name" : "argument",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "MonetaryValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "currencyCode" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The ISO 4217 code used to identify the currency (if any) associated with this value."
          }
        },
        "description" : "Base type for representing monetary values, encapsulating both some kind of quantity and a currency.",
        "xml" : {
          "name" : "literal"
        }
      } ]
    },
    "MultipleEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "required" : [ "items" ],
        "properties" : {
          "elementTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "NotClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "subClause" : {
            "$ref" : "#/definitions/Clause"
          }
        }
      } ]
    },
    "NotEqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "NullDisplayTextBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "ObjectDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object",
        "properties" : {
          "componentTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "typeFilter" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "label" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        }
      } ]
    },
    "OrClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "subClauses" : {
            "type" : "array",
            "xml" : {
              "name" : "clause"
            },
            "items" : {
              "$ref" : "#/definitions/Clause"
            }
          }
        }
      } ]
    },
    "PageAclEntry" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AclEntry"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageIdentityStore" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/directory"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PagePrincipalData" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/principalData"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageSubtenant" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/subtenant"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageSubtenantRole" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/subtenantRole"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ParameterMapping" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "value" : {
          "$ref" : "#/definitions/Evaluator"
        }
      }
    },
    "ParameterMappingCollection" : {
      "type" : "object",
      "properties" : {
        "params" : {
          "type" : "array",
          "xml" : {
            "name" : "param",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/ParameterMapping"
          }
        }
      }
    },
    "PermissibleValueList" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "customAllowed" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        }
      }
    },
    "Permission" : {
      "type" : "object",
      "required" : [ "description", "id", "name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 100,
          "pattern" : "[A-Z0-9_]+"
        },
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 2000
        },
        "status" : {
          "type" : "string"
        },
        "prereqAdminPermissions" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Permission"
          }
        }
      }
    },
    "PrimitiveDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object",
        "properties" : {
          "typeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
          }
        }
      } ]
    },
    "PrincipalRef" : {
      "type" : "object",
      "required" : [ "domain", "name" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "domain" : {
          "type" : "string"
        }
      }
    },
    "ReadOnlyConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "RefreshOnChangeBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "RegexpConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object",
        "properties" : {
          "errorMessage" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ResetValueBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "ResourceRef" : {
      "type" : "object",
      "required" : [ "id", "label", "tenant" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 100,
          "pattern" : "[\\S]+"
        },
        "label" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "resourceTypeRef" : {
          "$ref" : "#/definitions/ResourceTypeRef"
        },
        "tenant" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255,
          "pattern" : "[A-Za-z0-9\\-\\.\\_\\~\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\:\\@]+"
        }
      }
    },
    "ResourceTypeRef" : {
      "type" : "object",
      "required" : [ "id", "label" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 100,
          "pattern" : "[\\S]+"
        },
        "label" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        }
      }
    },
    "RestEntity" : {
      "type" : "object",
      "properties" : {
        "body" : {
          "type" : "object"
        },
        "httpStatus" : {
          "type" : "string",
          "enum" : [ "CONTINUE", "SWITCHING_PROTOCOLS", "PROCESSING", "CHECKPOINT", "OK", "CREATED", "ACCEPTED", "NON_AUTHORITATIVE_INFORMATION", "NO_CONTENT", "RESET_CONTENT", "PARTIAL_CONTENT", "MULTI_STATUS", "ALREADY_REPORTED", "IM_USED", "MULTIPLE_CHOICES", "MOVED_PERMANENTLY", "FOUND", "MOVED_TEMPORARILY", "SEE_OTHER", "NOT_MODIFIED", "USE_PROXY", "TEMPORARY_REDIRECT", "PERMANENT_REDIRECT", "BAD_REQUEST", "UNAUTHORIZED", "PAYMENT_REQUIRED", "FORBIDDEN", "NOT_FOUND", "METHOD_NOT_ALLOWED", "NOT_ACCEPTABLE", "PROXY_AUTHENTICATION_REQUIRED", "REQUEST_TIMEOUT", "CONFLICT", "GONE", "LENGTH_REQUIRED", "PRECONDITION_FAILED", "PAYLOAD_TOO_LARGE", "REQUEST_ENTITY_TOO_LARGE", "URI_TOO_LONG", "REQUEST_URI_TOO_LONG", "UNSUPPORTED_MEDIA_TYPE", "REQUESTED_RANGE_NOT_SATISFIABLE", "EXPECTATION_FAILED", "I_AM_A_TEAPOT", "INSUFFICIENT_SPACE_ON_RESOURCE", "METHOD_FAILURE", "DESTINATION_LOCKED", "UNPROCESSABLE_ENTITY", "LOCKED", "FAILED_DEPENDENCY", "UPGRADE_REQUIRED", "PRECONDITION_REQUIRED", "TOO_MANY_REQUESTS", "REQUEST_HEADER_FIELDS_TOO_LARGE", "INTERNAL_SERVER_ERROR", "NOT_IMPLEMENTED", "BAD_GATEWAY", "SERVICE_UNAVAILABLE", "GATEWAY_TIMEOUT", "HTTP_VERSION_NOT_SUPPORTED", "VARIANT_ALSO_NEGOTIATES", "INSUFFICIENT_STORAGE", "LOOP_DETECTED", "BANDWIDTH_LIMIT_EXCEEDED", "NOT_EXTENDED", "NETWORK_AUTHENTICATION_REQUIRED" ]
        },
        "httpHeaders" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "setLocation" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "Role" : {
      "type" : "object",
      "required" : [ "id", "name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 100,
          "pattern" : "[A-Z0-9_]+"
        },
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string"
        },
        "assignedPermissions" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Permission"
          }
        }
      }
    },
    "RoleExtension" : {
      "type" : "object",
      "required" : [ "id", "name", "role" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 100,
          "pattern" : "[A-Z0-9_]+"
        },
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string"
        },
        "role" : {
          "$ref" : "#/definitions/Role"
        },
        "assignedPermissions" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Permission"
          }
        }
      }
    },
    "Schema" : {
      "type" : "object",
      "properties" : {
        "fields" : {
          "type" : "array",
          "xml" : {
            "name" : "field"
          },
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Field"
          }
        }
      }
    },
    "Scope" : {
      "type" : "object",
      "required" : [ "id", "name", "tenant" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 100,
          "pattern" : "[\\S]+"
        },
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string"
        },
        "scopeType" : {
          "$ref" : "#/definitions/ScopeType"
        },
        "tenant" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255,
          "pattern" : "[A-Za-z0-9\\-\\.\\_\\~\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\:\\@]+"
        }
      }
    },
    "ScopeAuthoritiesEntry" : {
      "type" : "object",
      "properties" : {
        "scope" : {
          "type" : "string"
        },
        "authorities" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ScopeRole" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Role"
      }, {
        "type" : "object",
        "properties" : {
          "scopeType" : {
            "$ref" : "#/definitions/ScopeType"
          }
        }
      } ]
    },
    "ScopeType" : {
      "type" : "object",
      "required" : [ "id", "name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 100,
          "pattern" : "[A-Z0-9_]+"
        },
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string"
        },
        "prereqAdminPermissions" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Permission"
          }
        }
      }
    },
    "SkipExportBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "Sort" : {
      "type" : "object"
    },
    "StartsWithOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "StaticLayout" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutReference"
      }, {
        "type" : "object",
        "required" : [ "layout" ],
        "properties" : {
          "layout" : {
            "$ref" : "#/definitions/layout"
          }
        }
      } ]
    },
    "StaticPermissibleValueList" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PermissibleValueList"
      }, {
        "type" : "object",
        "properties" : {
          "values" : {
            "type" : "array",
            "xml" : {
              "name" : "value"
            },
            "items" : {
              "$ref" : "#/definitions/value"
            }
          }
        }
      } ]
    },
    "SubsetOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "SupersetOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "SystemRole" : {
      "type" : "object",
      "required" : [ "id", "name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 100,
          "pattern" : "[A-Z0-9_]+"
        },
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string"
        },
        "assignedPermissions" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Permission"
          }
        }
      }
    },
    "Tenant" : {
      "type" : "object",
      "required" : [ "id", "name", "urlName" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "urlName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50,
          "pattern" : "[A-Za-z0-9\\-\\.\\_\\~]+"
        },
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2000
        },
        "contactEmail" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "password" : {
          "type" : "string"
        },
        "defaultTenant" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "TenantRole" : {
      "type" : "object",
      "required" : [ "id", "name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 100,
          "pattern" : "[A-Z0-9_]+"
        },
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string"
        },
        "assignedPermissions" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Permission"
          }
        }
      }
    },
    "TimeSpan" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "description" : "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days.",
        "xml" : {
          "name" : "timeSpan"
        }
      } ]
    },
    "UniqueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "UnspecifiedEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object"
      } ]
    },
    "VisibilityConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "WithinOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "WrapperClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/Evaluator"
          }
        }
      } ]
    },
    "auth" : {
      "type" : "object",
      "required" : [ "tenant", "username" ],
      "properties" : {
        "username" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        },
        "tenant" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "auth"
      }
    },
    "batchElementUpdateRequest" : {
      "type" : "object",
      "required" : [ "formValues" ],
      "properties" : {
        "formValues" : {
          "$ref" : "#/definitions/literalMap"
        },
        "trigger" : {
          "type" : "string"
        },
        "triggeredDetailsLayout" : {
          "$ref" : "#/definitions/layout"
        },
        "affectedElements" : {
          "type" : "array",
          "xml" : {
            "wrapped" : true
          },
          "items" : {
            "type" : "string"
          }
        }
      },
      "xml" : {
        "name" : "batchElementUpdateRequest"
      }
    },
    "booleanLiteral" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "value" : {
          "type" : "boolean",
          "description" : "The boolean value.",
          "default" : false
        }
      },
      "description" : "Wraps a boolean value.",
      "xml" : {
        "name" : "booleanLiteral"
      }
    },
    "complexLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "componentTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's component type."
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's component."
          },
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's class."
          },
          "typeFilter" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The type filter for this literal."
          },
          "values" : {
            "description" : "Map of values, keyed by the field ids of some complex type.",
            "$ref" : "#/definitions/literalMap"
          }
        },
        "description" : "A complex value composed of multiple values keyed by the field ids of some complex type.",
        "xml" : {
          "name" : "complexLiteral"
        }
      } ]
    },
    "context" : {
      "type" : "object",
      "properties" : {
        "authorities" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "scopeAuthorities" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ScopeAuthoritiesEntry"
          }
        }
      },
      "xml" : {
        "name" : "context"
      }
    },
    "dateTimeLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date."
          }
        },
        "description" : "Wraps a Date & Time value. This is a wrapper for the Java {@link Date} class.",
        "xml" : {
          "name" : "dateTimeLiteral"
        }
      } ]
    },
    "decimalLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "number",
            "format" : "double",
            "description" : "The decimal value."
          }
        },
        "description" : "Wraps a decimal value.",
        "xml" : {
          "name" : "decimalLiteral"
        }
      } ]
    },
    "directory" : {
      "type" : "object",
      "required" : [ "domain", "name", "password", "type", "url", "userNameDn" ],
      "properties" : {
        "domain" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "alias" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "LDAP", "AD", "NATIVE_AD", "LOCAL_DIRECTORY" ]
        },
        "userNameDn" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        },
        "url" : {
          "type" : "string"
        },
        "groupBaseSearchDn" : {
          "type" : "string"
        },
        "userBaseSearchDn" : {
          "type" : "string"
        },
        "subdomains" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "groupBaseSearchDns" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "userBaseSearchDns" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "domainAdminUsername" : {
          "type" : "string"
        },
        "domainAdminPassword" : {
          "type" : "string"
        },
        "certificate" : {
          "type" : "string"
        },
        "trustAll" : {
          "type" : "boolean",
          "default" : false
        },
        "useGlobalCatalog" : {
          "type" : "boolean",
          "default" : false
        },
        "groupObjectQuery" : {
          "type" : "string"
        },
        "bindUserObjectQuery" : {
          "type" : "string"
        },
        "userObjectQuery" : {
          "type" : "string"
        },
        "customDirectorySearchAttribute" : {
          "type" : "string"
        },
        "membershipAttribute" : {
          "type" : "string"
        },
        "objectUuidAttribute" : {
          "type" : "string"
        },
        "distinguishedNameAttribute" : {
          "type" : "string"
        },
        "new" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "directory"
      }
    },
    "elementValues" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "array",
          "xml" : {
            "name" : "value",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/value"
          }
        }
      },
      "xml" : {
        "name" : "elementValues"
      }
    },
    "elementValuesRequest" : {
      "type" : "object",
      "properties" : {
        "text" : {
          "type" : "string"
        },
        "tenantId" : {
          "type" : "string"
        },
        "userId" : {
          "type" : "string"
        },
        "dependencyValues" : {
          "$ref" : "#/definitions/literalMap"
        },
        "pagingInfo" : {
          "$ref" : "#/definitions/ElementValuesPagingInfo"
        },
        "associateValue" : {
          "$ref" : "#/definitions/literal"
        },
        "headers" : {
          "$ref" : "#/definitions/literalMap"
        }
      },
      "xml" : {
        "name" : "elementValuesRequest"
      }
    },
    "entityRef" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier of the type or category to which the referenced entity belongs."
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The unique identifier of the referenced entity, encoded as a string"
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The durable identifier of a component registered in the suite component registry that owns and manages the referenced entity. This can be omitted if this component can be derived from the context within which this entity reference occurs. It must be specified, if no such context exists or if the component differs from that defined by the context."
          },
          "label" : {
            "type" : "string"
          }
        },
        "description" : "Represents a reference to an entity defined somewhere in the suite.",
        "xml" : {
          "name" : "entityRef"
        }
      } ]
    },
    "entityRefEx" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "href" : {
            "type" : "string",
            "description" : "the Href"
          }
        },
        "description" : "Represents a reference to an entity by uri",
        "xml" : {
          "name" : "entityRefEx"
        }
      } ]
    },
    "formUpdateResponse" : {
      "type" : "object",
      "properties" : {
        "elementUpdates" : {
          "type" : "array",
          "xml" : {
            "name" : "elementUpdate",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/updateElementEntry"
          }
        }
      },
      "xml" : {
        "name" : "formUpdateResponse"
      }
    },
    "group" : {
      "type" : "object",
      "required" : [ "groupType", "name", "principalId" ],
      "properties" : {
        "groupType" : {
          "type" : "string",
          "enum" : [ "SSO", "CUSTOM" ]
        },
        "netbios" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 100
        },
        "fqdn" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "domain" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 100
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2000
        },
        "principalId" : {
          "$ref" : "#/definitions/principalId"
        },
        "emailAddress" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "group"
      }
    },
    "integerLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The integer value."
          }
        },
        "description" : "Wraps a signed 64-bit integer value.",
        "xml" : {
          "name" : "integerLiteral"
        }
      } ]
    },
    "layout" : {
      "type" : "object",
      "properties" : {
        "pages" : {
          "type" : "array",
          "xml" : {
            "name" : "page",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/LayoutPage"
          }
        }
      },
      "xml" : {
        "name" : "layout"
      }
    },
    "literal" : {
      "type" : "object",
      "discriminator" : "type",
      "description" : "Wraps a value such that values of different types can be treated generically.",
      "xml" : {
        "name" : "literal"
      }
    },
    "literalMap" : {
      "type" : "object",
      "properties" : {
        "entries" : {
          "type" : "array",
          "xml" : {
            "name" : "entry"
          },
          "items" : {
            "$ref" : "#/definitions/LiteralMapEntry"
          }
        }
      },
      "description" : "Equivalent of java.util.Map",
      "xml" : {
        "name" : "literalMap"
      }
    },
    "membershipContext" : {
      "type" : "object",
      "properties" : {
        "currentUserPrincipal" : {
          "$ref" : "#/definitions/principalId"
        },
        "tenant" : {
          "type" : "string"
        },
        "principals" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/principalId"
          }
        },
        "subtenants" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/simpleSubtenant"
          }
        }
      },
      "xml" : {
        "name" : "membershipContext"
      }
    },
    "money" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "format" : "double",
            "description" : "The amount associated with this value (with no specific currency)."
          }
        },
        "description" : "Represents a single, precise monetary value.",
        "xml" : {
          "name" : "money"
        }
      } ]
    },
    "moneyRange" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "minValue" : {
            "type" : "number",
            "format" : "double",
            "description" : "The lower limit of the range."
          },
          "maxValue" : {
            "type" : "number",
            "format" : "double",
            "description" : "The upper limit of the range."
          }
        },
        "description" : "Represents a range of money values, between some defined minimums and maximums.",
        "xml" : {
          "name" : "moneyRange"
        }
      } ]
    },
    "moneyRate" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "cost" : {
            "description" : "The cost (including optional currency code).",
            "$ref" : "#/definitions/literal"
          }
        },
        "description" : "A base type for literals representing a rate of some monetary value over a specified basis. E.g. $5 / hour; $1-2 / GB.",
        "xml" : {
          "name" : "moneyRate"
        }
      } ]
    },
    "moneyTimeRate" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "basis" : {
            "description" : "The span of time to calculate the rate of money for.",
            "$ref" : "#/definitions/timeSpan"
          }
        },
        "description" : "Represents a rate of money over time.",
        "xml" : {
          "name" : "moneyTimeRate"
        }
      } ]
    },
    "multipleLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "elementTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The data type of the items in the list.",
            "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
          },
          "items" : {
            "type" : "array",
            "xml" : {
              "name" : "item"
            },
            "description" : "The list of specified values. NOTE: All values must be of the same data type.",
            "items" : {
              "$ref" : "#/definitions/literal"
            }
          }
        },
        "description" : "A literal which represents multiple values. All of these component values must be of the same data type.",
        "xml" : {
          "name" : "multipleLiteral"
        }
      } ]
    },
    "principal" : {
      "type" : "object",
      "required" : [ "displayName", "id", "principalRef", "tenant" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255,
          "pattern" : "(^\\S{1,2}$)|(^\\S.+\\S$)"
        },
        "displayName" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "principalRef" : {
          "$ref" : "#/definitions/PrincipalRef"
        },
        "systemRoles" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/SystemRole"
          }
        },
        "tenantRoles" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/TenantRole"
          }
        },
        "scopes" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Scope"
          }
        },
        "tenant" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255,
          "pattern" : "[A-Za-z0-9\\-\\.\\_\\~\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\:\\@]+"
        }
      },
      "xml" : {
        "name" : "principal"
      }
    },
    "principalData" : {
      "type" : "object",
      "required" : [ "principalId", "principalType" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "principalId" : {
          "$ref" : "#/definitions/principalId"
        },
        "principalType" : {
          "type" : "string",
          "enum" : [ "GROUP", "USER", "CUSTOM_GROUP", "SSO_GROUP" ]
        }
      },
      "xml" : {
        "name" : "principalData"
      }
    },
    "principalId" : {
      "type" : "object",
      "properties" : {
        "domain" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "name" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "principalId"
      }
    },
    "relyingParty" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "serviceId" : {
          "type" : "string"
        },
        "signingCertificate" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "relyingParty"
      }
    },
    "secureString" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "The string value."
          }
        },
        "description" : "Wraps a secured string value, such as a password.",
        "xml" : {
          "name" : "secureString"
        }
      } ]
    },
    "simpleSubtenant" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "subtenantRoles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/simpleSubtenantRole"
          }
        }
      },
      "xml" : {
        "name" : "simpleSubtenant"
      }
    },
    "simpleSubtenantRole" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "simpleSubtenantRole"
      }
    },
    "solutionInfo" : {
      "type" : "object",
      "properties" : {
        "solutionName" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "certificate" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "solutionInfo"
      }
    },
    "stringLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "The string value."
          }
        },
        "description" : "Wraps a String value.",
        "xml" : {
          "name" : "stringLiteral"
        }
      } ]
    },
    "subtenant" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2000
        },
        "subtenantRoles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/subtenantRole"
          }
        },
        "tenant" : {
          "type" : "string"
        },
        "extensionData" : {
          "$ref" : "#/definitions/literalMap"
        }
      },
      "xml" : {
        "name" : "subtenant"
      }
    },
    "subtenantRole" : {
      "type" : "object",
      "required" : [ "name", "scopeRoleRef" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "scopeRoleRef" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "principalId" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      },
      "xml" : {
        "name" : "subtenantRole"
      }
    },
    "suiteTokenRequest" : {
      "type" : "object",
      "properties" : {
        "principal" : {
          "type" : "string"
        },
        "validity" : {
          "type" : "integer",
          "format" : "int32"
        },
        "tenant" : {
          "type" : "string"
        },
        "signingCert" : {
          "type" : "string"
        },
        "requestLifetime" : {
          "type" : "integer",
          "format" : "int32"
        }
      },
      "xml" : {
        "name" : "suiteTokenRequest"
      }
    },
    "timeSpan" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "unit" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "description" : "The unit of measure for the time span. e.g: days.",
          "enum" : [ "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS", "WEEKS", "MONTHS", "YEARS" ]
        },
        "amount" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          },
          "description" : "The amount for the time span."
        }
      },
      "description" : "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days.",
      "xml" : {
        "name" : "timeSpan"
      }
    },
    "token" : {
      "type" : "object",
      "properties" : {
        "expires" : {
          "type" : "string",
          "format" : "date-time"
        },
        "id" : {
          "type" : "string"
        },
        "tenant" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "token"
      }
    },
    "updateElementEntry" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "detailLayout" : {
          "$ref" : "#/definitions/layout"
        },
        "facetValues" : {
          "$ref" : "#/definitions/FacetValueMap"
        },
        "extensionRendererContext" : {
          "$ref" : "#/definitions/literalMap"
        },
        "permissibleValues" : {
          "type" : "array",
          "xml" : {
            "name" : "value",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/value"
          }
        },
        "errors" : {
          "type" : "array",
          "xml" : {
            "name" : "error",
            "wrapped" : true
          },
          "items" : {
            "type" : "string"
          }
        }
      },
      "xml" : {
        "name" : "updateElementEntry"
      }
    },
    "user" : {
      "type" : "object",
      "required" : [ "principalId" ],
      "properties" : {
        "firstName" : {
          "type" : "string"
        },
        "lastName" : {
          "type" : "string"
        },
        "emailAddress" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "locked" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "disabled" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "password" : {
          "type" : "string"
        },
        "principalId" : {
          "$ref" : "#/definitions/principalId"
        },
        "tenantName" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "user"
      }
    },
    "userSecurityContext" : {
      "type" : "object",
      "properties" : {
        "authoritiesContext" : {
          "$ref" : "#/definitions/context"
        },
        "membershipContext" : {
          "$ref" : "#/definitions/membershipContext"
        },
        "samlToken" : {
          "type" : "string"
        },
        "suite" : {
          "type" : "boolean",
          "default" : false
        },
        "solution" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "userSecurityContext"
      }
    },
    "value" : {
      "type" : "object",
      "properties" : {
        "underlyingValue" : {
          "$ref" : "#/definitions/literal"
        },
        "label" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "value"
      }
    },
    "wrapper" : {
      "type" : "object",
      "properties" : {
        "parentGroup" : {
          "$ref" : "#/definitions/group"
        },
        "users" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/user"
          }
        },
        "groups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/group"
          }
        }
      },
      "xml" : {
        "name" : "wrapper"
      }
    }
  }
}