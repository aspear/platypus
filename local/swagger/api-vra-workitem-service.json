{
  "swagger" : "2.0",
  "info" : {
    "description" : "# Work Item Service API Specification\n\n## What Is the Work Item Service?\n\nThe work item service provides a standard way for services to present work items to users. The work item service:\n\n* Provides a central repository of work items in the suite of services, which presents users with a single view of all of their work items.\n* Manages assignment of work items to users and groups.\n* Provides a user interface for viewing and completing work items.\n* Sends notifications of work item events via the notification service.\n* Manages the life-cycle of a work item and passes events back to the system that created it.\n* Allows you to reassign certain work items to other users or  assign delegates for all different types of work items once.\n\nThe work item service does not:\n\n* Decide when a work item must be created.\n* Perform actions when work items are completed, i.e., does not advance workflows, if, for example an approval request has been approved.\n* Contain policies that overlap with externally defined policies, such as approval policies.\n\n## Typical Use Cases\n\nUsing the work item service:\n\n* Provider applications create work item types and specify the actions that the work item type can enable. Provider applications can also modify and update or cancel work items.\n* Integrators use an extension point that is hosted on the work item page to render context-specific data for the work item.  For example, a travel application might embed a seating chart into the manual seat assignment task for a travel request.\n* End users view a list of the work items assigned or delegated to them. They can also reassign work items to users or groups that belong to their organization.\n* Assignees, delegates of an assignee, or privileged administrator users complete work items.\n\n## Key Concepts\n\n### Work Item\n\nA work item represents a piece of work that must be carried out by an end user. Examples of work items are:\n \n* An approval request - A request for a user to approve an action such as a request for a catalog item.\n* A manual task - A request for a user to perform some action as part of a workflow. For example, VCO user interactions can generate manual tasks.\n* A remediation task - Tasks that are generated because a request has failed. Remediation tasks would request that a user intervene and attempt to resolve the problem that caused a request to fail.\n\n\n        Note: The above tasks are examples of work item types. They are not concrete types that will be\n        provided by the work item queue.\n\n  \nMany services can have requirements to generate work items. These work items may mean different things, but at their core, they:\n   \n* Are a call to action for a user.\n* Generate notifications when certain events occur.\n* Are completed by a user performing some action.\n* May require a form to be filled in.\n\nWhile each application in the suite could implement its own work item functionality, this would:\n\n* Lead to duplication throughout the suite.\n* Potentially lead to inconsistent implementations.\n* Make it difficult to present a user with a single view of all of their work items.\n\n### Services and Service Types\n\nThis specification refers to services and service types in the context of work item types and refers to another software component. These should NOT be interpreted to be services in the Service Catalog sense of the word.\n\n### UI Elements and Use Cases\n\nThe UI enables the following functionality.\n\n#### View a List of Work Items\n\nThe UI displays a list of work items that are:\n\n* Assigned to the current user\n* Delegated to the current user\n\nIt displays all types of work item in a single list, and supports filtering work items by:\n\n* Assigned versus delegated\n* Work item type\n* Active versus completed\n\nCancelled work items do not appear in this list.\n\n### View/Edit a Specific Work Item\n\nThe UI for viewing/editing a work item:\n\n* Displays the selected work item.\n* When using its linked form to generate the screen, populates the screen with the data from the work item's form data.\n* Displays work item metadata separately.\n* Displays the actions available to complete the current work item, as buttons, for example.\n* Allows a work item to be updated without performing an action.\n* Processes rules embedded in the layout.\n\n### Extension Point\n\nThe work item detail page can host an extension point into which integrators may render context specific data in support of the work item. Qualifying extensions must be of type `csp.places`and declare their `hostExtensionId` as being `cafe.inbox.detail`.\n\nFor example, the following snippet shows what the vTravel application might declare to embed a seating chart in the manual seat assignment task of a travel request.\n\n<pre>\n<source lang=\"javascript\">\"extensions\": [\n{\n\"pointId\": \"csp.places\",\n\"extensionId\": \"travel.inbox.seatingTask\",\n\"hostExtensionId\": \"cafe.inbox.detail\",\n\"description\": \"Seating chart for a travel destination\",\n...\n}\n]</source>\n</pre>\n\n\n### Work Item Portlet\n\nThe work item portlet shows a list of work items assigned or delegated to the current use. The number of work items shown is configurable (the default is 10 work items). Functionally, it is the same as the work item list.\n\n## Model\n\nThis section describes the model for the work item service.\n\n### Work Item Type\n\nNote the following points about a work item type:\n\n* It represents a specific type of work item.\n* It may define an icon. If specified, this can be used to differentiate between work items of different types.\n* It is owned by a specific application.\n* It is registered by the owning application once (for example, at install time or the first time that the application is run, like the approval service, which registers the \"Approval\" work item type. \n* Defines a number of actions that may be used to complete work items of this type:\n \n  * Actions are ordered. The ordering of actions affects how they are displayed in a UI.\n  * A default action may be specified. \n  * A work item type may specify no action.  In this case a generic \"complete\" action will be available.\n* The behavior of the generic action is the same as any other action:\n\n  * It causes the work item to be completed </li>\n  * It notifies the provider that the work item has been completed.\n\n### Work Item\n\nA work item:\n\n* Represents a single work item that is assigned to a recipient.\n* Is assigned to a single recipient.\n\nA recipient may be a user or a group.\n\nWhen assigned to a group:\n\n* The work item is not duplicated.\n* Any member of the group may update or complete the work item.\n\nOnce a single member of the group updates the work item, no other members may do so.\n\n#### Work Item States\n\nA work item can exist in the following states:\n\n* Active - The work item has been created and assigned but not yet completed. It may be updated, or reassigned.\n* Completed - The work item has been completed as a result of some action.\n* Canceled - The work item has been canceled.\n\n#### Work Item Data\n\nA work item presents two sets of data:\n\n* The work item's own properties. These include things such as: \n* Who it is assigned to\n* What type it is\n* What state it is in\n* The form data defined by the work item's form. This may be anything, for example:\n\n  * Approval related properties, for example, justification \n  * Request related properties, for example, what was requested, how much, number of CPUs, and so on.\n\nWhile the work item presents both of these sets of data, it does not own the form data.\nThe form is a resource provided by some client application and provides a view of the data\nin that client application. The client application remains the owner of that data.\nFor example, the approval service owns approval requests and does not relinquish this\nownership to the work item service. Therefore:\n\n* The work item does not persist a copy of the form data.\n* The work item service is not considered a source of truth for form data.\n* Persisting a copy in the work item service would introduce complicated synchronization concerns.\n\nTo implement form data:\n\n* All form data is served live from the application that created the work item.\n* Client applications must provide a REST endpoint that can serve this data.\n* Client applications may delegate a portion of this to another application, but this must be transparent to the work item queue; for examplle, the approval service would need to pass the request along to the catalog to retrieve Request data.\n\nAs a result:\n\n* It is prohibitive to retrieve live data when displaying many work items in a list.\nTherefore, work items  also provide descriptive properties that:\n\n  * Give a short description of the work item's purpose.\n  * Are provided by the client application when the work item is created.\n  * Are an intrinsic property of a work item and are hence easily retrieved for display in a list/grid view.\n\nIt is not  possible to show form data in work item lists.\n\n\n### Assignment\n\nA work item must be assigned to one or more assignees. This is enforced when the work item is created. An assignee may be:\n\n* A group\n* An individual\n\nAll assignees have access to the same work item:\n\n* A unique work item is not created for each assignee.\n* Any assignee may update the work item.\n* Any assignee may complete the work item.\n* Once complete, no other assignee may act on the work item.\n\nIf a use case demands that a work item is assigned to a group\nAND that each member of the group receive a unique work item, then it is the responsibility of the caller to expand the group and to create and assign one work item per group member.\n\n\nFor example, if an approval policy specified that all members of a group must approve an approval, the approval service would expand the group's membership and create one work item per member of the group.\n\nIt is also the responsibility of the client application to close/reject/abort any work items that may no longer be applicable. For example, if one user rejects an approval, the approval service is responsible for aborting the outstanding work items (if required).\n\n### Forms\n\nA work item must specify a form. The form is used to:\n\n<ul>\n<li>Display the work item in the web UI </li>\n<li>Generate notifications</li>\n</ul>\n\nA work item's form is:\n\n<ul>\n<li>Not persisted within the work item. Instead it is provided by the client application, which is then the form provider. </li>\n<li>Is not persisted by the work item service. The form is retrieved from an external location specified by the form provider. </li>\n<li>The form must follow the vRA Shared Data Driven Format standard.</li>\n</ul>\n\n### Work Item History\n\nEach work item has a history of events related to that work item. Events include:\n\n* Creation\n* Assignment\n* Reassignment\n* Notifications \n   * Sent \n   * Received \n* Work Item Updates \n* Work Item Completion \n* Work Item Cancellation\n\nThe work item history must capture the following:\n\n* The user who performed the action.\n* The action that was performed, for example, Completed, Updated, Reassigned. If the action is Completed, the completion action used to complete the work item, for example, Approved/Rejected.\n* The date and time that the action was performed.\n* A description of the action that was performed. This might be:\n\n   * User generated; for example, a user types in some reason why they performed an action.\n   * Machine generated;for example, another application generates a message. An example message might be something like \"Approval request cancelled because it was no longer required.\"\n\n### Action\n\n* Represents an action that a user may take to complete a work item.\n* Is defined by the work item type of the work item.\n* Has a unique ID that is provided by the publishing application.\n* The unique ID is passed back to the publishing application when the action occur.\n* It is expected that the publisher will recognise this id and may do something as a result of this action.\n\nFor example, when an approval work item is approved, the action id \"approved\" would be sent back to the approval service. The approval service can then update the approval as required.\n\n## Summary of Operations\n\n### Create Work Item Type\n\nCreate Work Item Type:\n\n<ul>\n<li> Is performed by provider applications with solution-level privileges; for example, the approval service creates the \"Approval\" work item type.</li>\n<li> The provider specifies the actions that this work item type will have.</li>\n<li> Providers should be trusted not to maliciously interfere with other applications' work item types.</li>\n<li> The work item service is designed to prevent accidental interference, for example, it raises an error if an application attempts to register a work item type with a duplicate id. Do not accept it as an update.</li>\n</ul>\n\n### Create Work Item\nCreate Work Item is initiated by a provider application, for example, by the approval service creating an approval.\n\n### Update Work Item\n\nA work item may be updated by:\n<ul>\n<li> One of its assignees.</li>\n<li> A delegate of one of its assignees.</li>\n</ul>\n\nIn addition:\n\n* The application that created the work item is notified of all updates.\n* Client applications must provide a REST service to receive these updates. This service will be passed:\n  * The updated form data for the work item as a property map.\n  * Useful metadata (for example, who updated the work item and when) in a fixed schema.\n\n### Reassign Work Item\n<ul>\n<li> A work item can be reassigned by any of its assignees, including delegates.</li>\n<li> Work items may be reassigned only to users or groups belonging to the same organization as the user performing the reassignment.</li>\n<li> The reassignment API should support reassigning to multiple principals, even if the UI does not.</li>\n<li> Reassignment replaces all of the current assignees with a new set of assignees.</li>\n</ul>\n\n### Taking Ownership of a Work Item\n\nTaking ownership of a work item:\n\n<ul>\n<li> Makes the current user the sole assignee of a work item.</li>\n<li> Is not required in order to complete or update a work item.</li>\n<li> Is a specific action that a user must take.</li>\n<li> Should be surfaced in the UI as a separate action/button.</li>\n<li> Should not happen automatically because a user has viewed or updated a work item.</li>\n<li> Should re-use the reassignment API, i.e,. take ownership is effectively a shortcut for \"reassign to me.\"</li>\n</ul>\n\n### Complete Work Item\n\nA work item may only be completed by:\n\n* One of its assignees.\n* A delegate of one of its assignees.\n*  A privileged, administrator user.\n</ul>\n\nNote also that:\n\n* A work item may be completed by any of the actions associated with its work item type.\n* Work items may be completed via an incoming notification (for example, email). This may be done by replying to an email sent by the work item queue.\n* The client application will be notified when a work item is completed.\n* The client application must provide a REST service to be notified of completion. The service will be passed:\n\n   * The form data of the work item that has been completed.</li>\n   * The action that completed the work item.</li>\n   * Useful work item metadata.\n\n### Cancel Work Item\n\nCanceling a work item prevents a work item from being updated or completed The work item enters the cancelled state.\n\nA work item:\n\n* May only be cancelled by a solution user, i.e., the application that created the work item.\n* Should be cancelled when it is no longer required.\n\nThis would be determined by the client application based on its rules.  For example, the approval service may cancel any outstanding \"Approval\" work items once one of the approvers has rejected the approval.\n\nWork items may not be cancelled by non-solution users.\n\nOnce aborted a work item may not be:\n\n* Reactivated\n* Updated\n\nNote also that:\n<ul>\n<li> A cancelled work item is not deleted.</li>\n<li> A work item's data may not be updated when aborting a work item.</li>\n<li> The client application will not be notified when a work item is cancelled.</li>\n<li> An audit trail message is written when a work item is cancelled. The cancellation API should support passing a reason why a work item has been cancelled which is also part of the audit trail.</li>\n</ul>\n\nIf an application wished to offer a \"Cancel\" action for a work item, it would need to:\n<ul>\n<li> Define such an action on the work item type.</li>\n<li> Respond to this action when the item is completed.</li>\n</ul>\n\n### User Roles\n\nNormal users can:\n<ul>\n<li> Only view work items assigned to them.</li>\n<li> Update or complete work items assigned to them.</li>\n<li> Configure delegation for their work items.</li>\n</ul>\n\nTenant administrators can:\n<ul>\n<li> Reassign work items to other users in their organization.</li>\n<li> Cancel work items assigned to users in their organization.</li>\n</ul>\n\n### Notifications\n<ul>\n<li> Notifications will be sent via the notification service.</li>\n<li> Notifications are generated automatically by the work item queue for lifecycle events.</li>\n</ul>\n\n#### Outbound Notifications\n\n<ul>\n<li> Outbound notifications are generated by lifecycle events of a work item. </li>\n<li> When sending outbound notifications, the work item service will pass a set of recipients to the notification service.</li>\n<li> Recipients may users and groups.</li>\n<li> The work item service delegates responsibility for handling group recipients to the notification service. </li>\n</ul>\nSpecifically, the work item service will not:\n<ul>\n<li> Determine whether a group recipient has an address associated with it.</li>\n<li> Expand the group to its members if it does not.</li>\n</ul>\n### Events\n<table border=\"1\">\n<tr>\n<th>Event Name</th>\n<th>Fired When</th>\n<th>Notification Sent To</th>\n</tr>\n<tr>\n<th valign=\"top\">assigned</th>\n<td valign=\"top\">Work item is assigned</td>\n<td valign=\"top\">Assignee of the work item:\n<ul>\n<li> If a group, this will be sent to every member of the group</li>\n<li> If an individual, it will be sent only to the user</li>\n</ul>\n</td>\n</tr>\n<tr>\n<th valign=\"top\">updated</th>\n<td valign=\"top\">Work item is updated</td>\n<td valign=\"top\"> If updated by the assignee, AND:\n<ul>\n<li> The assignee was an individual, no notification is sent</li>\n<li> The assignee was a group, notification is sent to the other group members</li>\n</ul>\nIf updated by someone other than the assignee:\n<ul>\n<li> Notification is sent to the assignee</li>\n</ul>\n</td>\n</tr>\n<tr>\n<th valign=\"top\">completed</th>\n<td valign=\"top\">The work item is completed</td>\n<td valign=\"top\">If completed by the assignee, AND:\n<ul>\n<li> The assignee was an individual, no notification is sent</li>\n<li> The assignee was a group, notification is sent to the other group members</li>\n</ul>\nIf completed by someone other than the assignee:\n<ul>\n<li> Notification is sent to the assignee</li>\n</ul>\n<td>\n</td>\n</tr>\n</table>\n\n### Inbound Notifications\n\nThe work item service supports completing work items via inbound notifications, for example, email:\n\n* The sender of an inbound notification must be the assignee of the work item or a member of the group when a work item is assigned to a group.\n* Inbound notifications cannot be used to:\n\n  * Reassign a work item\n  * Cancel a work item\n\n### Delegation\n\nDelegation allows specific people to complete a task on behalf of the assignee:\n<ul>\n<li> Delegating a work item grants the delegate access to the work item. </li>\n<li> Delegation does not assign the work item to the delegate.</li>\n<li> Delegation does not prevent the assignee from performing actions on the work item.</li>\n<li> A work item may have zero or more delegates.</li>\n<li> A delegate may not re-delegate the work item.</li>\n<li> Delegates receive all notifications that are sent to the work item's assignee.</li>\n<li> Delegation is configured within the work item queue. It is not configured by applications that create work items.</li>\n</ul>\n\n### Configuration\nThere may be multiple delegation configurations per user. Each configuration specifies:\n<ul>\n<li> The delegates defined as a set of principals.</li>\n<li> The work item type that this delegation configuration applies to. </li>\n<li> A start date on which the delegation will become active.</li>\n<li> To support an out of office scenario.</li>\n<li> An end date on which the delegation will cease.</li>\n</ul>",
    "version" : "7.4.0-SNAPSHOT",
    "title" : "Work-item Service API"
  },
  "basePath" : "/work-item-service",
  "tags" : [ {
    "name" : "work-item"
  }, {
    "name" : "work-item-action-icon"
  }, {
    "name" : "work-item-assignee"
  }, {
    "name" : "work-item-type"
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/api/assignees/user/delegates" : {
      "get" : {
        "tags" : [ "work-item-assignee" ],
        "summary" : "Retrieve the WorkItemAssignee, including delegates, for the 'current' user.",
        "description" : "Retrieve the WorkItemAssignee, including delegates, for the 'current' user.",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/WorkItemAssignee"
            }
          }
        },
        "deprecated" : true
      },
      "post" : {
        "tags" : [ "work-item-assignee" ],
        "summary" : "Creates or updates the specified WorkItemAssignee.",
        "description" : "Creates or updates the specified WorkItemAssignee.",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WorkItemAssignee"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        },
        "deprecated" : true
      },
      "put" : {
        "tags" : [ "work-item-assignee" ],
        "summary" : "Creates or updates the specified WorkItemAssignee.",
        "description" : "Creates or updates the specified WorkItemAssignee.",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WorkItemAssignee"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        },
        "deprecated" : true
      }
    },
    "/api/assignees/user/delegates/reset" : {
      "post" : {
        "tags" : [ "work-item-assignee" ],
        "summary" : "Delete the current WorkItemAssignee.",
        "description" : "Delete the current WorkItemAssignee.",
        "responses" : {
          "204" : {
            "description" : ""
          }
        },
        "deprecated" : true
      }
    },
    "/api/assignees/{principalId}/delegates" : {
      "get" : {
        "tags" : [ "work-item-assignee" ],
        "summary" : "Retrieve the list of delegates for the given principal/user/group.",
        "description" : "Retrieve the list of delegates for the given principal/user/group.",
        "parameters" : [ {
          "name" : "principalId",
          "in" : "path",
          "description" : "The principal identifier for the user or group.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/WorkItemAssignee"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "work-item-assignee" ],
        "summary" : "Update the WorkItemAssignee for the given principal",
        "description" : "Update the WorkItemAssignee for the given principal",
        "parameters" : [ {
          "name" : "principalId",
          "in" : "path",
          "description" : "The principal identifier for the user or group to be updated.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WorkItemAssignee"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      },
      "put" : {
        "tags" : [ "work-item-assignee" ],
        "summary" : "Update the WorkItemAssignee for the given principal",
        "description" : "Update the WorkItemAssignee for the given principal",
        "parameters" : [ {
          "name" : "principalId",
          "in" : "path",
          "description" : "The principal identifier for the user or group to be updated.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WorkItemAssignee"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/assignees/{principalId}/delegates/reset" : {
      "post" : {
        "tags" : [ "work-item-assignee" ],
        "summary" : "Remove the given principalId from the set of valid assignees for a workitem.",
        "description" : "Remove the given principalId from the set of valid assignees for a workitem.",
        "parameters" : [ {
          "name" : "principalId",
          "in" : "path",
          "description" : "The principal identifier for the user or group.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      }
    },
    "/api/icons" : {
      "get" : {
        "summary" : "Returns a page of the resources",
        "description" : "",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "work-item-action-icon" ],
        "summary" : "Creates a WorkItemActionIcon.",
        "description" : "Creates a WorkItemActionIcon.",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WorkItemActionIcon"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/WorkItemActionIcon"
            }
          },
          "201" : {
            "description" : ""
          }
        }
      }
    },
    "/api/icons/images/{id}" : {
      "get" : {
        "tags" : [ "work-item-action-icon" ],
        "summary" : "Get the image content of the specified WorkItemActionIcon.",
        "description" : "Get the image content of the specified WorkItemActionIcon.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The work item action icon id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "Get the image content of the specified WorkItemActionIcon.",
            "schema" : {
              "$ref" : "#/definitions/WorkItemActionIcon"
            }
          }
        }
      }
    },
    "/api/icons/{id}" : {
      "get" : {
        "summary" : "Returns the resource associated with the given id",
        "description" : "",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the resource",
          "required" : true,
          "type" : "object"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "work-item-action-icon" ],
        "summary" : "Updates the WorkItemActionIcon.",
        "description" : "Update the WorkItemActionIcon which corresponds to the given id.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The work item action icon id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WorkItemActionIcon"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : "Updated the WorkItemActionIcon successful",
            "schema" : {
              "$ref" : "#/definitions/WorkItemActionIcon"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "work-item-action-icon" ],
        "summary" : "Deletes the WorkItemActionIcon.",
        "description" : "Deletes the WorkItemActionIcon.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The work item action icon id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      }
    },
    "/api/workitems" : {
      "get" : {
        "tags" : [ "work-item" ],
        "summary" : "Retrieve a list of WorkItem.",
        "description" : "Retrieve a list of WorkItem.",
        "parameters" : [ {
          "name" : "userItemsOnly",
          "in" : "query",
          "description" : "if true, limits the results to those items which are visible to the logged in user.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageWorkItem"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "work-item" ],
        "summary" : "Create a new WorkItem for the given service.",
        "description" : "Create a new WorkItem for the given service.",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WorkItem"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/WorkItem"
            }
          },
          "201" : {
            "description" : ""
          }
        }
      },
      "put" : {
        "tags" : [ "work-item" ],
        "summary" : "Create a set of WorkItems",
        "description" : "Create a set of WorkItems",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/entities"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/workitems/notifications" : {
      "post" : {
        "tags" : [ "work-item" ],
        "summary" : "Completes the WorkItem if it is still active.",
        "description" : "Completes the WorkItem if it is still active.",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/notificationStatus"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/workitems/types" : {
      "get" : {
        "summary" : "Returns a page of the resources",
        "description" : "",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "work-item-type" ],
        "summary" : "Create a new WorkItemType for a given service provider.",
        "description" : "Create a new WorkItemType for a given service provider.",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WorkItemType"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/WorkItemType"
            }
          },
          "201" : {
            "description" : ""
          }
        }
      }
    },
    "/api/workitems/types/{id}" : {
      "get" : {
        "tags" : [ "work-item-type" ],
        "summary" : "Retrieve the details of an existing WorkItemType by id.",
        "description" : "Retrieve the details of an existing WorkItemType by id.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The workitem type id.",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/WorkItemType"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "work-item-type" ],
        "summary" : "Updates an existing WorkItemType by id.",
        "description" : "Updates an existing WorkItemType by id.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The workitem type id.",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WorkItemType"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "204" : {
            "description" : ""
          }
        }
      },
      "delete" : {
        "tags" : [ "work-item-type" ],
        "summary" : "Deletes an existing WorkItemType by id.",
        "description" : "Deletes an existing WorkItemType by id.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The workitem type id.",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      }
    },
    "/api/workitems/{id}" : {
      "get" : {
        "tags" : [ "work-item" ],
        "summary" : "Retrieve the details of the given WorkItem.",
        "description" : "Retrieve the details of the given WorkItem.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The workitem id.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/WorkItem"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "work-item" ],
        "summary" : "Update the WorkItem which corresponds to the given Id.",
        "description" : "Update the WorkItem which corresponds to the given Id. <ul> <li>A work item may be updated by:</li> <ul> <li>One of its assignees</li> <li>A delegate of one of its assignees</li> </ul> <li>The application that created the work item is notified of all updates.</li> <li>Client applications must provide a REST service to receive these updates. This service will be passed:</li> <ul> <li>The updated form data for the work item as a property map</li> <li>Useful metadata (e.g. who updated the work item and when) in a fixed schema</li> </ul> </ul>   <h3>Sequence Diagram</h3> <img src='../../workitem-service/api/docs/update-workitem.png'\\>",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The workitem id.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WorkItem"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      },
      "delete" : {
        "tags" : [ "work-item" ],
        "summary" : "Delete the WorkItem corresponding to the given id.",
        "description" : "Delete the WorkItem corresponding to the given id.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The workitem id.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      }
    },
    "/api/workitems/{id}/children" : {
      "get" : {
        "tags" : [ "work-item" ],
        "summary" : "Retrieve a list of WorkItem.",
        "description" : "Retrieve a list of WorkItem.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The workitem id.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageWorkItem"
            }
          }
        }
      }
    },
    "/api/workitems/{id}/form" : {
      "get" : {
        "tags" : [ "work-item" ],
        "summary" : "Retrieve the WorkItem Form from for the selected WorkItem from the corresponding Service Provider. ",
        "description" : "Retrieve the WorkItem Form from for the selected WorkItem from the corresponding Service Provider. If the current user has WRITE access to this form, The submission form is returned, otherwise the details form is returned.",
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/form"
            }
          }
        }
      }
    },
    "/api/workitems/{id}/form/update" : {
      "post" : {
        "tags" : [ "work-item" ],
        "summary" : "Retrieves the metadata of multiple dynamic elements in single call. It combines the retrieval of element's ElementState and the list of permissible values for each element.",
        "description" : "Retrieves the metadata of multiple dynamic elements in single call. It combines the retrieval of element's ElementState and the list of permissible values for each element.",
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/batchElementUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/formUpdateResponse"
            }
          }
        }
      }
    },
    "/api/workitems/{id}/form/{elementId}/values" : {
      "post" : {
        "tags" : [ "work-item" ],
        "summary" : "Retrieve a set of form data for the specified workItem and formElement. ",
        "description" : "Retrieve a set of form data for the specified workItem and formElement.",
        "parameters" : [ {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/elementValuesRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/elementValues"
            }
          }
        }
      }
    },
    "/api/workitems/{workItemId}/actions/cancel" : {
      "post" : {
        "tags" : [ "work-item" ],
        "summary" : "Cancel the specified WorkItem.",
        "description" : "Cancel the specified WorkItem. <ul> <li>Prevents a work item from being updated or completed The work item enters the 'ancelled'' state</li> <li>A work item may only be cancelled by a solution user. I.e. the application that created the work item.</li> <li>A work item would be cancelled when it is no longer required</li> <ul> <li>This would be determined by the client application based on its rules</li> <li>For example: the approval service may cancel any outstanding 'Approval' work items once one of the approvers has rejected the approval.</li> </ul> <li>Work items may not be cancelled by non-solution users.</li> <li>Once aborted a work item may not be:</li> <ul> <li>Reactivated</li> <li>Updated</li> </ul> <li>A cancelled work item is not deleted</li> <li>A work item's data may not be updated when aborting a work item</li> <li>The client application will not be notified when a work item is cancelled.</li> <li>An audit trail message is written when a work item is cancelled. The cancellation API should support passing a reason why a work item has been cancelled which is also part of the audit trail.</li> </ul>  If an application wished to offer a 'Cancel' action for a work item, it would need to: <ul> <li>Define such an action on the work item type</li> <li>Respond to this action when the item is completed</li> </ul>",
        "parameters" : [ {
          "name" : "workItemId",
          "in" : "path",
          "description" : "The workitem id.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WorkItemActionComplete"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/workitems/{workItemId}/actions/{actionId}" : {
      "post" : {
        "tags" : [ "work-item" ],
        "summary" : "Complete a WorkItem.",
        "description" : "Complete a WorkItem. <ul>  <li>A work item may only be completed by:</li>  <ul>  <li>One of its assignees</li>  <li>A delegate of one of its assignees</li>  <li>A privileged, administrator user</li>  </ul>  <li>A work item may be completed by any of the actions associated with its work item type</li>  <li>Work items may be completed via an incoming notification (e.g. email) This may be done by  replying to an email sent by the work item queue.</li> <li>The client application will be  notified when a work item is completed.</li> <li>The client application must provide a REST  service to be notified of completion. The service will be passed:</li>  <ul>  <li>The form data of the work item that has been completed</li>  <li>The action that completed the work item</li>  <li>Useful work item metadata</li>  </ul>  </ul>   <h3>Sequence Diagram</h3> <img src='../../workitem-service/api/docs/complete-workitem.png'\\>",
        "parameters" : [ {
          "name" : "workItemId",
          "in" : "path",
          "description" : "The workitem id.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "actionId",
          "in" : "path",
          "description" : "The action id.",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WorkItemActionComplete"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    }
  },
  "definitions" : {
    "AndClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "subClauses" : {
            "type" : "array",
            "xml" : {
              "name" : "clause"
            },
            "items" : {
              "$ref" : "#/definitions/Clause"
            }
          }
        }
      } ]
    },
    "BooleanLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "description" : "Wraps a boolean value.",
        "xml" : {
          "name" : "booleanLiteral"
        }
      } ]
    },
    "CallbackEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object"
      } ]
    },
    "Clause" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "CoalesceEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "arguments" : {
            "type" : "array",
            "xml" : {
              "name" : "argument",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "Column" : {
      "type" : "object",
      "required" : [ "dataType" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "label" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "orderIndex" : {
          "type" : "integer",
          "format" : "int32"
        },
        "dataType" : {
          "$ref" : "#/definitions/DataType"
        },
        "displayAdvice" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "TEXTBOX", "HYPERLINK", "EMAIL", "TEXTAREA", "DATE_TIME_PICKER", "CHECKBOX", "YES_NO", "CHECKBOX_GROUP", "DUAL_LIST", "RADIO_GROUP", "DROPDOWN", "LIST", "SEARCHER", "TREE", "FORM", "IMAGE", "SLIDER", "DATA_TABLE", "VALUE_PICKER", "CONFIRM_PASSWORD" ]
        },
        "permissibleValues" : {
          "$ref" : "#/definitions/PermissibleValueList"
        },
        "state" : {
          "$ref" : "#/definitions/ElementState"
        },
        "filterable" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "sortable" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "isMultiValued" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        }
      }
    },
    "ComplexDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object",
        "properties" : {
          "schema" : {
            "$ref" : "#/definitions/Schema"
          }
        }
      } ]
    },
    "ComplexEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "componentTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "typeFilter" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "values" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "ConditionalEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "cases" : {
            "type" : "array",
            "xml" : {
              "name" : "case"
            },
            "items" : {
              "$ref" : "#/definitions/ConditionalEvaluatorCase"
            }
          },
          "defaulValue" : {
            "$ref" : "#/definitions/Evaluator"
          }
        }
      } ]
    },
    "ConditionalEvaluatorCase" : {
      "type" : "object",
      "properties" : {
        "condition" : {
          "$ref" : "#/definitions/Clause"
        },
        "value" : {
          "$ref" : "#/definitions/Evaluator"
        }
      }
    },
    "ConstantClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/booleanLiteral"
          }
        }
      } ]
    },
    "ConstantValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/literal"
          }
        }
      } ]
    },
    "Constraint" : {
      "type" : "object",
      "required" : [ "value" ],
      "discriminator" : "type",
      "properties" : {
        "value" : {
          "$ref" : "#/definitions/Evaluator"
        }
      }
    },
    "ContainsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "ContextPermissibleValueList" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PermissibleValueList"
      }, {
        "type" : "object"
      } ]
    },
    "CriteriaOperator" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "CustomPropertyDefinitionMetadata" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object",
        "required" : [ "field" ],
        "properties" : {
          "field" : {
            "$ref" : "#/definitions/Field"
          }
        }
      } ]
    },
    "CustomValidationConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "DataType" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "typeId" : {
          "type" : "string",
          "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
        }
      }
    },
    "DefaultValueBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "DisplayTextBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "DynamicLayoutReference" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutReference"
      }, {
        "type" : "object",
        "properties" : {
          "dependencies" : {
            "type" : "array",
            "xml" : {
              "name" : "dependency",
              "wrapped" : true
            },
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "DynamicPermissibleValueList" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PermissibleValueList"
      }, {
        "type" : "object",
        "properties" : {
          "context" : {
            "$ref" : "#/definitions/DynamicValueContext"
          },
          "dependencies" : {
            "type" : "array",
            "xml" : {
              "name" : "dependency",
              "wrapped" : true
            },
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "DynamicValueContext" : {
      "type" : "object",
      "required" : [ "parameterMappings" ],
      "properties" : {
        "providerEntityId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "parameterMappings" : {
          "$ref" : "#/definitions/ParameterMappingCollection"
        }
      }
    },
    "EditableBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "ElementState" : {
      "type" : "object",
      "properties" : {
        "dependencies" : {
          "type" : "array",
          "xml" : {
            "name" : "dependency",
            "wrapped" : true
          },
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "facets" : {
          "type" : "array",
          "xml" : {
            "name" : "facet",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/Constraint"
          }
        }
      }
    },
    "ElementValuesPagingInfo" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "EncryptedBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "EndsWithOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "EntityReferenceDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object"
      } ]
    },
    "EqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "Evaluator" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "Expression" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "operator" : {
            "$ref" : "#/definitions/CriteriaOperator"
          },
          "leftOperand" : {
            "$ref" : "#/definitions/Evaluator"
          },
          "rightOperand" : {
            "$ref" : "#/definitions/Evaluator"
          }
        }
      } ]
    },
    "ExtensionForm" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FormReference"
      }, {
        "type" : "object",
        "properties" : {
          "extensionId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "extensionPointId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        }
      } ]
    },
    "ExtensionRendererContext" : {
      "type" : "object",
      "properties" : {
        "extensionId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "parameterMappings" : {
          "$ref" : "#/definitions/ParameterMappingCollection"
        }
      }
    },
    "ExternalFormReference" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FormReference"
      }, {
        "type" : "object",
        "properties" : {
          "formId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        }
      } ]
    },
    "ExternalValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "required" : [ "dynamicValueProviderInfo" ],
        "properties" : {
          "dynamicValueProviderInfo" : {
            "$ref" : "#/definitions/DynamicValueContext"
          }
        }
      } ]
    },
    "FacetValueMap" : {
      "type" : "object",
      "properties" : {
        "facets" : {
          "type" : "array",
          "xml" : {
            "name" : "facet",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/FacetValueMapEntry"
          }
        }
      }
    },
    "FacetValueMapEntry" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "value" : {
          "$ref" : "#/definitions/literal"
        }
      }
    },
    "Field" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "label" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "dataType" : {
          "$ref" : "#/definitions/DataType"
        },
        "displayAdvice" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "TEXTBOX", "HYPERLINK", "EMAIL", "TEXTAREA", "DATE_TIME_PICKER", "CHECKBOX", "YES_NO", "CHECKBOX_GROUP", "DUAL_LIST", "RADIO_GROUP", "DROPDOWN", "LIST", "SEARCHER", "TREE", "FORM", "IMAGE", "SLIDER", "DATA_TABLE", "VALUE_PICKER", "CONFIRM_PASSWORD" ]
        },
        "orderIndex" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        },
        "permissibleValues" : {
          "$ref" : "#/definitions/PermissibleValueList"
        },
        "state" : {
          "$ref" : "#/definitions/ElementState"
        },
        "isMultiValued" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "columns" : {
          "type" : "array",
          "xml" : {
            "name" : "column",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/Field"
          }
        }
      }
    },
    "FieldReference" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "path" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        }
      } ]
    },
    "FixedValueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "FormReference" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "GreaterThanOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "GreaterThanOrEqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "IaasPropertyNameBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "IncrementBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "InternalConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "IsDefinedOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "LayoutCell" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "LayoutExtension" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutCell"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "extensionId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "extensionPointId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "fieldPrefix" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          }
        }
      } ]
    },
    "LayoutField" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutFlowElement"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "label" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "orderIndex" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dataType" : {
            "$ref" : "#/definitions/DataType"
          },
          "displayAdvice" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "TEXTBOX", "HYPERLINK", "EMAIL", "TEXTAREA", "DATE_TIME_PICKER", "CHECKBOX", "YES_NO", "CHECKBOX_GROUP", "DUAL_LIST", "RADIO_GROUP", "DROPDOWN", "LIST", "SEARCHER", "TREE", "FORM", "IMAGE", "SLIDER", "DATA_TABLE", "VALUE_PICKER", "CONFIRM_PASSWORD" ]
          },
          "permissibleValues" : {
            "$ref" : "#/definitions/PermissibleValueList"
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          },
          "labelSize" : {
            "type" : "integer",
            "format" : "int32",
            "xml" : {
              "attribute" : true
            }
          },
          "detailLayout" : {
            "$ref" : "#/definitions/LayoutReference"
          },
          "extensionRendererContext" : {
            "$ref" : "#/definitions/ExtensionRendererContext"
          },
          "isMultiValued" : {
            "type" : "boolean",
            "xml" : {
              "attribute" : true
            },
            "default" : false
          },
          "columns" : {
            "type" : "array",
            "xml" : {
              "name" : "column",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/LayoutField"
            }
          }
        }
      } ]
    },
    "LayoutFlow" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutCell"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          },
          "parts" : {
            "type" : "array",
            "xml" : {
              "name" : "part",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/LayoutFlowElement"
            }
          }
        }
      } ]
    },
    "LayoutFlowElement" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutCell"
      }, {
        "type" : "object"
      } ]
    },
    "LayoutPage" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "label" : {
          "type" : "string"
        },
        "state" : {
          "$ref" : "#/definitions/ElementState"
        },
        "sections" : {
          "type" : "array",
          "xml" : {
            "name" : "section",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/LayoutSection"
          }
        }
      }
    },
    "LayoutPlaceholderCell" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutCell"
      }, {
        "type" : "object"
      } ]
    },
    "LayoutReference" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "LayoutRow" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "xml" : {
            "name" : "item",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/LayoutCell"
          }
        }
      }
    },
    "LayoutSection" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "label" : {
          "type" : "string"
        },
        "state" : {
          "$ref" : "#/definitions/ElementState"
        },
        "rows" : {
          "type" : "array",
          "xml" : {
            "name" : "row",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/LayoutRow"
          }
        }
      }
    },
    "LayoutText" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutFlowElement"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "value" : {
            "type" : "string"
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          }
        }
      } ]
    },
    "LessThanOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "LessThanOrEqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "Link" : {
      "type" : "object",
      "properties" : {
        "rel" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "href" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "LiteralMapEntry" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "value" : {
          "$ref" : "#/definitions/literal"
        }
      }
    },
    "MandatoryConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaxCardinalityConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaxLengthConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaxValueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaximumValueEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "arguments" : {
            "type" : "array",
            "xml" : {
              "name" : "argument",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "MinCardinalityConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MinLengthConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MinValueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MinimumValueEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "arguments" : {
            "type" : "array",
            "xml" : {
              "name" : "argument",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "MonetaryValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "currencyCode" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The ISO 4217 code used to identify the currency (if any) associated with this value."
          }
        },
        "description" : "Base type for representing monetary values, encapsulating both some kind of quantity and a currency.",
        "xml" : {
          "name" : "literal"
        }
      } ]
    },
    "MultipleEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "required" : [ "items" ],
        "properties" : {
          "elementTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "NotClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "subClause" : {
            "$ref" : "#/definitions/Clause"
          }
        }
      } ]
    },
    "NotEqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "NullDisplayTextBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "ObjectDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object",
        "properties" : {
          "componentTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "typeFilter" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "label" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        }
      } ]
    },
    "OrClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "subClauses" : {
            "type" : "array",
            "xml" : {
              "name" : "clause"
            },
            "items" : {
              "$ref" : "#/definitions/Clause"
            }
          }
        }
      } ]
    },
    "PageWorkItem" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/WorkItem"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "ParameterMapping" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "value" : {
          "$ref" : "#/definitions/Evaluator"
        }
      }
    },
    "ParameterMappingCollection" : {
      "type" : "object",
      "properties" : {
        "params" : {
          "type" : "array",
          "xml" : {
            "name" : "param",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/ParameterMapping"
          }
        }
      }
    },
    "PermissibleValueList" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "customAllowed" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        }
      }
    },
    "PrimitiveDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object",
        "properties" : {
          "typeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
          }
        }
      } ]
    },
    "ReadOnlyConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "RefreshOnChangeBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "RegexpConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object",
        "properties" : {
          "errorMessage" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ResetValueBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "Schema" : {
      "type" : "object",
      "properties" : {
        "fields" : {
          "type" : "array",
          "xml" : {
            "name" : "field"
          },
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Field"
          }
        }
      }
    },
    "SkipExportBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "Sort" : {
      "type" : "object"
    },
    "StartsWithOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "StaticForm" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FormReference"
      }, {
        "type" : "object",
        "required" : [ "layout" ],
        "properties" : {
          "layout" : {
            "$ref" : "#/definitions/layout"
          }
        }
      } ]
    },
    "StaticLayout" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutReference"
      }, {
        "type" : "object",
        "required" : [ "layout" ],
        "properties" : {
          "layout" : {
            "$ref" : "#/definitions/layout"
          }
        }
      } ]
    },
    "StaticPermissibleValueList" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PermissibleValueList"
      }, {
        "type" : "object",
        "properties" : {
          "values" : {
            "type" : "array",
            "xml" : {
              "name" : "value"
            },
            "items" : {
              "$ref" : "#/definitions/value"
            }
          }
        }
      } ]
    },
    "SubsetOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "SupersetOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "TableView" : {
      "type" : "object",
      "properties" : {
        "columns" : {
          "type" : "array",
          "xml" : {
            "name" : "column",
            "wrapped" : true
          },
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Column"
          }
        },
        "defaultSequence" : {
          "type" : "array",
          "xml" : {
            "name" : "column",
            "wrapped" : true
          },
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "TimeSpan" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "description" : "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days.",
        "xml" : {
          "name" : "timeSpan"
        }
      } ]
    },
    "UniqueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "UnspecifiedEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object"
      } ]
    },
    "VisibilityConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "WithinOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "WorkItem" : {
      "type" : "object",
      "required" : [ "assignees", "callbackEntityId", "serviceId", "tenantId", "workItemRequest", "workItemType" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "version" : {
          "type" : "integer",
          "format" : "int64"
        },
        "workItemNumber" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        },
        "assignees" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/WorkItemPrincipal"
          }
        },
        "subTenantId" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "tenantId" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "callbackEntityId" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "workItemType" : {
          "$ref" : "#/definitions/WorkItemType"
        },
        "completedDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "assignedDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "createdDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "assignedOrCompletedDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "formUrl" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2083
        },
        "serviceId" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "workItemRequest" : {
          "$ref" : "#/definitions/WorkItemRequest"
        },
        "status" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "completedBy" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "availableActions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/WorkItemAction"
          }
        }
      }
    },
    "WorkItemAction" : {
      "type" : "object",
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "stateName" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "icon" : {
          "$ref" : "#/definitions/WorkItemActionIcon"
        },
        "stateNameId" : {
          "type" : "string"
        }
      }
    },
    "WorkItemActionComplete" : {
      "type" : "object",
      "properties" : {
        "workItemId" : {
          "type" : "string",
          "format" : "uuid",
          "xml" : {
            "attribute" : true
          }
        },
        "workItemActionId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 255
        },
        "formData" : {
          "$ref" : "#/definitions/literalMap"
        }
      }
    },
    "WorkItemActionIcon" : {
      "type" : "object",
      "required" : [ "image" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "contentType" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "image" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "byte"
          }
        }
      }
    },
    "WorkItemAssignee" : {
      "type" : "object",
      "required" : [ "delegates" ],
      "properties" : {
        "delegates" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/WorkItemPrincipal"
          }
        }
      }
    },
    "WorkItemForms" : {
      "type" : "object",
      "properties" : {
        "workItemDetails" : {
          "$ref" : "#/definitions/FormReference"
        },
        "workItemSubmission" : {
          "$ref" : "#/definitions/FormReference"
        },
        "workItemNotification" : {
          "$ref" : "#/definitions/FormReference"
        }
      }
    },
    "WorkItemPrincipal" : {
      "type" : "object",
      "required" : [ "principalId", "principalType" ],
      "properties" : {
        "principalId" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "principalType" : {
          "type" : "string",
          "enum" : [ "USER", "GROUP" ]
        },
        "displayName" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        }
      }
    },
    "WorkItemRequest" : {
      "type" : "object",
      "required" : [ "itemDescription", "itemId", "itemName", "itemRequestor" ],
      "properties" : {
        "itemId" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "itemName" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1023
        },
        "itemDescription" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2000
        },
        "itemRequestor" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "itemCost" : {
          "type" : "number",
          "format" : "double"
        },
        "itemData" : {
          "$ref" : "#/definitions/literalMap"
        }
      }
    },
    "WorkItemType" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "pluralizedName" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2000
        },
        "serviceTypeId" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "actions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/WorkItemAction"
          },
          "maxItems" : 5,
          "minItems" : 0
        },
        "completeByEmail" : {
          "type" : "boolean",
          "default" : false
        },
        "commentsField" : {
          "type" : "string"
        },
        "listView" : {
          "$ref" : "#/definitions/TableView"
        },
        "version" : {
          "type" : "integer",
          "format" : "int64"
        },
        "forms" : {
          "$ref" : "#/definitions/WorkItemForms"
        }
      }
    },
    "WrapperClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/Evaluator"
          }
        }
      } ]
    },
    "batchElementUpdateRequest" : {
      "type" : "object",
      "required" : [ "formValues" ],
      "properties" : {
        "formValues" : {
          "$ref" : "#/definitions/literalMap"
        },
        "trigger" : {
          "type" : "string"
        },
        "triggeredDetailsLayout" : {
          "$ref" : "#/definitions/layout"
        },
        "affectedElements" : {
          "type" : "array",
          "xml" : {
            "wrapped" : true
          },
          "items" : {
            "type" : "string"
          }
        }
      },
      "xml" : {
        "name" : "batchElementUpdateRequest"
      }
    },
    "booleanLiteral" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "value" : {
          "type" : "boolean",
          "description" : "The boolean value.",
          "default" : false
        }
      },
      "description" : "Wraps a boolean value.",
      "xml" : {
        "name" : "booleanLiteral"
      }
    },
    "complexLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "componentTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's component type."
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's component."
          },
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's class."
          },
          "typeFilter" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The type filter for this literal."
          },
          "values" : {
            "description" : "Map of values, keyed by the field ids of some complex type.",
            "$ref" : "#/definitions/literalMap"
          }
        },
        "description" : "A complex value composed of multiple values keyed by the field ids of some complex type.",
        "xml" : {
          "name" : "complexLiteral"
        }
      } ]
    },
    "dateTimeLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date."
          }
        },
        "description" : "Wraps a Date & Time value. This is a wrapper for the Java {@link Date} class.",
        "xml" : {
          "name" : "dateTimeLiteral"
        }
      } ]
    },
    "decimalLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "number",
            "format" : "double",
            "description" : "The decimal value."
          }
        },
        "description" : "Wraps a decimal value.",
        "xml" : {
          "name" : "decimalLiteral"
        }
      } ]
    },
    "elementValues" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "array",
          "xml" : {
            "name" : "value",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/value"
          }
        }
      },
      "xml" : {
        "name" : "elementValues"
      }
    },
    "elementValuesRequest" : {
      "type" : "object",
      "properties" : {
        "text" : {
          "type" : "string"
        },
        "tenantId" : {
          "type" : "string"
        },
        "userId" : {
          "type" : "string"
        },
        "dependencyValues" : {
          "$ref" : "#/definitions/literalMap"
        },
        "pagingInfo" : {
          "$ref" : "#/definitions/ElementValuesPagingInfo"
        },
        "associateValue" : {
          "$ref" : "#/definitions/literal"
        },
        "headers" : {
          "$ref" : "#/definitions/literalMap"
        }
      },
      "xml" : {
        "name" : "elementValuesRequest"
      }
    },
    "entities" : {
      "type" : "object",
      "properties" : {
        "links" : {
          "type" : "array",
          "xml" : {
            "name" : "links",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "content" : {
          "type" : "array",
          "xml" : {
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/WorkItem"
          }
        }
      },
      "xml" : {
        "name" : "entities"
      }
    },
    "entityRef" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier of the type or category to which the referenced entity belongs."
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The unique identifier of the referenced entity, encoded as a string"
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The durable identifier of a component registered in the suite component registry that owns and manages the referenced entity. This can be omitted if this component can be derived from the context within which this entity reference occurs. It must be specified, if no such context exists or if the component differs from that defined by the context."
          },
          "label" : {
            "type" : "string"
          }
        },
        "description" : "Represents a reference to an entity defined somewhere in the suite.",
        "xml" : {
          "name" : "entityRef"
        }
      } ]
    },
    "entityRefEx" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "href" : {
            "type" : "string",
            "description" : "the Href"
          }
        },
        "description" : "Represents a reference to an entity by uri",
        "xml" : {
          "name" : "entityRefEx"
        }
      } ]
    },
    "form" : {
      "type" : "object",
      "properties" : {
        "layout" : {
          "$ref" : "#/definitions/layout"
        },
        "values" : {
          "$ref" : "#/definitions/literalMap"
        },
        "fieldPrefixes" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "xml" : {
        "name" : "form"
      }
    },
    "formUpdateResponse" : {
      "type" : "object",
      "properties" : {
        "elementUpdates" : {
          "type" : "array",
          "xml" : {
            "name" : "elementUpdate",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/updateElementEntry"
          }
        }
      },
      "xml" : {
        "name" : "formUpdateResponse"
      }
    },
    "integerLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The integer value."
          }
        },
        "description" : "Wraps a signed 64-bit integer value.",
        "xml" : {
          "name" : "integerLiteral"
        }
      } ]
    },
    "layout" : {
      "type" : "object",
      "properties" : {
        "pages" : {
          "type" : "array",
          "xml" : {
            "name" : "page",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/LayoutPage"
          }
        }
      },
      "xml" : {
        "name" : "layout"
      }
    },
    "literal" : {
      "type" : "object",
      "discriminator" : "type",
      "description" : "Wraps a value such that values of different types can be treated generically.",
      "xml" : {
        "name" : "literal"
      }
    },
    "literalMap" : {
      "type" : "object",
      "properties" : {
        "entries" : {
          "type" : "array",
          "xml" : {
            "name" : "entry"
          },
          "items" : {
            "$ref" : "#/definitions/LiteralMapEntry"
          }
        }
      },
      "description" : "Equivalent of java.util.Map",
      "xml" : {
        "name" : "literalMap"
      }
    },
    "money" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "format" : "double",
            "description" : "The amount associated with this value (with no specific currency)."
          }
        },
        "description" : "Represents a single, precise monetary value.",
        "xml" : {
          "name" : "money"
        }
      } ]
    },
    "moneyRange" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "minValue" : {
            "type" : "number",
            "format" : "double",
            "description" : "The lower limit of the range."
          },
          "maxValue" : {
            "type" : "number",
            "format" : "double",
            "description" : "The upper limit of the range."
          }
        },
        "description" : "Represents a range of money values, between some defined minimums and maximums.",
        "xml" : {
          "name" : "moneyRange"
        }
      } ]
    },
    "moneyRate" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "cost" : {
            "description" : "The cost (including optional currency code).",
            "$ref" : "#/definitions/literal"
          }
        },
        "description" : "A base type for literals representing a rate of some monetary value over a specified basis. E.g. $5 / hour; $1-2 / GB.",
        "xml" : {
          "name" : "moneyRate"
        }
      } ]
    },
    "moneyTimeRate" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "basis" : {
            "description" : "The span of time to calculate the rate of money for.",
            "$ref" : "#/definitions/timeSpan"
          }
        },
        "description" : "Represents a rate of money over time.",
        "xml" : {
          "name" : "moneyTimeRate"
        }
      } ]
    },
    "multipleLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "elementTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The data type of the items in the list.",
            "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
          },
          "items" : {
            "type" : "array",
            "xml" : {
              "name" : "item"
            },
            "description" : "The list of specified values. NOTE: All values must be of the same data type.",
            "items" : {
              "$ref" : "#/definitions/literal"
            }
          }
        },
        "description" : "A literal which represents multiple values. All of these component values must be of the same data type.",
        "xml" : {
          "name" : "multipleLiteral"
        }
      } ]
    },
    "notificationStatus" : {
      "type" : "object",
      "properties" : {
        "action" : {
          "type" : "string"
        },
        "comment" : {
          "type" : "string"
        },
        "entityId" : {
          "type" : "string"
        },
        "notificationId" : {
          "type" : "string"
        },
        "userId" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "notificationStatus"
      }
    },
    "secureString" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "The string value."
          }
        },
        "description" : "Wraps a secured string value, such as a password.",
        "xml" : {
          "name" : "secureString"
        }
      } ]
    },
    "stringLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "The string value."
          }
        },
        "description" : "Wraps a String value.",
        "xml" : {
          "name" : "stringLiteral"
        }
      } ]
    },
    "timeSpan" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "unit" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "description" : "The unit of measure for the time span. e.g: days.",
          "enum" : [ "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS", "WEEKS", "MONTHS", "YEARS" ]
        },
        "amount" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          },
          "description" : "The amount for the time span."
        }
      },
      "description" : "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days.",
      "xml" : {
        "name" : "timeSpan"
      }
    },
    "updateElementEntry" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "detailLayout" : {
          "$ref" : "#/definitions/layout"
        },
        "facetValues" : {
          "$ref" : "#/definitions/FacetValueMap"
        },
        "extensionRendererContext" : {
          "$ref" : "#/definitions/literalMap"
        },
        "permissibleValues" : {
          "type" : "array",
          "xml" : {
            "name" : "value",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/value"
          }
        },
        "errors" : {
          "type" : "array",
          "xml" : {
            "name" : "error",
            "wrapped" : true
          },
          "items" : {
            "type" : "string"
          }
        }
      },
      "xml" : {
        "name" : "updateElementEntry"
      }
    },
    "value" : {
      "type" : "object",
      "properties" : {
        "underlyingValue" : {
          "$ref" : "#/definitions/literal"
        },
        "label" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "value"
      }
    }
  }
}