{
  "swagger" : "2.0",
  "info" : {
    "description" : "## What is Provisioning Service API?\n\nUser requests provisioning of an application, which is described through a high level definition - a blueprint, and Provisioning Service reduces it to a model of resources,\napplication code to execute, requirements and relationships. The Provisioning Service provides features for defining business policy based, intelligent placement of VMs, Containers, Networks, etc. across the clusters. Intelligent placement is based on cross-cloud discovered Tags, resource allocation, isolation requirements and availability requirements (for example Business Groups)\n\nThe Service provides the following functionality:\n* Provision resources, using state machine tasks to represent the workflow and a set of adapters for a given environment that implement various stages of the plan\n* Track realized resources (compute, storage or network)/ Compute host service instance track compute resources such as containers, VMs, or physical machines. Active tracking is fitting of resource needs to application requirements. The goal is for thousands of compute states representing VMs, bare metal or containers to be tracked by just a few replicated Provisioning service nodes.\n* Perform resource management and apply placement strategies\n\n## Main Use Cases\n\n* User configures environments, business policy requirements for future provisioning of requested applications\n* User requests an application in form of a blueprint, then the Provisioning service performs cloud agnostic placement and provisioning\n* User performs Day2 operations on provisioned resources\n* Other components use Provisioning service to obtain information for reporting, dashboards, costing, operational statistics, health monitoring\n\n## Provisioning Service Stages\nIn order to make most use of the Provisioning Service capabilities, its important to understand the different stages of the **provisioning** or **Day2 (lifecycle management)** operations.\nThis will lead to a better understanding of the key concepts, and then of the REST API operations provided.\n\n**Provision Request Broker** service handles all requests - provisioning or Day2 - and dispatches them to the appropriate Task Service.\nProvisioning Service API provides possibility to list all request brokers, create, update or delete a request broker. A dedicated Task Service handles the request. Multiple Task Services exist for performing different types of operations, and also for handling different Resource Types.\n\nAt the end of each operation - provisioning or Day2, operates one Adapter for the particular EP. End point adapters translate Provisioning resources' models to End Point specific objects, and call the cloud's API. For simplicity, the adapters component is not presented on the diagrams.\n\n### Provisioning\n\nProvisioning can be divided on three main stages:\n* **Placement selection** - at the end of this stage, an Elastic Placement Zone is chosen.\n* **Allocation** of the provisioning resources - having as an input the defined placement target.\n* **Provisioning** task dispatch to the appropriate adapter, and the adapter to do the actual provisioning on the Cloud.\n\n![](/container-service/api/docs/provisioning_case.png)\n\n### Day2 Operations\n\n* For each chosen Day2 operation, there is a dedicated Task Service. The particular Task Service is called to perform some preparation for executing the task.\n* Task Service calls the adapter to do the actual task execution via the end point API.\n\n![](/container-service/api/docs/day2_case.png)\n\n## Key Concepts\n\n### Configuration concepts\n\nIn order to perform cloud-agnostic provisioning, an appropriate configuration is required. The Administrator configures Placement policies, defining Projects, Tenants, Quotas, Budgets, Resource reservations. He/She also needs to add and configure the End Points, on which the provisioning should be performed. The configuration requires a mapping between the \ninstance types (small, medium, ...) and the actual types on the particular cloud, images types selection, etc. \nBelow are listed more details about each configuration that should be made.\n\n** Placement Policies **\nFor the placement algorithms, the Administrator configures:\n* Business Group for which it will be used (Blueprints from this Business Group only will be used for provisioning in this Placement).\n\n* Elastic Placement Zone\nElastic Placement Zone is concept to dynamically expand or shrink available capacity, by using infrastructure defined Tags, local tags and custom criteria(policy). Each compute can contribute capacity to more than one EPZ and each EPZ can be used in more than one Placement policy, this way allowing for over committing available resources.\n\nOptionally EPZ can be configured for auto-scaling, e.g. if 80% of EPZ capacity is allocated, then automatically provision more Computes which match EPZ criteria and are automatically attached to that EPZ.\n\nWhen configuring a Placement Zone, the Administrator specifies:\n\t- Tagging references to be used to associate Resources with this Placement.\n\t- Placement policy, defining how to choose on which host to place the provisioned resources.\n\n\t\t`RANDOM` - Resources are placed on random Hosts; \n\t\t`BINPACK` - Place on Host with highest memory usage;\n\t\t`SPREAD` - Place on Host with smallest number of resources;\n\nBased on the placement policies, the most suitable Elastic Placement Zone is defined.\nIn order to perform cloud-agnostic provisioning, IaaS specifics should be separated in a dedicated configuration. Deployment profiles\nare used for this purpose.\n\n** Deployment Profiles **\nProfiles concept is encapsulating specific IaaS configurations, policies and  profiles. Previously each vRA blueprint specified IaaS and IaaS agnostic configuration in a single place. As more BP are managed by the VRA, it becomes inconvenient to keep shared IaaS specific configurations in sync in all blueprint. In addition, multiple blueprints typically want to use the same image, network subnet, instance sizes and so on.\n\nProfiles can be configured using YAML files that defines IaaS specific configuration used by the Provisioning service. It allows us to separate IaaS specific configuration into its own file and keep blueprints IaaS agnostic and apply a lazy binding on those blueprints.\n\n![](/container-service/api/docs/deployment_profiles.png)\n\nOut of the box there are 3 types of profiles:\n* Compute Profile - compute(virtual machine) specific mapping\ndefines a set of instance types of a compute, e.g. small, medium, large. The instance types definition are endpoint type specific, but in the future we will expose also endpoint agnostic types.\n\nSchema:\n\n     - name [required] : An unique name used to identify and reference the Instance type\n     - instanceType [optional] : Instance type identifier valid in the context of the particular endpoint. If not specified, detailed instance figures such as CPU and memory must be provided instead.\n     - cpu [optional]: number of CPUs. Based on the endpoint type this field can be required.\n     - memory [optional]: RAM in megabytes. Based on the endpoint type this field can be required.\n     - diskSize [optional]: disk size in megabytes\n     - extensions [optional]: describes endpointType-specific properties needed to create instances, provided as a key/value pairs.\n     - image types - define a set of endpoint instance specific region image mappings. Each image mapping is optionally associated with additional metadata.\n      \n* Network Profile - defines networks mappings to use during provisioning. The definitions are endpoint region specific.\n\nSchema: \n\n\t - name [required] : An unique name\n     - isolation type [optional] : Isolation support type should be chosen when configuring Network Profile. It defines the isolation network support this network profile provides. Valid values are: 'None', 'Subnet', 'Security Group'. By default, the isolation type is 'None'.\n     - tags : Tags, associated with the network profile.\n     - subnets : Subnets, included in this network profile.\n     - isolatedSubnetCIDRPrefix : The CIDR prefix length to be used for the isolated subnets to be created (example: Subnet with CIDR 192.168.0.0/20 has CIDR prefix length: 20.\n\n* Storage Profile - defines infrastructure specific storages and disk type mappings. The definitions are endpoint region specific. \nEach StorageProfile contains a set of StorageItem elements, that define disk properties to be used by providers.\n\nSchema of a StorageItem: \n\n\t - name [required] : An unique name.\n     - tags : Tags to be specified in the blueprint against each disk. To be used in filtering which storage item is to be used.\n     - diskProperties : Map of storage properties that are to be used by the provider when provisioning disks.\n     - defaultItem : Defines if this particular storage item contains default storage properties.\n\nAll of the REST API methods, exposed for configuration are described in the below table.\n\n    Base URI : /api/config\n    \n<div style=\"page-break-inside: avoid;\">\n<table class=\"prettytable\">\n<tr>\n<th>Cfg Object </th>\n<th>Cfg Object URI </th>\n<th>Notes</th></tr>\n<tr>\n<td width=\"15%\"><strong>EndpointState</strong></td>\n<td width=\"15%\">/endpoints<br/></td>\n<td width=\"70%\">REST API for endpoint resources configuration and management. When configuring an EndPoint, it is required \nto provide endpointType, authentication credentials to authenticate against this End Point, resource pool that is default for this endpoint, compute and compute description resources that represent this EndPoint. It is optional to provide properties, which are specific to this EndPoint. The dedicated adapter will extract them and enhance the linked Credentials,Compute and ComputeDescription.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>SslTrustCertificateState</strong></td>\n<td width=\"15%\">/trust-certs<br/>/trust-certs-import</td>\n<td width=\"70%\">REST API for certificate configuration. Only one state object exists per one certificate.\nA method is exposed for importing and transforming a Server certificate from URI and store if valid and accepted.\n<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>SslTrustedCertificateState</strong></td>\n<td width=\"15%\">/trust-certificates<br/> </td>\n<td width=\"70%\">REST API for management of certificates in cafe-container.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>RegistryHostConfig</strong></td>\n<td width=\"15%\">/registry-spec<br/></td>\n<td width=\"70%\">REST API for adding and validating docker registries. A RegistryHostSpec object describing the registry host to be created or validated is required. It should contain a RegistrySpec with address and name.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>RegistryState</strong></td>\n<td width=\"15%\">/registries<br/></td>\n<td width=\"70%\">REST API for CRUD operations for creation and management of a the docker host.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>ConfigurationState</strong></td>\n<td width=\"15%\">/props<br/></td>\n<td width=\"70%\">Create and manage configuration properties.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>ProfileState</strong></td>\n<td width=\"15%\">/profiles<br/></td>\n<td width=\"70%\">CRUD operations for a profile object, which contains a reference compute, network and storage profile. More information about profiles can be found in the Deployment Profiles section above.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>ProfileMappingState</strong></td>\n<td width=\"15%\">/profile-mappings<br/> </td>\n<td width=\"70%\">ProfileMappingState object provides provides an intersection of mappings available across all profiles.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>ComputeProfile</strong></td>\n<td width=\"15%\">/compute-profiles<br/> </td>\n<td width=\"70%\">CRUD operations for a compute profile. More information about profiles can be found in the Deployment Profiles section above.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>StorageProfile</strong></td>\n<td width=\"15%\">/storage-profiles<br/> </td>\n<td width=\"70%\">CRUD operations for a storage profile. More information about profiles can be found in the Deployment Profiles section above.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>NetworkProfile</strong></td>\n<td width=\"15%\">/network-profiles<br/> </td>\n<td width=\"70%\">CRUD operations for a network profile. More information about profiles can be found in the Deployment Profiles section above.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>EventTopicState</strong></td>\n<td width=\"15%\">/event-topic<br/> </td>\n<td width=\"70%\"><br/></td></tr>\n<tr>\n</table></div>\n\nThe deployment request description is composed from generic/cloud-agnostic blueprint to different resources. See more about resources in the section **Resources** below.\n\n### Resources\n\nProvisioned components are modeled as Resources objects in the Provisioning Service. Resources are Network configurations, Subnet, Storage, etc.\nEach resource is described by a ResourceDescription and a ResourceState.\n* ResourceDescription represents the desired state of the resource.\n* ResourceState is the actual resource configuration, that will be provisioned on the particular End Point. Allocation provisioning stage ensure the ResourceState represents valid resource on the chosen End Point. If allocation fails, this means that for some of the\ndescribed resource, there is no valid state that can be created or exists in the cloud, thus the requested blueprint cannot be provisioned.\n\n    Base URI : /api/resources\n    \n<div style=\"page-break-inside: avoid;\">\n<table class=\"prettytable\">\n<tr>\n<th>Resource </th>\n<th>Resource URI </th>\n<th>Notes</th></tr>\n<tr>\n<td width=\"15%\"><strong>ComputeState</strong></td>\n<td width=\"15%\">/compute<br/> </td>\n<td width=\"70%\">A ComputeState can represent a VM host, a Docker container, a physical computer, or an os on a physical computer, or a zone. For more details about Compute and its configuration, see below in the Computes section.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>ComputeDescription</strong></td>\n<td width=\"15%\">/compute-descriptions<br/> </td>\n<td width=\"70%\">The description represents the desired state of the object, before it has been deployed. It holds information about the type of the compute to be deployed, the region, the zone, the Environment/ Platform name this compute is provisioned on. It holds a list of compute types this host supports actuating. For more details about Compute and its configuration, see below in the Computes section.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>SubnetState</strong></td>\n<td width=\"15%\">/sub-networks<br/> </td>\n<td width=\"70%\">API for management of SubnetStates. Virtual network can be segmented to multiple sub networks, and portion of the network address space can be allocated to each subnet. Each subnet is defined by its id, name, and CIDR block. VMs connect to a subnet within a VNet through a network interface (NIC). Subnet address spaces are automatically generated during provisioning, in case SubnetState is not provided. When creating SubnetStates, take into account that it is not possible to create two subnets with the same CIDR in the same network.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>NetworkState</strong></td>\n<td width=\"15%\">/networks<br/></td>\n<td width=\"70%\">NetworkState describes a single network resource on the cloud. A network represents a \nlogical isolation in the cloud, dedicated to the User's subscription. During allocation, the network state to be used for the particular provisioning\nis calculated. Networks can be <code>ISOLATED</code>, <code>PUBLIC</code> or <code>EXTERNAL</code>.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>NetworkInterfaceState</strong></td>\n<td width=\"15%\">/network-interfaces<br/> </td>\n<td width=\"70%\">Network Interface states describe the single points of connection of the VMs to the provided subnet. Each VM is provisioned with \none or more NICs, and the allocated private or public IPS are assigned to the NetworkInterfaceState object after the provisioning completes.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>ImageState</strong></td>\n<td width=\"15%\">/images<br/> </td>\n<td width=\"70%\">An image provides the information required to launch an instance, which is a virtual server in the cloud.\nFor each image state, a list of DiskConfigurations should be provided, describing the properties of each disk to be deployed. A DiskConfiguration consists of\ncapacity, persistence capability of the disk across reboots, and encryption status of the disk.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>DiskState</strong></td>\n<td width=\"15%\">/disks<br/></td>\n<td width=\"70%\">A DiskState represents each disc actually created based on the DiskConfiguration, provided in the ImageState. \nIt consists of an identifier of the zone associated with this disk service instance, link to the Storage description associated with the disk,\nidentifier of the resource pool associated with this disk service instance, and a reference to the source image used to create an instance of this disk.\nThe disk can be of a type: <code>SSD</code>, <code>HDD</code>, <code>CDROM</code>, <code>FLOPPY</code>, <code>NETWORK</code>, and it can be in a state <code>ATTACHED</code> or <code>DETACHED</code>. \n<br/>\nBoot configuration can as well be set in a DiskState. BootConfig object representing the configuration, contains a set of FileEntry objects, representing a file on the disk.\nThe bootConfig field, if set, will trigger a PATCH request to the sourceImageReference with bootConfig set as the request body. The sourceImageReference in this case is expected to respond with image in fat (DiskType.FLOPPY) or iso (DiskType.CDROM) format, with the BootConfig.template rendered to a file on the image named by bootConfig.fileName. This image can then be used for configuration by a live CD, such as CoreOS' cloud-config.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>ComputeNetworkDescription</strong></td>\n<td width=\"15%\">/compute-network-descriptions<br/> </td>\n<td width=\"70%\">The purpose of the ComputeNetworkDescription is to hold network information that later in the allocation will be merged with the NetworkInterfaceDescription.\nIn this description, constraints of compute network to the network profile and subnet profile can be specified. If not specified a default subnet will be calculated based on other components and placement logic.<br/></td></tr>\n</tr>\n<td width=\"15%\"><strong>ComputeNetwork</strong></td>\n<td width=\"15%\">/compute-networks<br/> </td>\n<td width=\"70%\">ComputeNetwork is the state, created for the network, based on the ComputeNetworkDescription provided. It contains a network type, a reference to the profile, where this network will be provisioned, a reference to the subnet state to provision for this network, and a list of security groups to apply to all instances connected to this network.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>EndpointState</strong></td>\n<td width=\"15%\">/endpoints<br/></td>\n<td width=\"70%\">The EndpointState represents an endpoint resource. Endpoint is configured with access credentials, a type, a reference to the Compute that represents this EP, and a list of endpoint properties. Those properties are resolved by the endpoint adapter and and used to enhance the linked Credentials,Compute and ComputeDescription.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>ContainerState</strong></td>\n<td width=\"15%\">/containers<br/></td>\n<td width=\"70%\">Describes a container instance. It has a reference to the Docker image.<br/>\nEach container can have a power state: <code>UNKNOWN</code>, <code>PROVISIONING</code>, <code>RUNNING</code>, <code>PAUSED</code>, <code>STOPPED</code>, <code>RETIRED</code> or <code>ERROR</code>;\nIt is described by name and description, and optionally address, joined networks and the configuration with which they are joined, port bindings in the format: ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort | containerPort;<br/>\nContainerState can hold information about percentages of the relative CPU sharing in a given resource pool. This is not an actual limit but a guideline of how much CPU should be divided among all containers running at a given time.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>ContainerDescription</strong></td>\n<td width=\"15%\">/container-descriptions<br/></td>\n<td width=\"70%\">Describes a container instance. The same description service instance can be re-used across many container instances acting as a shared template.\nThe Container provisioning can be optimized by providing an image reference to a docker image in .tgz format to be downloaded to the server and pushed to the local host repository.<br/>\nAffinity or anti-affinity conditions of containers deployed or not deployed on the same host. Format: \"[!]serviceName[:soft|hard].\n<br/>If not specified, the default constraint type is \"hard\". Examples: [\"cont1\", \"!cont2\", \"cont3:soft\", \"cont4:hard\", \"!cont5:soft\", \"!cont6:hard\"]<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>ContainerHostSpec</strong></td>\n<td width=\"15%\">/hosts<br/></td>\n<td width=\"70%\"><br/>ContainerHostSpec can be used for adding and validating container hosts, a flag <code>isUpdateOperation</code> is provided to identify whether this is an update or a create request.</td></tr>\n<tr>\n<td width=\"15%\"><strong>LogServiceState</strong></td>\n<td width=\"15%\">/container-logs<br/></td>\n<td width=\"70%\">Exposes a GET operation for obtaining a stream of container log data.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>ContainerShell</strong></td>\n<td width=\"15%\">/container-shell<br/></td>\n<td width=\"70%\"><br/>Retrieves shell and checks resource rights by given catalog binding id.</td></tr>\n<tr>\n<td width=\"15%\"><strong>ContainerNetworkState</strong></td>\n<td width=\"15%\">/container-networks<br/></td>\n<td width=\"70%\">ContainerNetworkState describes a network of a container. It contains information for the power state (<code>UNKNOWN</code>, <code>PROVISIONING</code>, <code>CONNECTED</code>, <code>RETIRED</code> or <code>ERROR</code>), can contain an info about which adapter will serve the provision request, an IPAM configuration, links to CompositeComponents when a network is part of App/Composition request, \nthe name of the driver for this network (bridge, host, overlay or none. This state contains a property \"connectedContainersCount\" providing information about the number of containers that are connected to this container network - it is a runtime property, populated during network inspections.\n<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>ContainerNetworkDescription</strong></td>\n<td width=\"15%\">/container-network-descriptions<br/></td>\n<td width=\"70%\">Description object used for defining the Container Networks to be provisioned.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>ContainerVolumeState</strong></td>\n<td width=\"15%\">/container-volumes<br/></td>\n<td width=\"70%\">ContainerVolumeState describes a volume instance. Container volume configurations can be used to provide persistent data volumes for use with containers, to define an empty, non-persistent data volume and mount it on multiple containers on the same container instance, and to share defined data volumes at different locations on different containers on the same container instance.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>ContainerVolumeDescription</strong></td>\n<td width=\"15%\">/container-volume-descriptions<br/></td>\n<td width=\"70%\">ContainerVolumeDescription describe a container volume to be provisioned.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>ClosureState</strong></td>\n<td width=\"15%\">/closures<br/></td>\n<td width=\"70%\">ClosureState describes a provisioned Closure instance.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>ClosureDescription</strong></td>\n<td width=\"15%\">/closure-descriptions<br/></td>\n<td width=\"70%\"><br/>ClosureDescription describe a closure to be provisioned.</td></tr>\n<tr>\n<td width=\"15%\"><strong>CompositeDescription</strong></td>\n<td width=\"15%\">/composite-descriptions-clone<br/> </td>\n<td width=\"70%\"><br/>Exposing a method for creating a clone of a CompositeDescription. A Composite describes multiple container instances deployed at the same time. It represents a template definition of related services or an application. It has a status, which can be one of: <code>DRAFT</code>, <code>PUBLISHED</code> or <code>RETIRED</code>.</td></tr>\n<tr>\n<td width=\"15%\"><strong>CompositeComponent</strong></td>\n<td width=\"15%\">/composite-components<br/></td>\n<td width=\"70%\">Describes grouping of multiple container instances deployed at the same time. It represents a template definition of related services or an application.<br/>\n</td></tr>\n<tr>\n<td width=\"15%\"><strong>CompositeDescription</strong></td>\n<td width=\"15%\">/composite-templates<br/></td>\n<td width=\"70%\"><br/>Exposes possibility to import an yaml template as a CompositeDescription.</td></tr>\n<tr>\n<td width=\"15%\"><strong>ResourceGroupState</strong></td>\n<td width=\"15%\">/groups<br/> </td>\n<td width=\"70%\">ResourceGroupState describes a resource group instance. A resource group is a grouping of resources that have the same groupLink field.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>GroupResourcePlacementState</strong></td>\n<td width=\"15%\">/group-placements<br/></td>\n<td width=\"70%\">Group resource placement service - reserving resources for a given group.\n<br/>\nThe properties <code>maxNumberInstances</code>, <code>memoryLimit</code> and \n<code>storageLimit</code> are hard constraints for which the allocation will fail if not\nsatisfied.\n<br/>\nThe properties <code>cpuShares</code> is a very soft constraint of how the CPU resources should\nbe utilized and have minimal affect in the actual placement algorithm. It would be used as a soft\nindicator that a containers with higher CPU utilization requirements should be placed to a less\nutilized hosts.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>ResourcePoolState</strong></td>\n<td width=\"15%\">/pools<br/></td>\n<td width=\"70%\">Describes a resource pool. A resource pool is a grouping of ComputeStates that can be used as a single unit for planning and allocation purposes. a resource may participate in at most one non-elastic resource pool and zero or more elastic resource pools.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>DeploymentPolicy</strong></td>\n<td width=\"15%\">/deployment-policies<br/> </td>\n<td width=\"70%\">Help service to add a container host and validate container host address.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>TagState</strong></td>\n<td width=\"15%\">/tags<br/></td>\n<td width=\"70%\">Describes a tag instance. Each tag consists of a key and an optional value. Each tag is categorized as local or external. Local (default) means the tag is managed by this system. If the tag is assigned to a local resource, changes on the remote state will never affect this assignment. External means the tag is managed by an external system (e.g. cloud provider). In this case, if the tag assignment is removed on the remote state, the local state is updated accordingly.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>ElasticPlacementZoneState</strong></td>\n<td width=\"15%\">/elastic-placement-zones<br/> </td>\n<td width=\"70%\">Describes an elastic placement zone where the computes contributing capacity to the resource pool are identified by matching tags instead of explicitly attaching them to the pool. This resource state holds the placement policy described above, which can be: <code>DEFAULT</code> - place on random host, <code>SPREAD</code> - place on host with minimum resources - either computes or containers, and <code>BINPACK</code> - meaning place on most loaded host until it reach the limit of resource.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>TagAssignmentRequest</strong></td>\n<td width=\"15%\">/tag-assignment<br/></td>\n<td width=\"70%\">Helper utility service for updating tags on a resource. Does all the heavy-lifting with regard to self link retrieval, TagState creation, tag assignment/unassignment, and so on. If no resource is provided, the given tags are created if needed, and their links returned.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>Notifications</strong></td>\n<td width=\"15%\">/notifications<br/> </td>\n<td width=\"70%\">Helper service for aggregating notifications displayed in UI for both event logs and request tasks.<br/></td></tr>\n<tr>\n<td width=\"15%\"><strong>EventLogState</strong></td>\n<td width=\"15%\">/event-logs<br/> </td>\n<td width=\"70%\">Describes a result of some asynchronous operations in the form of event log that usually cannot be propagated to the UI by normal means but still need user attention. It can be of a type: <code>INFO</code> - Events that pass non-critical information to the administrator, <code>WARNING</code> - Events that provide implication of potential problems; a warning indicates that the system is not in an ideal state and that some further actions could result in an error, and <code>ERROR</code> - Events that indicate problems that are not system-critical and do not require immediate attention.<br/></td></tr>\n<tr>\n</table></div>\n\nThe Adapter for the chosen end point translates resources states to particular cloud-specific objects.\n\n### Adapters\nProvisioning service provides possibility to work transparently with different Cloud services providers, based on the provisioning needs.\nIn order to deploy and manage infrastructure on public clouds as well as virtual providers, a dedicated adapter is implemented for each Cloud. Adapters transform Resource States requirements to objects, describing those resources in the particular Cloud's API.",
    "version" : "8.0.0-SNAPSHOT",
    "title" : "Container Service API"
  },
  "basePath" : "/container-service",
  "tags" : [ {
    "name" : "adapter"
  }, {
    "name" : "authentication"
  }, {
    "name" : "business-groups"
  }, {
    "name" : "closures"
  }, {
    "name" : "composite"
  }, {
    "name" : "compute"
  }, {
    "name" : "compute-management"
  }, {
    "name" : "config-properties"
  }, {
    "name" : "container"
  }, {
    "name" : "deployment-policy"
  }, {
    "name" : "disk"
  }, {
    "name" : "elastic-placement-zone"
  }, {
    "name" : "endpoints"
  }, {
    "name" : "events"
  }, {
    "name" : "images"
  }, {
    "name" : "log"
  }, {
    "name" : "network"
  }, {
    "name" : "notifications"
  }, {
    "name" : "placements"
  }, {
    "name" : "post"
  }, {
    "name" : "profiles"
  }, {
    "name" : "registry"
  }, {
    "name" : "request-status"
  }, {
    "name" : "requests"
  }, {
    "name" : "resource-group"
  }, {
    "name" : "resource-pool"
  }, {
    "name" : "security-groups"
  }, {
    "name" : "service-document"
  }, {
    "name" : "ssl"
  }, {
    "name" : "storage"
  }, {
    "name" : "subnet"
  }, {
    "name" : "tagging"
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/api/adapter/**" : {
      "get" : {
        "tags" : [ "adapter" ],
        "summary" : "Generic GET to access xenon Adapter API",
        "description" : "Only Solution users, Container admins, and System admins can access the Adapter API",
        "operationId" : "adapterGet",
        "responses" : {
          "200" : {
            "description" : "OK with the Object received from the adapter",
            "schema" : {
              "$ref" : "#/definitions/GenericTenantedServiceDocument"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "adapter" ],
        "summary" : "Generic POST to access xenon Adapter API",
        "description" : "Only Solution users, Container admins, and System admins can access the Adapter API",
        "operationId" : "adapterPost",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GenericTenantedServiceDocument"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'Ok' is returned with the Object received from the adapter",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "adapter" ],
        "summary" : "Generic PUT to access xenon Adapter API",
        "description" : "Only Solution users, Container admins, and System admins can access the Adapter API",
        "operationId" : "adapterPut",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GenericTenantedServiceDocument"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok with the Object received from the adapter",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "adapter" ],
        "summary" : "Generic DELETE to access xenon Adapter API",
        "description" : "Only Solution users, Container admins, and System admins can access the Adapter API",
        "operationId" : "adapterDelete",
        "responses" : {
          "204" : {
            "description" : "No content"
          }
        }
      },
      "patch" : {
        "tags" : [ "adapter" ],
        "summary" : "Generic PATCH to access xenon Adapter API",
        "description" : "Only Solution users, Container admins, and System admins can access the Adapter API",
        "operationId" : "adapterPatch",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GenericTenantedServiceDocument"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          }
        }
      }
    },
    "/api/callbacks/catalog/post-submission-extension" : {
      "post" : {
        "summary" : "Performs additional actions post submission.",
        "description" : "",
        "operationId" : "CatalogRequestCallbackController.postSubmissionExtension",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Service Catalog representation of a Container instance Request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/providerRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/callbacks/catalog/requestValidations" : {
      "post" : {
        "summary" : "Handles the validation callback for an unsubmitted Request from the Service Catalog. This callback is used to both validate the request as well obtain additional properties if needed before the request is submitted.",
        "description" : "",
        "operationId" : "CatalogRequestCallbackController.validateRequest",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Service Catalog representation of a Container Instance Request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/providerRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/callbacks/catalog/requests" : {
      "post" : {
        "summary" : "Handles submitted Request from the Service Catalog to the Container service.",
        "description" : "",
        "operationId" : "CatalogRequestCallbackController.submitRequest",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Service Catalog representation of a Container instance Request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/providerRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : ""
          }
        }
      }
    },
    "/api/callbacks/catalog/requests/{requestId}/rollback" : {
      "post" : {
        "summary" : "Handles the direction to rollback a rejected request from the Service Catalog.",
        "description" : "",
        "operationId" : "CatalogRequestCallbackController.rollbackRequest",
        "parameters" : [ {
          "name" : "requestId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/providerRollbackRequest"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      }
    },
    "/api/callbacks/catalog/resources/types/{resourceTypeId}" : {
      "post" : {
        "summary" : "Retrieves collection of resources by resource type.",
        "description" : "",
        "parameters" : [ {
          "name" : "resourceTypeId",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "List of resources to be fetched for.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/callbacks/catalog/resources/types/{resourceTypeId}/{bindingId}" : {
      "get" : {
        "summary" : "Retrieves a single resource by its unique identifier.",
        "description" : "",
        "operationId" : "ContainerResourceController.getResource",
        "parameters" : [ {
          "name" : "resourceTypeId",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "name" : "bindingId",
          "in" : "path",
          "description" : "The unique identifier of the resource.",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/callbacks/composition/componentallocator/requests" : {
      "post" : {
        "summary" : "Accepts a new request to allocate a Container component from composition service.",
        "description" : "",
        "operationId" : "CompositionCallbackRequestController.allocateComponent",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/allocateComponentRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : ""
          }
        }
      }
    },
    "/api/callbacks/composition/componentdeallocator/requests" : {
      "post" : {
        "summary" : "Accepts a new request to deallocate a Container component from composition service.",
        "description" : "",
        "operationId" : "CompositionCallbackRequestController.deallocateComponent",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/compositionProviderRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Deallocation of component initiated."
          }
        }
      }
    },
    "/api/callbacks/composition/requests" : {
      "post" : {
        "summary" : "Accepts a new request to provision a Container component type from composition service.",
        "description" : "",
        "operationId" : "CompositionCallbackRequestController.create",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The CompositionProviderRequest defining the request parameters.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/compositionProviderRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : ""
          }
        }
      }
    },
    "/api/callbacks/network/networks-allocator" : {
      "post" : {
        "summary" : "Accepts a new request to allocate a Container Network component from network service.",
        "description" : "",
        "operationId" : "NetworkCallbackRequestController.allocateComponent",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/networkProviderRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Retrieve allocation component",
            "schema" : {
              "$ref" : "#/definitions/ResponseEntity"
            }
          }
        }
      }
    },
    "/api/callbacks/network/networks-deallocator" : {
      "post" : {
        "summary" : "Accepts a new request to deallocate a Container Network component from network service.",
        "description" : "",
        "operationId" : "NetworkCallbackRequestController.deallocateComponent",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/networkProviderRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Deallocation of component initiated",
            "schema" : {
              "$ref" : "#/definitions/ResponseEntity"
            }
          }
        }
      }
    },
    "/api/callbacks/network/requests" : {
      "post" : {
        "summary" : "Accepts a new request from network service to provision or perform a day-2 operation on a Network component type.",
        "description" : "",
        "operationId" : "NetworkCallbackRequestController.submitRequest",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The NetworkProviderRequest defining the request parameters.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/networkProviderRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : ""
          }
        }
      }
    },
    "/api/config/compute-profiles" : {
      "get" : {
        "tags" : [ "compute" ],
        "summary" : "Retrieves all ComputeProfiles.",
        "description" : "Only Solution users, Container admins, and System admins can list ComputeProfiles.",
        "operationId" : "listComputeProfile",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageComputeProfile"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "compute" ],
        "summary" : "Creates a ComputeProfile.",
        "description" : "Only Solution users, Container admins, and System admins can create ComputeProfiles.",
        "operationId" : "createComputeProfile",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ComputeProfile"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ComputeProfile"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/config/compute-profiles/{id}" : {
      "get" : {
        "tags" : [ "compute" ],
        "summary" : "Retrieves a ComputeProfile.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve ComputeProfiles.",
        "operationId" : "getComputeProfile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ComputeProfile",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the ComputeProfile",
            "schema" : {
              "$ref" : "#/definitions/ComputeProfile"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ComputeProfile with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "compute" ],
        "summary" : "Updates a ComputeProfile.",
        "description" : "Only Solution users, Container admins, and System admins can update ComputeProfiles.",
        "operationId" : "updateComputeProfile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ComputeProfile",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ComputeProfile to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ComputeProfile"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the ComputeProfile is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "compute" ],
        "summary" : "Deletes a ComputeProfile.",
        "description" : "Only Solution users, Container admins, and System admins can delete ComputeProfiles.",
        "operationId" : "deleteComputeProfile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a ComputeProfile",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "compute" ],
        "summary" : "Patches a ComputeProfile.",
        "description" : "Only Solution users, Container admins, and System admins can patch ComputeProfiles.",
        "operationId" : "patchComputeProfile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ComputeProfile",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the ComputeProfile",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ComputeProfile"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/config/endpoints" : {
      "get" : {
        "tags" : [ "endpoints" ],
        "summary" : "Retrieves all EndpointStates.",
        "description" : "Only Solution users, Container admins, and System admins can list EndpointStates.",
        "operationId" : "listEndpointState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageEndpointState"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "endpoints" ],
        "summary" : "Creates a EndpointState.",
        "description" : "Only Solution users, Container admins, and System admins can create EndpointStates.",
        "operationId" : "createEndpointState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EndpointState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/EndpointState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      },
      "put" : {
        "tags" : [ "endpoints" ],
        "summary" : "Validates the certificate of an Endpoint.",
        "description" : "Only Solution users, Container admins, and System admins can validate Endpoint certificate.",
        "operationId" : "validateEndpoint",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EndpointState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    },
    "/api/config/endpoints/resources/endpoints/{id}" : {
      "get" : {
        "tags" : [ "endpoints" ],
        "summary" : "Retrieves a EndpointState.",
        "description" : "Only Solution users, Container admins, and System admins can create EndpointStates.",
        "operationId" : "getEndpointState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the EndpointState",
            "schema" : {
              "$ref" : "#/definitions/EndpointState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no EndpointState with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "endpoints" ],
        "summary" : "Updates a EndpointState.",
        "description" : "Only Solution users, Container admins, and System admins can update EndpointState.",
        "operationId" : "updateEndpointState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the EndpointState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The EndpointState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EndpointState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the EndpointState is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "endpoints" ],
        "summary" : "Deletes a EndpointState.",
        "description" : "Only Solution users, Container admins, and System admins can delete EndpointStates.",
        "operationId" : "deleteEndpointState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a EndpointState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "endpoints" ],
        "summary" : "Patches a EndpointState.",
        "description" : "Only Solution users, Container admins, and System admins can patch ContainerStates.",
        "operationId" : "patchEndpointState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the EndpointState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the EndpointState",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EndpointState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/config/event-topic" : {
      "get" : {
        "tags" : [ "events" ],
        "summary" : "Retrieves all EventTopicStates.",
        "description" : "Only System admins can list EventTopicStates.",
        "operationId" : "listEventTopicState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageEventTopicState"
            }
          }
        }
      }
    },
    "/api/config/network-profiles" : {
      "get" : {
        "tags" : [ "network" ],
        "summary" : "Retrieves all NetworkProfiles.",
        "description" : "Only Solution users, Container admins, and System admins can list NetworkProfiles.",
        "operationId" : "listNetworkProfile",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageNetworkProfile"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Creates a NetworkProfile.",
        "description" : "Only Solution users, Container admins, and System admins can create NetworkProfiles.",
        "operationId" : "createNetworkProfile",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/deploymentNetworkProfile"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/deploymentNetworkProfile"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/config/network-profiles/{id}" : {
      "get" : {
        "tags" : [ "network" ],
        "summary" : "Retrieves a NetworkProfile.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve NetworkProfiles.",
        "operationId" : "getNetworkProfile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the NetworkProfile",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the NetworkProfile",
            "schema" : {
              "$ref" : "#/definitions/deploymentNetworkProfile"
            }
          },
          "404" : {
            "description" : "'Not Found' if no NetworkProfile with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "network" ],
        "summary" : "Updates a NetworkProfile.",
        "description" : "Only Solution users, Container admins, and System admins can update NetworkProfiles.",
        "operationId" : "updateNetworkProfile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the NetworkProfile",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The NetworkProfile to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/deploymentNetworkProfile"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the NetworkProfile is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "network" ],
        "summary" : "Deletes a NetworkProfile.",
        "description" : "Only Solution users, Container admins, and System admins can delete NetworkProfiles.",
        "operationId" : "deleteNetworkProfile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a NetworkProfile",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "network" ],
        "summary" : "Patches a NetworkProfile.",
        "description" : "Only Solution users, Container admins, and System admins can patch NetworkProfiles.",
        "operationId" : "patchNetworkProfile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the NetworkProfile",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the NetworkProfile",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/deploymentNetworkProfile"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/config/photon-model-adapters-registry" : {
      "get" : {
        "tags" : [ "registry" ],
        "summary" : "Retrieves all PhotonModelAdapterConfigs.",
        "description" : "Only Solution users, Container admins, System admins and Consumers can list PhotonModelAdapterConfig.",
        "operationId" : "listPhotonModelAdapterConfigs",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PagePhotonModelAdapterConfig"
            }
          }
        }
      }
    },
    "/api/config/photon-model-adapters-registry/{id}" : {
      "get" : {
        "tags" : [ "registry" ],
        "summary" : "Retrieves a PhotonModelAdapterConfig.",
        "description" : "Only Solution users, Container admins, System admins and Consumers can list PhotonModelAdapterConfig states.",
        "operationId" : "getPhotonModelAdapterConfig",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the PhotonModelAdapterConfig",
            "schema" : {
              "$ref" : "#/definitions/PhotonModelAdapterConfig"
            }
          },
          "404" : {
            "description" : "'Not Found' if no PhotonModelAdapterConfig with provided <code>id</code>"
          }
        }
      }
    },
    "/api/config/profile-mappings" : {
      "get" : {
        "tags" : [ "profiles" ],
        "summary" : "Retrieves all ProfileMappingStates.",
        "description" : "Only Solution users, Container admins, and System admins can list ProfileMappingStates.",
        "operationId" : "listProfileMappingState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageProfileMappingState"
            }
          }
        }
      }
    },
    "/api/config/profiles" : {
      "get" : {
        "tags" : [ "profiles" ],
        "summary" : "Retrieves all ProfileStates.",
        "description" : "Only Solution users, Container admins, and System admins can list ProfileStates.",
        "operationId" : "listProfileState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageProfileState"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "profiles" ],
        "summary" : "Creates a ProfileState.",
        "description" : "Only Solution users, Container admins, and System admins can create ProfileStates.",
        "operationId" : "createProfileState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ProfileState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ProfileState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/config/profiles/{id}" : {
      "get" : {
        "tags" : [ "profiles" ],
        "summary" : "Retrieves a ProfileState.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve ProfileStates.",
        "operationId" : "getProfileState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ProfileState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the ProfileState",
            "schema" : {
              "$ref" : "#/definitions/ProfileState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ProfileState with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "profiles" ],
        "summary" : "Updates a ProfileState.",
        "description" : "Only Solution users, Container admins, and System admins can update ProfileStates.",
        "operationId" : "updateProfileState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ProfileState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ProfileState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ProfileState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the ProfileState is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "profiles" ],
        "summary" : "Deletes a ProfileState.",
        "description" : "Only Solution users, Container admins, and System admins can delete ProfileStates.",
        "operationId" : "deleteProfileState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a ProfileState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "profiles" ],
        "summary" : "Patches a ProfileState.",
        "description" : "Only Solution users, Container admins, and System admins can patch ProfileStates.",
        "operationId" : "patchProfileState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ProfileState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the ProfileState",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ProfileState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/config/props" : {
      "get" : {
        "tags" : [ "config-properties" ],
        "summary" : "Retrieves all ConfigurationStates.",
        "description" : "Only Solution users, Container admins, System admins and Consumers can list ConfigurationStates.",
        "operationId" : "listConfigurationStates",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageConfigurationState"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "config-properties" ],
        "summary" : "Creates a ConfigurationState.",
        "description" : "Only Solution users and System admins can create ConfigurationStates.",
        "operationId" : "createConfigurationState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ConfigurationState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ConfigurationState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/config/props/{id}" : {
      "get" : {
        "tags" : [ "config-properties" ],
        "summary" : "Retrieves a ConfigurationState.",
        "description" : "Only Solution users, Container admins, System admins and Consumers can list ConfigurationStates.",
        "operationId" : "getConfigurationState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the ConfigurationState",
            "schema" : {
              "$ref" : "#/definitions/ConfigurationState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ConfigurationState with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "config-properties" ],
        "summary" : "Updates a ConfigurationState.",
        "description" : "Only Solution users and System admins can update ConfigurationState.",
        "operationId" : "updateConfigurationState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ConfigurationState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ConfigurationState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ConfigurationState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the ConfigurationState is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "config-properties" ],
        "summary" : "Deletes a ConfigurationState.",
        "description" : "Only Solution users and System admins can delete ConfigurationStates.",
        "operationId" : "deleteConfigurationState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a ConfigurationState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "config-properties" ],
        "summary" : "Patches a ConfigurationState.",
        "description" : "Only Solution users and System admins can patch ConfigurationStates.",
        "operationId" : "patchConfigurationState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ConfigurationState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the ConfigurationState",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ConfigurationState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/config/registries" : {
      "get" : {
        "tags" : [ "registry" ],
        "summary" : "Retrieves all RegistryStates.",
        "description" : "Only Solution users, Container admins, and System admins can list RegistryStates.",
        "operationId" : "listRegistryState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageRegistryState"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "registry" ],
        "summary" : "Creates a RegistryState.",
        "description" : "Only Solution users, Container admins, and System admins can create RegistryStates.",
        "operationId" : "createRegistryState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RegistryState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RegistryState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/config/registries/{id}" : {
      "get" : {
        "tags" : [ "registry" ],
        "summary" : "Retrieves a RegistryState.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve RegistryStates.",
        "operationId" : "getRegistryState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the RegistryState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the RegistryState",
            "schema" : {
              "$ref" : "#/definitions/RegistryState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no RegistryState with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "registry" ],
        "summary" : "Updates a RegistryState.",
        "description" : "Only Solution users, Container admins, and System admins can update RegistryStates.",
        "operationId" : "updateRegistryState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the RegistryState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The RegistryState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RegistryState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the RegistryState is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "registry" ],
        "summary" : "Deletes a RegistryState.",
        "description" : "Only Solution users, Container admins, and System admins can delete RegistryStates.",
        "operationId" : "deleteRegistryState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a RegistryState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "registry" ],
        "summary" : "Patches a RegistryState.",
        "description" : "Only Solution users, Container admins, and System admins can patch RegistryStates.",
        "operationId" : "patchRegistryState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the RegistryState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the RegistryState",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RegistryState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/config/registry-spec" : {
      "put" : {
        "tags" : [ "registry" ],
        "summary" : "Helper method for adding and validating docker registries.",
        "description" : "Only Solution users, Container admins, and System admins can add or validate docker registries.",
        "operationId" : "updateRegistryHostSpec",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "RegistryState + SslTrustCertificateState",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RegistryHostSpec"
          }
        }, {
          "name" : "validate",
          "in" : "query",
          "description" : "Only validate registry.",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SslTrustCertificateState"
            }
          }
        }
      }
    },
    "/api/config/storage-profiles" : {
      "get" : {
        "tags" : [ "storage" ],
        "summary" : "Retrieves all StorageProfiles.",
        "description" : "Only Solution users, Container admins, and System admins can list StorageProfiles.",
        "operationId" : "listStorageProfile",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageStorageProfile"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "storage" ],
        "summary" : "Creates a StorageProfile.",
        "description" : "Only Solution users, Container admins, and System admins can create StorageProfiles.",
        "operationId" : "createStorageProfile",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/deploymentStorageProfile"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/deploymentStorageProfile"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/config/storage-profiles/{id}" : {
      "get" : {
        "tags" : [ "storage" ],
        "summary" : "Retrieves a StorageProfile.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve StorageProfiles.",
        "operationId" : "getStorageProfile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the StorageProfile",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the StorageProfile",
            "schema" : {
              "$ref" : "#/definitions/deploymentStorageProfile"
            }
          },
          "404" : {
            "description" : "'Not Found' if no StorageProfile with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "storage" ],
        "summary" : "Updates a StorageProfile.",
        "description" : "Only Solution users, Container admins, and System admins can update StorageProfiles.",
        "operationId" : "updateStorageProfile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the StorageProfile",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The StorageProfile to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/deploymentStorageProfile"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the StorageProfile is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "storage" ],
        "summary" : "Deletes a StorageProfile.",
        "description" : "Only Solution users, Container admins, and System admins can delete StorageProfiles.",
        "operationId" : "deleteStorageProfile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a StorageProfile",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "storage" ],
        "summary" : "Patches a StorageProfile.",
        "description" : "Only Solution users, Container admins, and System admins can patch StorageProfiles.",
        "operationId" : "patchStorageProfile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the StorageProfile",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the StorageProfile",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/deploymentStorageProfile"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/config/trust-certs" : {
      "get" : {
        "tags" : [ "ssl" ],
        "summary" : "Retrieves all SslTrustCertificateStates.",
        "description" : "Only Solution users, Container admins, and System admins can list SslTrustCertificateStates.",
        "operationId" : "listSslTrustCertificateState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageSslTrustCertificateState"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "ssl" ],
        "summary" : "Creates a SslTrustCertificateState.",
        "description" : "Only Solution users, Container admins, and System admins can create SslTrustCertificateStates.",
        "operationId" : "createSslTrustCertificateState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SslTrustCertificateState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SslTrustCertificateState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/config/trust-certs-import" : {
      "put" : {
        "tags" : [ "ssl" ],
        "summary" : "Imports and transforms a Server certificate from URI and store if valid and accepted.",
        "description" : "Only Solution users, Container admins, and System admins import server certificates.",
        "operationId" : "SslTrustImportController.update",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SslTrustImportRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SslTrustCertificateState"
            }
          }
        }
      }
    },
    "/api/config/trust-certs/{id}" : {
      "get" : {
        "tags" : [ "ssl" ],
        "summary" : "Retrieves a SslTrustCertificateState.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve SslTrustCertificateStates.",
        "operationId" : "getSslTrustCertificateState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the SslTrustCertificateState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the SslTrustCertificateState",
            "schema" : {
              "$ref" : "#/definitions/SslTrustCertificateState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no SslTrustCertificateState with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "ssl" ],
        "summary" : "Updates a SslTrustCertificateState.",
        "description" : "Only Solution users, Container admins, and System admins can update SslTrustCertificateStates.",
        "operationId" : "updateSslTrustCertificateState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the SslTrustCertificateState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The SslTrustCertificateState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SslTrustCertificateState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the SslTrustCertificateState is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "ssl" ],
        "summary" : "Deletes a SslTrustCertificateState.",
        "description" : "Only Solution users, Container admins, and System admins can delete SslTrustCertificateStates.",
        "operationId" : "deleteSslTrustCertificateState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a SslTrustCertificateState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "ssl" ],
        "summary" : "Patches a SslTrustCertificateState.",
        "description" : "Only Solution users, Container admins, and System admins can patch SslTrustCertificateStates.",
        "operationId" : "patchSslTrustCertificateState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the SslTrustCertificateState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the SslTrustCertificateState",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SslTrustCertificateState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/config/trusted-certificates" : {
      "get" : {
        "tags" : [ "ssl" ],
        "summary" : "Retrieves all SslTrustedCertificateStates.",
        "description" : "Only Solution users, Container admins, and System admins can list SslTrustedCertificateStates.",
        "operationId" : "listSslTrustedCertificateState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageSslTrustedCertificateState"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "ssl" ],
        "summary" : "Creates a SslTrustedCertificateState.",
        "description" : "Only Solution users, Container admins, and System admins can create SslTrustedCertificateStates.",
        "operationId" : "createSslTrustedCertificateState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SslTrustedCertificateState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SslTrustedCertificateState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/config/trusted-certificates/{id}" : {
      "get" : {
        "tags" : [ "ssl" ],
        "summary" : "Retrieves a SslTrustedCertificateState.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve SslTrustedCertificateStates.",
        "operationId" : "getSslTrustedCertificateState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the SslTrustedCertificateState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the SslTrustedCertificateState",
            "schema" : {
              "$ref" : "#/definitions/SslTrustedCertificateState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no SslTrustedCertificateState with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "ssl" ],
        "summary" : "Updates a SslTrustedCertificateState.",
        "description" : "Only Solution users, Container admins, and System admins can update SslTrustedCertificateStates.",
        "operationId" : "updateSslTrustedCertificateState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the SslTrustedCertificateState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The SslTrustedCertificateState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SslTrustedCertificateState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the SslTrustedCertificateState is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "ssl" ],
        "summary" : "Deletes a SslTrustedCertificateState.",
        "description" : "Only Solution users, Container admins, and System admins can delete SslTrustedCertificateStates.",
        "operationId" : "deleteSslTrustedCertificateState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a SslTrustedCertificateState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "ssl" ],
        "summary" : "Patches a SslTrustedCertificateState.",
        "description" : "Only Solution users, Container admins, and System admins can patch SslTrustedCertificateStates.",
        "operationId" : "patchSslTrustedCertificateState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the SslTrustedCertificateState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the SslTrustedCertificateState",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SslTrustedCertificateState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/containers/types" : {
      "get" : {
        "tags" : [ "container" ],
        "summary" : "Retrieves all ContainerType with specified paging, sorting and filtering parameters.",
        "description" : "Only Solution users, Container admins, and System admins can list ContainerTypes.",
        "operationId" : "listContainerTypes",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageContainerType"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "container" ],
        "summary" : "Creates a ContainerType.",
        "description" : "Only Solution users, Container admins, and System admins can create ContainerDescriptions.",
        "operationId" : "createContainerType",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContainerType"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ContainerType"
            }
          },
          "201" : {
            "description" : "'Created' is returned if new containerType with the containerType url in the <code>location</code> header of the response"
          },
          "204" : {
            "description" : "'No Content' is returned when updated."
          }
        }
      }
    },
    "/api/containers/types/{id}" : {
      "get" : {
        "tags" : [ "container" ],
        "summary" : "Retrieves a ContainerType.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve ContainerTypes.",
        "operationId" : "getContainerType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ContainerType",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' with the @link ContainerType",
            "schema" : {
              "$ref" : "#/definitions/ContainerType"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ContainerType with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "container" ],
        "summary" : "Creates or updates a ContainerType.",
        "description" : "Only Solution users, Container admins, and System admins can create ContainerDescriptions.",
        "operationId" : "createOrUpdateContainerType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The UUID of the ContainerType.",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ContainerType to be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContainerType"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          },
          "201" : {
            "description" : "'Created' is returned if new containerType with the containerType url in the <code>location</code> header of the response"
          },
          "204" : {
            "description" : "'No Content' is returned when updated."
          }
        }
      },
      "delete" : {
        "tags" : [ "container" ],
        "summary" : "Deletes a ContainerType with the given ID.",
        "description" : "Only Solution users, Container admins, and System admins can delete ContainerDescriptions.",
        "operationId" : "deleteContainerType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The UUID of a ContainerType",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      }
    },
    "/api/core/auth/credentials" : {
      "get" : {
        "tags" : [ "authentication" ],
        "summary" : "Retrieves all AuthCredentialsServiceStates.",
        "description" : "Only Solution users, Container admins, and System admins can list AuthCredentialsServiceStates.",
        "operationId" : "listAuthCredentialsServiceState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageAuthCredentialsServiceState"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "authentication" ],
        "summary" : "Creates a AuthCredentialsServiceState.",
        "description" : "Only Solution users, Container admins, and System admins can create AuthCredentialsServiceStates.",
        "operationId" : "createAuthCredentialsServiceState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AuthCredentialsServiceState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AuthCredentialsServiceState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/core/auth/credentials/{id}" : {
      "get" : {
        "tags" : [ "authentication" ],
        "summary" : "Retrieves a AuthCredentialsServiceState.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve AuthCredentialsServiceStates.",
        "operationId" : "getAuthCredentialsServiceState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the AuthCredentialsServiceState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the AuthCredentialsServiceState",
            "schema" : {
              "$ref" : "#/definitions/AuthCredentialsServiceState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no AuthCredentialsServiceState with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "authentication" ],
        "summary" : "Updates a AuthCredentialsServiceState.",
        "description" : "Only Solution users, Container admins, and System admins can update AuthCredentialsServiceState.",
        "operationId" : "updateAuthCredentialsServiceState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the AuthCredentialsServiceState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The AuthCredentialsServiceState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AuthCredentialsServiceState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the AuthCredentialsServiceState is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "authentication" ],
        "summary" : "Deletes a AuthCredentialsServiceState.",
        "description" : "Only Solution users, Container admins, and System admins can delete AuthCredentialsServiceStates.",
        "operationId" : "deleteAuthCredentialsServiceState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a AuthCredentialsServiceState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "authentication" ],
        "summary" : "Patches a AuthCredentialsServiceState.",
        "description" : "Only Solution users, Container admins, and System admins can patch AuthCredentialsServiceStates.",
        "operationId" : "patchAuthCredentialsServiceState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the AuthCredentialsServiceState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the AuthCredentialsServiceState",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AuthCredentialsServiceState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/data-collection" : {
      "post" : {
        "summary" : "Triggers full data collection.",
        "description" : "Only Solution users, Container admins, and System admins can trigger data collection.",
        "responses" : {
          "204" : {
            "description" : "'No Content' is returned when successful."
          }
        }
      }
    },
    "/api/data-collection/types/{containerTypeId}" : {
      "post" : {
        "summary" : "Triggers data collection of all hosts and associated containers per containerType and related provider.",
        "description" : "Only Solution users, Container admins, and System admins can trigger data collection.",
        "parameters" : [ {
          "name" : "containerTypeId",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : "'No Content' is returned when successful."
          }
        }
      }
    },
    "/api/delete-tasks" : {
      "get" : {
        "tags" : [ "service-document" ],
        "summary" : "Retrieves all ServiceDocumentDeleteTaskState.",
        "description" : "Only Solution users, Container admins, and System admins can list ServiceDocumentDeleteTaskState.",
        "operationId" : "listServiceDocumentDeleteTaskState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageServiceDocumentDeleteTaskState"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "service-document" ],
        "summary" : "Creates a ServiceDocumentDeleteTaskState.",
        "description" : "Only Solution users, Container admins, and System admins can create ServiceDocumentDeleteTaskState.",
        "operationId" : "createServiceDocumentDeleteTaskState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ServiceDocumentDeleteTaskState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ServiceDocumentDeleteTaskState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/delete-tasks/{id}" : {
      "get" : {
        "tags" : [ "service-document" ],
        "summary" : "Retrieves a ServiceDocumentDeleteTaskState.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve ServiceDocumentDeleteTaskState.",
        "operationId" : "getServiceDocumentDeleteTaskState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ServiceDocumentDeleteTaskState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the ServiceDocumentDeleteTaskState",
            "schema" : {
              "$ref" : "#/definitions/ServiceDocumentDeleteTaskState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ServiceDocumentDeleteTaskState with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "service-document" ],
        "summary" : "Updates a ServiceDocumentDeleteTaskState.",
        "description" : "Only Solution users, Container admins, and System admins can update ServiceDocumentDeleteTaskState.",
        "operationId" : "updateServiceDocumentDeleteTaskState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ServiceDocumentDeleteTaskState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ServiceDocumentDeleteTaskState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ServiceDocumentDeleteTaskState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the ServiceDocumentDeleteTaskState is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "service-document" ],
        "summary" : "Deletes a ServiceDocumentDeleteTaskState.",
        "description" : "Only Solution users, Container admins, and System admins can delete ServiceDocumentDeleteTaskState.",
        "operationId" : "deleteServiceDocumentDeleteTaskState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a ServiceDocumentDeleteTaskState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "service-document" ],
        "summary" : "Patches a ServiceDocumentDeleteTaskState.",
        "description" : "Only Solution users, Container admins, and System admins can patch ServiceDocumentDeleteTaskState.",
        "operationId" : "patchServiceDocumentDeleteTaskState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ServiceDocumentDeleteTaskState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the ServiceDocumentDeleteTaskState",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ServiceDocumentDeleteTaskState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/groups" : {
      "get" : {
        "tags" : [ "business-groups" ],
        "summary" : "Retrieves all Business Group and Tenant infos from the identity-service and transformed in group property.",
        "description" : "Only Solution users, Container admins, and System admins can list Tenant info.",
        "operationId" : "GroupTenantController.list",
        "parameters" : [ {
          "name" : "tenantid",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/labelledReference"
              }
            }
          }
        }
      }
    },
    "/api/groups/{tenantLink}/**" : {
      "get" : {
        "tags" : [ "business-groups" ],
        "summary" : "Retrieves the Business Group and Tenant info from the identity-service and transformed in group property.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve Tenant info.",
        "operationId" : "GroupTenantController.get",
        "parameters" : [ {
          "name" : "tenantLink",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/labelledReference"
            }
          }
        }
      }
    },
    "/api/provisioning/image-enumeration-tasks" : {
      "get" : {
        "tags" : [ "images" ],
        "summary" : "Retrieves all ImageEnumerationTaskState.",
        "description" : "Only Solution users, Container admins, and System admins can list ImageEnumerationTaskState.",
        "operationId" : "listImageEnumerationTaskState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageImageEnumerationTaskState"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "images" ],
        "summary" : "Creates a ImageEnumerationTaskState.",
        "description" : "Only Solution users, Container admins, and System admins can create ImageEnumerationTaskState.",
        "operationId" : "createImageEnumerationTaskState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ImageEnumerationTaskState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ImageEnumerationTaskState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/provisioning/image-enumeration-tasks/{id}" : {
      "get" : {
        "tags" : [ "images" ],
        "summary" : "Retrieves a ImageEnumerationTaskState.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve ImageEnumerationTaskState.",
        "operationId" : "getImageEnumerationTaskState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ImageEnumerationTaskState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the ImageEnumerationTaskState",
            "schema" : {
              "$ref" : "#/definitions/ImageEnumerationTaskState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ImageEnumerationTaskState with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "images" ],
        "summary" : "Updates a ImageEnumerationTaskState.",
        "description" : "Only Solution users, Container admins, and System admins can update ImageEnumerationTaskState.",
        "operationId" : "updateImageEnumerationTaskState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ImageEnumerationTaskState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ImageEnumerationTaskState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ImageEnumerationTaskState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the ImageEnumerationTaskState is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "images" ],
        "summary" : "Deletes a ImageEnumerationTaskState.",
        "description" : "Only Solution users, Container admins, and System admins can delete ImageEnumerationTaskState.",
        "operationId" : "deleteImageEnumerationTaskState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a ImageEnumerationTaskState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      }
    },
    "/api/request-status" : {
      "get" : {
        "tags" : [ "request-status" ],
        "summary" : "Retrieves all ContainerRequestStatuss.",
        "description" : "Only Solution users, Container admins, and System admins can list ContainerRequestStatuss.",
        "operationId" : "listContainerRequestStatus",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageContainerRequestStatus"
            }
          }
        }
      }
    },
    "/api/request-status/{id}" : {
      "get" : {
        "tags" : [ "request-status" ],
        "summary" : "Retrieves a ContainerRequestStatus.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve ContainerRequestStatuss.",
        "operationId" : "getContainerRequestStatus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ContainerRequestStatus",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the ContainerRequestStatus",
            "schema" : {
              "$ref" : "#/definitions/ContainerRequestStatus"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ContainerRequestStatus with provided <code>id</code>"
          }
        }
      },
      "delete" : {
        "tags" : [ "request-status" ],
        "summary" : "Deletes a ContainerRequestStatus.",
        "description" : "Only Solution users, Container admins, and System admins can delete ContainerRequestStatuss.",
        "operationId" : "deleteContainerRequestStatus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a ContainerRequestStatus",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "request-status" ],
        "summary" : "Patches a ContainerRequestStatus.",
        "description" : "Only Solution users, Container admins, and System admins can patch ContainerRequestStatuss.",
        "operationId" : "patchContainerRequestStatus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ContainerRequestStatus",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the ContainerRequestStatus",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContainerRequestStatus"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/requests" : {
      "get" : {
        "tags" : [ "requests" ],
        "summary" : "Retrieves all RequestBrokerStates.",
        "description" : "Only Solution users, Container admins, and System admins can list RequestBrokerStates.",
        "operationId" : "listRequestBrokerState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageRequestBrokerState"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "requests" ],
        "summary" : "Creates a RequestBrokerState.",
        "description" : "Only Solution users, Container admins, and System admins can create RequestBrokerStates.",
        "operationId" : "createRequestBrokerState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RequestBrokerState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RequestBrokerState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/requests/{id}" : {
      "get" : {
        "tags" : [ "requests" ],
        "summary" : "Retrieves a RequestBrokerState.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve RequestBrokerStates.",
        "operationId" : "getRequestBrokerState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the RequestBrokerState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the RequestBrokerState",
            "schema" : {
              "$ref" : "#/definitions/RequestBrokerState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no RequestBrokerState with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "requests" ],
        "summary" : "Updates a RequestBrokerState.",
        "description" : "Only Solution users, Container admins, and System admins can update RequestBrokerStates.",
        "operationId" : "updateRequestBrokerState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the RequestBrokerState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The RequestBrokerState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RequestBrokerState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the RequestBrokerState is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "requests" ],
        "summary" : "Deletes a RequestBrokerState.",
        "description" : "Only Solution users, Container admins, and System admins can delete RequestBrokerStates.",
        "operationId" : "deleteRequestBrokerState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a RequestBrokerState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "requests" ],
        "summary" : "Patches a RequestBrokerState.",
        "description" : "Only Solution users, Container admins, and System admins can patch RequestBrokerStates.",
        "operationId" : "patchRequestBrokerState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the RequestBrokerState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the RequestBrokerState",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RequestBrokerState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/closure-descriptions" : {
      "get" : {
        "tags" : [ "closures" ],
        "summary" : "Retrieves all ClosureDescriptions.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can list ClosureDescriptions.",
        "operationId" : "listClosureDescription",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageClosureDescription"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "closures" ],
        "summary" : "Creates a ClosureDescription.",
        "description" : "Only Solution users, Container admins, and System admins can create ClosureDescriptions.",
        "operationId" : "createClosureDescription",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ClosureDescription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ClosureDescription"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/closure-descriptions/{id}" : {
      "get" : {
        "tags" : [ "closures" ],
        "summary" : "Retrieves a ClosureDescription.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can retrieve ClosureDescription.",
        "operationId" : "getClosureDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ClosureDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the ClosureDescription",
            "schema" : {
              "$ref" : "#/definitions/ClosureDescription"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ClosureDescription with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "closures" ],
        "summary" : "Updates a ClosureDescription.",
        "description" : "Only Solution users, Container admins, and System admins can update ClosureDescriptions.",
        "operationId" : "updateClosureDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ClosureDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ClosureContainerDescription to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ClosureDescription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the ClosureDescription is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "closures" ],
        "summary" : "Deletes a ClosureDescription.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can delete ClosureDescriptions.",
        "operationId" : "deleteClosureDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a ClosureDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "closures" ],
        "summary" : "Patches a ClosureDescription.",
        "description" : "Only Solution users, Container admins, and System admins can patch ClosureDescriptions.",
        "operationId" : "patchClosureDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ClosureDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the ClosureDescription",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ClosureDescription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/closures" : {
      "get" : {
        "tags" : [ "closures" ],
        "summary" : "Retrieves all ClosureStates.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can list ClosureStates.",
        "operationId" : "listClosureState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageClosureState"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "closures" ],
        "summary" : "Creates a ClosureState.",
        "description" : "Only Solution users, Container admins, and System admins can create ClosureStates.",
        "operationId" : "createClosureState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ClosureState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ClosureState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/closures/{id}" : {
      "get" : {
        "tags" : [ "closures" ],
        "summary" : "Retrieves a ClosureState.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can retrieve ClosureStates.",
        "operationId" : "getClosureState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ClosureState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the ClosureState",
            "schema" : {
              "$ref" : "#/definitions/ClosureState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ClosureState with provided <code>id</code>"
          }
        }
      },
      "post" : {
        "tags" : [ "closures" ],
        "summary" : "Runs a Closure.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can retrieve ClosureStates.",
        "operationId" : "runClosure",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ClosureState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ClosureState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ClosureState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the Closure Run",
            "schema" : {
              "$ref" : "#/definitions/ClosureState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ClosureState with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "closures" ],
        "summary" : "Updates a ClosureState.",
        "description" : "Only Solution users, Container admins, and System admins can update ClosureStates.",
        "operationId" : "updateClosureState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ClosureState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ClosureState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ClosureState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the ClosureState is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "closures" ],
        "summary" : "Deletes a ClosureState.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can delete ClosureStates.",
        "operationId" : "deleteClosureState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a ClosureState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "closures" ],
        "summary" : "Patches a ClosureState.",
        "description" : "Only Solution users, Container admins, and System admins can patch ClosureStates.",
        "operationId" : "patchClosureState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ClosureState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the ClosureState",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ClosureState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/composite-components" : {
      "get" : {
        "tags" : [ "composite" ],
        "summary" : "Retrieves all CompositeComponents.",
        "description" : "Only Solution users, Container admins, and System admins can list CompositeComponents.",
        "operationId" : "listCompositeComponent",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageCompositeComponent"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "composite" ],
        "summary" : "Creates a CompositeComponent.",
        "description" : "Only Solution users, Container admins, and System admins can create CompositeComponents.",
        "operationId" : "createCompositeComponent",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CompositeComponent"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CompositeComponent"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/composite-components/{id}" : {
      "get" : {
        "tags" : [ "composite" ],
        "summary" : "Retrieves a CompositeComponent.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve CompositeComponents.",
        "operationId" : "getCompositeComponent",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the CompositeComponent",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the CompositeComponent",
            "schema" : {
              "$ref" : "#/definitions/CompositeComponent"
            }
          },
          "404" : {
            "description" : "'Not Found' if no CompositeComponent with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "composite" ],
        "summary" : "Updates a CompositeComponent.",
        "description" : "Only Solution users, Container admins, and System admins can update CompositeComponents.",
        "operationId" : "updateCompositeComponent",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the CompositeComponent",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The CompositeComponent to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CompositeComponent"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the CompositeComponent is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "composite" ],
        "summary" : "Deletes a CompositeComponent.",
        "description" : "Only Solution users, Container admins, and System admins can delete CompositeComponents.",
        "operationId" : "deleteCompositeComponent",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a CompositeComponent",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "composite" ],
        "summary" : "Patches a CompositeComponent.",
        "description" : "Only Solution users, Container admins, and System admins can patch CompositeComponents.",
        "operationId" : "patchCompositeComponent",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the CompositeComponent",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the CompositeComponent",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CompositeComponent"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/composite-descriptions" : {
      "get" : {
        "tags" : [ "composite" ],
        "summary" : "Retrieves all CompositeDescriptions.",
        "description" : "Only Solution users, Container admins, and System admins can list CompositeDescriptions.",
        "operationId" : "listCompositeDescription",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageCompositeDescription"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "composite" ],
        "summary" : "Creates a CompositeDescription.",
        "description" : "Only Solution users, Container admins, and System admins can create CompositeDescriptions.",
        "operationId" : "createCompositeDescription",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CompositeDescription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CompositeDescription"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/composite-descriptions-clone" : {
      "post" : {
        "tags" : [ "composite" ],
        "summary" : "Creates a clone of the CompositeDescription.",
        "description" : "Only Solution users, Container admins, and System admins can clone a CompositeDescriptions.",
        "operationId" : "cloneCompositeDescription",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CompositeDescription"
          }
        }, {
          "name" : "",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CompositeDescription"
            }
          },
          "201" : {
            "description" : "'Created' is returned when cloning of the composite description is successfull"
          }
        }
      }
    },
    "/api/resources/composite-descriptions/{id}" : {
      "get" : {
        "tags" : [ "composite" ],
        "summary" : "Retrieves a CompositeDescription or the images of it's descriptions as CompositeDescriptionImages.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve CompositeDescription.",
        "operationId" : "getCompositeDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the CompositeDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "name" : "",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the CompositeDescription or CompositeDescriptionImages",
            "schema" : {
              "type" : "object"
            }
          },
          "404" : {
            "description" : "'Not Found' if no CompositeDescription with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "composite" ],
        "summary" : "Updates a CompositeDescription.",
        "description" : "Only Solution users, Container admins, and System admins can update CompositeDescription.",
        "operationId" : "updateCompositeDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the CompositeDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The CompositeDescription to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CompositeDescription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the CompositeDescription is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "composite" ],
        "summary" : "Deletes a CompositeDescription.",
        "description" : "Only Solution users, Container admins, and System admins can delete CompositeDescriptions.",
        "operationId" : "deleteCompositeDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a CompositeDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "composite" ],
        "summary" : "Patches a CompositeDescription.",
        "description" : "Only Solution users, Container admins, and System admins can patch CompositeDescription.",
        "operationId" : "patchCompositeDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the CompositeDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the CompositeDescription",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CompositeDescription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/composite-templates" : {
      "get" : {
        "tags" : [ "composite" ],
        "summary" : "Exports the Composite Description in YAML format.",
        "description" : "Solution users, System admins, Container admins, and Container architects can export a CompositeDescription.",
        "operationId" : "exportCompositeDescription",
        "parameters" : [ {
          "name" : "selfLink",
          "in" : "query",
          "description" : "The id of the CompositeDescription",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "",
          "in" : "query",
          "description" : "The format of the CompositeDescription exported content, as Docker Compose (DOCKER) or Composite Template (COMPOSITE)",
          "required" : false,
          "type" : "string",
          "default" : "COMPOSITE"
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when exporting the composite description is successful"
          }
        }
      },
      "post" : {
        "tags" : [ "composite" ],
        "summary" : "Imports the YAML content as a Composite Description.",
        "description" : "Solution users, System admins, Container admins, and Container architects can import a CompositeDescription.",
        "operationId" : "importCompositeDescription",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "YAML content to import as a Composite Description",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/HttpEntityString"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          },
          "201" : {
            "description" : "'Created' is returned when importing of the YAML is successful with the Composite Description relative URI in the <code>location</code> header of the response"
          }
        }
      }
    },
    "/api/resources/compute" : {
      "get" : {
        "tags" : [ "compute-management" ],
        "summary" : "Retrieves all ComputeStates.",
        "description" : "Only Solution users, Container admins, and System admins can list ComputeStates.",
        "operationId" : "listComputeState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageComputeState"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "compute-management" ],
        "summary" : "Creates a ComputeState.",
        "description" : "Only Solution users, Container admins, and System admins can create ComputeStates.",
        "operationId" : "createComputeState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ComputeState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ComputeState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/compute-descriptions" : {
      "get" : {
        "tags" : [ "compute" ],
        "summary" : "Retrieves all ComputeDescriptions.",
        "description" : "Only Solution users, Container admins, and System admins can list ComputeDescriptions.",
        "operationId" : "listComputeDescription",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageComputeDescription"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "compute" ],
        "summary" : "Creates a ComputeDescription.",
        "description" : "Only Solution users, Container admins, and System admins can create ComputeDescriptions.",
        "operationId" : "createComputeDescription",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ComputeDescription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ComputeDescription"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/compute-descriptions/{id}" : {
      "get" : {
        "tags" : [ "compute" ],
        "summary" : "Retrieves a ComputeDescription.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve ComputeDescriptions.",
        "operationId" : "getComputeDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ComputeDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the ComputeDescription",
            "schema" : {
              "$ref" : "#/definitions/ComputeDescription"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ComputeDescription with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "compute" ],
        "summary" : "Updates a ComputeDescription.",
        "description" : "Only Solution users, Container admins, and System admins can update ComputeDescriptions.",
        "operationId" : "updateComputeDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ComputeDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ComputeDescription to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ComputeDescription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the ComputeDescription is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "compute" ],
        "summary" : "Deletes a ComputeDescription.",
        "description" : "Only Solution users, Container admins, and System admins can delete ComputeDescriptions.",
        "operationId" : "deleteComputeDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a ComputeDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "compute" ],
        "summary" : "Patches a ComputeDescription.",
        "description" : "Only Solution users, Container admins, and System admins can patch ComputeDescriptions.",
        "operationId" : "patchComputeDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ComputeDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the ComputeDescription",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ComputeDescription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/compute-network-descriptions" : {
      "get" : {
        "tags" : [ "compute-management" ],
        "summary" : "Retrieves all ComputeNetworkDescriptions.",
        "description" : "Only Solution users, Compute admins, and System admins can list ComputeNetworkDescriptions.",
        "operationId" : "listComputeNetworkDescriptions",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageComputeNetworkDescription"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "compute-management" ],
        "summary" : "Creates a ComputeNetworkDescription.",
        "description" : "Only Solution users, Compute admins, and System admins can create ComputeNetworkDescriptions.",
        "operationId" : "createComputeNetworkDescription",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ComputeNetworkDescription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ComputeNetworkDescription"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/compute-network-descriptions/{id}" : {
      "get" : {
        "tags" : [ "compute-management" ],
        "summary" : "Retrieves a ComputeNetworkDescription.",
        "description" : "Only Solution users, Compute admins, and System admins can retrieve ComputeNetworkDescriptions.",
        "operationId" : "getComputeNetworkDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ComputeNetworkDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the ComputeNetworkDescription",
            "schema" : {
              "$ref" : "#/definitions/ComputeNetworkDescription"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ComputeNetworkDescription with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "compute-management" ],
        "summary" : "Updates a ComputeNetworkDescription.",
        "description" : "Only Solution users, Compute admins, and System admins can update ComputeNetworkDescriptions.",
        "operationId" : "updateComputeNetworkDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ComputeDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ComputeNetworkDescription to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ComputeNetworkDescription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the ComputeNetworkDescription is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "compute-management" ],
        "summary" : "Deletes a ComputeNetworkDescription.",
        "description" : "Only Solution users, Compute admins, and System admins can delete ComputeNetworkDescriptions.",
        "operationId" : "deleteComputeNetworkDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a ComputeNetworkDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "compute-management" ],
        "summary" : "Patches a ComputeNetworkDescription.",
        "description" : "Only Solution users, Compute admins, and System admins can patch ComputeNetworkDescriptions.",
        "operationId" : "patchComputeNetworkDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ComputeDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the ComputeDescription",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ComputeNetworkDescription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/compute-networks" : {
      "get" : {
        "tags" : [ "compute" ],
        "summary" : "Retrieves all ComputeNetworks.",
        "description" : "Only Solution users, Compute admins, and System admins can list ComputeNetworks.",
        "operationId" : "listComputeNetworks",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageComputeNetwork"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "compute" ],
        "summary" : "Creates a ComputeNetwork.",
        "description" : "Only Solution users, Compute admins, and System admins can create ComputeNetworks.",
        "operationId" : "createComputeNetwork",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ComputeNetwork"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ComputeNetwork"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/compute-networks/{id}" : {
      "get" : {
        "tags" : [ "compute" ],
        "summary" : "Retrieves a ComputeNetwork.",
        "description" : "Solution users, System admins, Compute admins, and Compute architects can retrieve ComputeNetworks.",
        "operationId" : "getComputeNetwork",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ComputeNetwork",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the ComputeNetwork",
            "schema" : {
              "$ref" : "#/definitions/ComputeNetwork"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ComputeNetwork with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "compute" ],
        "summary" : "Updates a ComputeNetwork.",
        "description" : "Only Solution users, Compute admins, and System admins can update ComputeNetworks.",
        "operationId" : "updateComputeNetwork",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ComputeNetwork",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ComputeNetwork to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ComputeNetwork"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the ComputeNetwork is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "compute" ],
        "summary" : "Deletes a ComputeNetwork.",
        "description" : "Only Solution users, Compute admins, and System admins can delete ComputeNetwork.",
        "operationId" : "deleteComputeNetwork",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a ComputeNetwork",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "compute" ],
        "summary" : "Patches a ComputeNetwork.",
        "description" : "Only Solution users, Compute admins, and System admins can patch ComputeNetwork.",
        "operationId" : "patchComputeNetwork",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ComputeNetwork",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the ComputeNetwork",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ComputeNetwork"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/compute-search" : {
      "get" : {
        "tags" : [ "compute-management" ],
        "summary" : "Retrieves all ComputeStates.",
        "description" : "Only Solution users, Container admins, and System admins can list ComputeStates.",
        "operationId" : "listComputeState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageComputeState"
            }
          }
        }
      }
    },
    "/api/resources/compute/{id}" : {
      "get" : {
        "tags" : [ "compute-management" ],
        "summary" : "Retrieves a ComputeState.",
        "description" : "Solution users, System admins, Container admins, and Container architects can retrieve ComputeStates.",
        "operationId" : "getComputeState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ComputeState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the ComputeState",
            "schema" : {
              "$ref" : "#/definitions/ComputeState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ComputeState with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "compute-management" ],
        "summary" : "Updates a ComputeState.",
        "description" : "Only Solution users, Container admins, and System admins can update ComputeStates.",
        "operationId" : "updateComputeState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ComputeState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ComputeState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ComputeState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the ComputeState is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "compute-management" ],
        "summary" : "Deletes a ComputeState.",
        "description" : "Only Solution users, Container admins, and System admins can delete ComputeStates.",
        "operationId" : "deleteComputeState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a ComputeState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "compute-management" ],
        "summary" : "Patches a ComputeState.",
        "description" : "Only Solution users, Container admins, and System admins can patch ComputeStates.",
        "operationId" : "patchComputeState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ComputeState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the ComputeState",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ComputeState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/container-descriptions" : {
      "get" : {
        "tags" : [ "container" ],
        "summary" : "Retrieves all ContainerDescriptions.",
        "description" : "Only Solution users, Container admins, and System admins can list ContainerDescriptions.",
        "operationId" : "listContainerDescription",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageContainerDescription"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "container" ],
        "summary" : "Creates a ContainerDescription.",
        "description" : "Only Solution users, Container admins, and System admins can create ContainerDescriptions.",
        "operationId" : "createContainerDescription",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContainerDescription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ContainerDescription"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/container-descriptions/{id}" : {
      "get" : {
        "tags" : [ "container" ],
        "summary" : "Retrieves a ContainerDescription.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve ContainerDescriptions.",
        "operationId" : "getContainerDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ContainerDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the ContainerDescription",
            "schema" : {
              "$ref" : "#/definitions/ContainerDescription"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ContainerDescription with provided <code>id</code>"
          }
        }
      },
      "post" : {
        "tags" : [ "container" ],
        "summary" : "Publishes a container description to catalog.",
        "description" : "Only Solution users, Container admins, and System admins can publush ContainerDescriptions.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the container description",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "201" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "'Not Found' if no container description with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "container" ],
        "summary" : "Updates a ContainerDescription.",
        "description" : "Only Solution users, Container admins, and System admins can update ContainerDescriptions.",
        "operationId" : "updateContainerDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ContainerDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ContainerDescription to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContainerDescription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the ContainerDescription is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "container" ],
        "summary" : "Deletes a ContainerDescription.",
        "description" : "Only Solution users, Container admins, and System admins can delete ContainerDescriptions.",
        "operationId" : "deleteContainerDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a ContainerDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "container" ],
        "summary" : "Patches a ContainerDescription.",
        "description" : "Only Solution users, Container admins, and System admins can patch ContainerDescriptions.",
        "operationId" : "patchContainerDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ContainerDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the ContainerDescription",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContainerDescription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/container-logs" : {
      "get" : {
        "tags" : [ "log" ],
        "summary" : "Retrieves a LogServiceState.",
        "description" : "Solution users, System admins, Container admins, and Container architects can get LogServiceState.",
        "operationId" : "getLogServiceState",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "description" : "The id of the LogServiceState.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the LogServiceState",
            "schema" : {
              "$ref" : "#/definitions/LogServiceState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no LogServiceState with provided <code>id</code>"
          }
        }
      }
    },
    "/api/resources/container-network-descriptions" : {
      "get" : {
        "tags" : [ "container" ],
        "summary" : "Retrieves all ContainerNetworkDescriptions.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can list ContainerNetworkDescriptions.",
        "operationId" : "listContainerNetworkDescription",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageContainerNetworkDescription"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "container" ],
        "summary" : "Creates a ContainerNetworkDescription.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can create ContainerNetworkDescriptions.",
        "operationId" : "createContainerNetworkDescription",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContainerNetworkDescription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ContainerNetworkDescription"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/container-network-descriptions/{id}" : {
      "get" : {
        "tags" : [ "container" ],
        "summary" : "Retrieves a ContainerNetworkDescription.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can retrieve ContainerNetworkDescriptions.",
        "operationId" : "getContainerNetworkDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ContainerNetworkDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the ContainerNetworkDescription",
            "schema" : {
              "$ref" : "#/definitions/ContainerNetworkDescription"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ContainerNetworkDescription with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "container" ],
        "summary" : "Updates a ContainerNetworkDescription.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can update ContainerNetworkDescriptions.",
        "operationId" : "updateContainerNetworkDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ContainerNetworkDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ContainerNetworkDescription to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContainerNetworkDescription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the ContainerNetworkDescription is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "container" ],
        "summary" : "Deletes a ContainerNetworkDescription.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can delete ContainerNetworkDescriptions.",
        "operationId" : "deleteContainerNetworkDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a ContainerNetworkDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "container" ],
        "summary" : "Patches a ContainerNetworkDescription.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can patch ContainerNetworkDescriptions.",
        "operationId" : "patchContainerNetworkDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ContainerNetworkDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the ContainerNetworkDescription",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContainerNetworkDescription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/container-networks" : {
      "get" : {
        "tags" : [ "container" ],
        "summary" : "Retrieves all ContainerNetworkStates.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can list ContainerNetworkStates.",
        "operationId" : "listContainerNetworkState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageContainerNetworkState"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "container" ],
        "summary" : "Creates a ContainerNetworkState.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can create ContainerNetworkStates.",
        "operationId" : "createContainerNetworkState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContainerNetworkState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ContainerNetworkState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/container-networks/{id}" : {
      "get" : {
        "tags" : [ "container" ],
        "summary" : "Retrieves a ContainerNetworkState.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can retrieve ContainerNetworkStates.",
        "operationId" : "getContainerNetworkState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ContainerNetworkState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the ContainerNetworkState",
            "schema" : {
              "$ref" : "#/definitions/ContainerNetworkState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ContainerNetworkState with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "container" ],
        "summary" : "Updates a ContainerNetworkState.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can update ContainerNetworkStates.",
        "operationId" : "updateContainerNetworkState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ContainerNetworkState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ContainerNetworkState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContainerNetworkState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the ContainerNetworkState is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "container" ],
        "summary" : "Deletes a ContainerNetworkState.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can delete ContainerNetworkStates.",
        "operationId" : "deleteContainerNetworkState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a ContainerNetworkState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "container" ],
        "summary" : "Patches a ContainerNetworkState.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can patch ContainerNetworkStates.",
        "operationId" : "patchContainerNetworkState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ContainerNetworkState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the ContainerNetworkState",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContainerNetworkState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/container-networks/{id}/manage" : {
      "get" : {
        "tags" : [ "container" ],
        "summary" : "Retrieves a catalog item related to the container item.",
        "description" : "",
        "operationId" : "getCatalogResourceItem",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the CatalogResource",
            "schema" : {
              "$ref" : "#/definitions/catalogResource"
            }
          },
          "404" : {
            "description" : "'Not Found' if no CatalogResourceItem with provided <code>id</code>"
          }
        }
      }
    },
    "/api/resources/container-stats" : {
      "get" : {
        "tags" : [ "container" ],
        "summary" : "Retrieves a ServiceStats for container instance.",
        "description" : "Solution users, System admins, Container admins, and Container architects can get ContainerStats.",
        "operationId" : "getContainerStats",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "description" : "The id of the ContainerState.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the ServiceStats",
            "schema" : {
              "$ref" : "#/definitions/ServiceStats"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ContainerState with provided <code>id</code>"
          }
        }
      }
    },
    "/api/resources/container-volume-descriptions" : {
      "get" : {
        "tags" : [ "container" ],
        "summary" : "Retrieves all ContainerVolumeDescriptions.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can list ContainerVolumeDescriptions.",
        "operationId" : "listContainerVolumeDescription",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageContainerVolumeDescription"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "container" ],
        "summary" : "Creates a ContainerVolumeDescription.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can create ContainerVolumeDescriptions.",
        "operationId" : "createContainerVolumeDescription",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContainerVolumeDescription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ContainerVolumeDescription"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/container-volume-descriptions/{name}" : {
      "get" : {
        "tags" : [ "container" ],
        "summary" : "Retrieves a ContainerVolumeDescription.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can retrieve ContainerVolumeDescriptions.",
        "operationId" : "getContainerVolumeDescription",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the ContainerVolumeDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the ContainerVolumeDescription",
            "schema" : {
              "$ref" : "#/definitions/ContainerVolumeDescription"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ContainerVolumeDescription with provided <code> name</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "container" ],
        "summary" : "Updates a ContainerVolumeDescription.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can update ContainerVolumeDescription.",
        "operationId" : "updateContainerVolumeDescription",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the ContainerVolumeDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ContainerVolumeDescription to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContainerVolumeDescription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the ContainerVolumeDescription is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "container" ],
        "summary" : "Deletes a ContainerVolumeDescription.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can delete ContainerVolumeDescription.",
        "operationId" : "deleteContainerVolumeDescription",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of a ContainerVolumeDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "container" ],
        "summary" : "Patches a ContainerVolumeDescription.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can patch ContainerVolumeDescription.",
        "operationId" : "patchContainerVolumeDescription",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the ContainerVolumeDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the ContainerVolumeDescription",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContainerVolumeDescription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/container-volumes" : {
      "get" : {
        "tags" : [ "container" ],
        "summary" : "Retrieves all ContainerVolumeState.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can list ContainerVolumeStates.",
        "operationId" : "listContainerVolumeState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageContainerVolumeState"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "container" ],
        "summary" : "Creates a ContainerVolumeState.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can create ContainerVolumeStates.",
        "operationId" : "createContainerVolumeState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContainerVolumeState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ContainerVolumeState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/container-volumes/{id}/manage" : {
      "get" : {
        "tags" : [ "container" ],
        "summary" : "Retrieves a catalog item related to the container item.",
        "description" : "",
        "operationId" : "getCatalogResourceItem",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the CatalogResource",
            "schema" : {
              "$ref" : "#/definitions/catalogResource"
            }
          },
          "404" : {
            "description" : "'Not Found' if no CatalogResourceItem with provided <code>id</code>"
          }
        }
      }
    },
    "/api/resources/container-volumes/{name}" : {
      "get" : {
        "tags" : [ "container" ],
        "summary" : "Retrieves a ContainerVolumeState.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can retrieve ContainerVolumeStates.",
        "operationId" : "getContainerVolumeState",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The id of the ContainerVolumeState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the ContainerVolumeState",
            "schema" : {
              "$ref" : "#/definitions/ContainerVolumeState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ContainerVolumeState with provided <code>name</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "container" ],
        "summary" : "Updates a ContainerVolumeState.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can update ContainerVolumeStates.",
        "operationId" : "updateContainerVolumeState",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The id of the ContainerVolumeState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ContainerVolumeState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContainerVolumeState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the ContainerVolumeState is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "container" ],
        "summary" : "Deletes a ContainerVolumeState.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can delete ContainerVolumeStates.",
        "operationId" : "deleteContainerVolumeState",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The id of a ContainerVolumeState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "container" ],
        "summary" : "Patches a ContainerVolumeState.",
        "description" : "Only Solution users, Container developers, Container admins, and System admins can patch ContainerVolumeStates.",
        "operationId" : "patchContainerVolumeState",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The id of the ContainerVolumeState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the ContainerVolumeState",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContainerVolumeState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/containers" : {
      "get" : {
        "tags" : [ "container" ],
        "summary" : "Retrieves all ContainerStates.",
        "description" : "Only Solution users, Container admins, and System admins can list ContainerStates.",
        "operationId" : "listContainerState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageContainerState"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "container" ],
        "summary" : "Creates a ContainerState.",
        "description" : "Only Solution users, Container admins, and System admins can create ContainerStates.",
        "operationId" : "createContainerState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContainerState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ContainerState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/containers/{id}" : {
      "get" : {
        "tags" : [ "container" ],
        "summary" : "Retrieves a ContainerState.",
        "description" : "",
        "operationId" : "getContainerState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the ContainerState",
            "schema" : {
              "$ref" : "#/definitions/ContainerState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ContainerState with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "container" ],
        "summary" : "Updates a ContainerState.",
        "description" : "Only Solution users, Container admins, and System admins can update ContainerStates.",
        "operationId" : "updateContainerState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ContainerState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ContainerState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContainerState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the ContainerState is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "container" ],
        "summary" : "Deletes a ContainerState.",
        "description" : "Only Solution users, Container admins, and System admins can delete ContainerStates.",
        "operationId" : "deleteContainerState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a ContainerState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "container" ],
        "summary" : "Patches a ContainerState.",
        "description" : "Only Solution users, Container admins, and System admins can patch ContainerStates.",
        "operationId" : "patchContainerState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ContainerState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the ContainerState",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContainerState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/containers/{id}/manage" : {
      "get" : {
        "tags" : [ "container" ],
        "summary" : "Retrieves a catalog item related to the container item.",
        "description" : "",
        "operationId" : "getCatalogResourceItem",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the CatalogResource",
            "schema" : {
              "$ref" : "#/definitions/catalogResource"
            }
          },
          "404" : {
            "description" : "'Not Found' if no CatalogResourceItem with provided <code>id</code>"
          }
        }
      }
    },
    "/api/resources/containers/{id}/stats" : {
      "get" : {
        "tags" : [ "container" ],
        "summary" : "Use ContainerStats endpoint (resources/container-stats) for getting the stats of a container.",
        "description" : "",
        "operationId" : "getContainerStats",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the ServiceStats",
            "schema" : {
              "$ref" : "#/definitions/ServiceStats"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ContainerState with provided <code>id</code>"
          }
        },
        "deprecated" : true
      }
    },
    "/api/resources/deployment-policies" : {
      "get" : {
        "tags" : [ "deployment-policy" ],
        "summary" : "Retrieves all DeploymentPolicies.",
        "description" : "Only Solution users, Container admins, and System admins can list DeploymentPolicies.",
        "operationId" : "listDeploymentPolicies",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageDeploymentPolicy"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "deployment-policy" ],
        "summary" : "Creates a DeploymentPolicy.",
        "description" : "Only Solution users, Container admins, and System admins can create DeploymentPolicies.",
        "operationId" : "createDeploymentPolicy",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DeploymentPolicy"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DeploymentPolicy"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/deployment-policies/{id}" : {
      "get" : {
        "tags" : [ "deployment-policy" ],
        "summary" : "Retrieves a DeploymentPolicy.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve DeploymentPolicies.",
        "operationId" : "getDeploymentPolicy",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the DeploymentPolicy",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the DeploymentPolicy",
            "schema" : {
              "$ref" : "#/definitions/DeploymentPolicy"
            }
          },
          "404" : {
            "description" : "'Not Found' if no DeploymentPolicy with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "deployment-policy" ],
        "summary" : "Updates a DeploymentPolicy.",
        "description" : "Only Solution users, Container admins, and System admins can update DeploymentPolicies.",
        "operationId" : "updateDeploymentPolicy",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the DeploymentPolicy",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The DeploymentPolicy to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DeploymentPolicy"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the DeploymentPolicy is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "deployment-policy" ],
        "summary" : "Deletes a DeploymentPolicy.",
        "description" : "Only Solution users, Container admins, and System admins can delete DeploymentPolicies.",
        "operationId" : "deleteDeploymentPolicy",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a DeploymentPolicy",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "deployment-policy" ],
        "summary" : "Patches a DeploymentPolicy.",
        "description" : "Only Solution users, Container admins, and System admins can patch DeploymentPolicies.",
        "operationId" : "patchDeploymentPolicy",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the DeploymentPolicy",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the DeploymentPolicy",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DeploymentPolicy"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/disks" : {
      "post" : {
        "tags" : [ "disk" ],
        "summary" : "Creates a ComputeDiskState.",
        "description" : "Only Solution users, Container admins, and System admins can create DiskStates.",
        "operationId" : "createDiskState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ComputeDiskState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ComputeDiskState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/disks/{id}" : {
      "get" : {
        "tags" : [ "disk" ],
        "summary" : "Retrieves a DiskState.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve DiskState.",
        "operationId" : "getDiskState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the DiskState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the DiskState",
            "schema" : {
              "$ref" : "#/definitions/ComputeDiskState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no DiskState with provided <code>id</code>"
          }
        }
      }
    },
    "/api/resources/elastic-placement-zones" : {
      "get" : {
        "tags" : [ "elastic-placement-zone" ],
        "summary" : "Retrieves all ElasticPlacementZoneStates.",
        "description" : "Only Solution users, Container admins, and System admins can list ElasticPlacementZoneStates.",
        "operationId" : "listElasticPlacementZoneState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageElasticPlacementZoneState"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "elastic-placement-zone" ],
        "summary" : "Creates an ElasticPlacementZoneState.",
        "description" : "Only Solution users, Container admins, and System admins can create ElasticPlacementZoneStates.",
        "operationId" : "createElasticPlacementZoneState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ElasticPlacementZoneState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ElasticPlacementZoneState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/elastic-placement-zones-config" : {
      "get" : {
        "tags" : [ "elastic-placement-zone" ],
        "summary" : "Retrieves all ElasticPlacementZoneConfigurationStates.",
        "description" : "Only Solution users, Container admins, and System admins can list ElasticPlacementZoneConfigurationStates.",
        "operationId" : "listElasticPlacementZoneConfigurationState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageElasticPlacementZoneConfigurationState"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "elastic-placement-zone" ],
        "summary" : "Creates an ElasticPlacementZoneConfigurationState.",
        "description" : "Only Solution users, Container admins, and System admins can create ElasticPlacementZoneConfigurationStates.",
        "operationId" : "createElasticPlacementZoneConfigurationState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ElasticPlacementZoneConfigurationState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ElasticPlacementZoneConfigurationState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/elastic-placement-zones-config/resources/pools/{id}" : {
      "get" : {
        "tags" : [ "elastic-placement-zone" ],
        "summary" : "Retrieves an ElasticPlacementZoneConfigurationState.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve ElasticPlacementZoneConfigurationStates.",
        "operationId" : "getElasticPlacementZoneConfigurationState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ElasticPlacementZoneConfigurationState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the ElasticPlacementZoneConfigurationState",
            "schema" : {
              "$ref" : "#/definitions/ElasticPlacementZoneConfigurationState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ElasticPlacementZoneConfigurationState with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "elastic-placement-zone" ],
        "summary" : "Updates an ElasticPlacementZoneConfigurationState.",
        "description" : "Only Solution users, Container admins, and System admins can update ElasticPlacementZoneConfigurationStates.",
        "operationId" : "updateElasticPlacementZoneConfigurationState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ElasticPlacementZoneConfigurationState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ElasticPlacementZoneConfigurationState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ElasticPlacementZoneConfigurationState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the ElasticPlacementZoneConfigurationState is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "elastic-placement-zone" ],
        "summary" : "Deletes an ElasticPlacementZoneConfigurationState.",
        "description" : "Only Solution users, Container admins, and System admins can delete ElasticPlacementZoneConfigurationStates.",
        "operationId" : "deleteElasticPlacementZoneConfigurationState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a ElasticPlacementZoneConfigurationState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "elastic-placement-zone" ],
        "summary" : "Patches an ElasticPlacementZoneConfigurationState.",
        "description" : "Only Solution users, Container admins, and System admins can patch ElasticPlacementZoneConfigurationStates.",
        "operationId" : "patchElasticPlacementZoneConfigurationState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ElasticPlacementZoneConfigurationState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the ElasticPlacementZoneConfigurationState",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ElasticPlacementZoneConfigurationState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/elastic-placement-zones/{id}" : {
      "get" : {
        "tags" : [ "elastic-placement-zone" ],
        "summary" : "Retrieves an ElasticPlacementZoneState.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve ElasticPlacementZoneStates.",
        "operationId" : "getElasticPlacementZoneState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ElasticPlacementZoneState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the ElasticPlacementZoneState",
            "schema" : {
              "$ref" : "#/definitions/ElasticPlacementZoneState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ElasticPlacementZoneState with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "elastic-placement-zone" ],
        "summary" : "Updates an ElasticPlacementZoneState.",
        "description" : "Only Solution users, Container admins, and System admins can update ElasticPlacementZoneStates.",
        "operationId" : "updateElasticPlacementZoneState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ElasticPlacementZoneState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ElasticPlacementZoneState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ElasticPlacementZoneState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the ElasticPlacementZoneState is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "elastic-placement-zone" ],
        "summary" : "Deletes an ElasticPlacementZoneState.",
        "description" : "Only Solution users, Container admins, and System admins can delete ElasticPlacementZoneStates.",
        "operationId" : "deleteElasticPlacementZoneState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a ElasticPlacementZoneState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "elastic-placement-zone" ],
        "summary" : "Patches an ElasticPlacementZoneState.",
        "description" : "Only Solution users, Container admins, and System admins can patch ElasticPlacementZoneStates.",
        "operationId" : "patchElasticPlacementZoneState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ElasticPlacementZoneState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the ElasticPlacementZoneState",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ElasticPlacementZoneState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/endpoints" : {
      "get" : {
        "tags" : [ "endpoints" ],
        "summary" : "Retrieves all EndpointStates.",
        "description" : "Only Solution users, Container admins, and System admins can list EndpointStates.",
        "operationId" : "listEndpointState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageEndpointState"
            }
          }
        }
      }
    },
    "/api/resources/endpoints/{id}" : {
      "get" : {
        "tags" : [ "endpoints" ],
        "summary" : "Retrieves a EndpointState.",
        "description" : "Only Solution users, Container admins, and System admins can create EndpointStates.",
        "operationId" : "getEndpointState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the EndpointState",
            "schema" : {
              "$ref" : "#/definitions/EndpointState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no EndpointState with provided <code>id</code>"
          }
        }
      }
    },
    "/api/resources/event-logs" : {
      "get" : {
        "tags" : [ "events" ],
        "summary" : "Retrieves all EventLogStates.",
        "description" : "Only Solution users, Container admins, and System admins can list EventLogStates.",
        "operationId" : "listEventLogState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageEventLogState"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "events" ],
        "summary" : "Creates a EventLogState.",
        "description" : "Only Solution users, Container admins, and System admins can create EventLogStates.",
        "operationId" : "createEventLogState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EventLogState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/EventLogState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/event-logs/{id}" : {
      "get" : {
        "tags" : [ "events" ],
        "summary" : "Retrieves a EventLogState.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve EventLogStates.",
        "operationId" : "getEventLogState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the EventLogState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the EventLogState",
            "schema" : {
              "$ref" : "#/definitions/EventLogState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no EventLogState with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "events" ],
        "summary" : "Updates a EventLogState.",
        "description" : "Only Solution users, Container admins, and System admins can update EventLogStates.",
        "operationId" : "updateEventLogState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the EventLogState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The EventLogState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EventLogState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the EventLogState is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "events" ],
        "summary" : "Deletes a EventLogState.",
        "description" : "Only Solution users, Container admins, and System admins can delete EventLogStates.",
        "operationId" : "deleteEventLogState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a EventLogState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "events" ],
        "summary" : "Patches a EventLogState.",
        "description" : "Only Solution users, Container admins, and System admins can patch EventLogStates.",
        "operationId" : "patchEventLogState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the EventLogState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the EventLogState",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EventLogState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/group-placements" : {
      "get" : {
        "tags" : [ "placements" ],
        "summary" : "Retrieves all GroupResourcePlacementStates.",
        "description" : "Only Solution users, Container admins, and System admins can list GroupResourcePlacementStates.",
        "operationId" : "listGroupResourcePlacementState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageGroupResourcePlacementState"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "placements" ],
        "summary" : "Creates a GroupResourcePlacementState.",
        "description" : "Only Solution users, Container admins, and System admins can create GroupResourcePlacementStates.",
        "operationId" : "createGroupResourcePlacementState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GroupResourcePlacementState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GroupResourcePlacementState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/group-placements/{id}" : {
      "get" : {
        "tags" : [ "placements" ],
        "summary" : "Retrieves a GroupResourcePlacementState.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve GroupResourcePlacementStates.",
        "operationId" : "getGroupResourcePlacementState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the GroupResourcePlacementState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the GroupResourcePlacementState",
            "schema" : {
              "$ref" : "#/definitions/GroupResourcePlacementState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no GroupResourcePlacementState with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "placements" ],
        "summary" : "Updates a GroupResourcePlacementState.",
        "description" : "Only Solution users, Container admins, and System admins can update GroupResourcePlacementStates.",
        "operationId" : "updateGroupResourcePlacementState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the GroupResourcePlacementState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The GroupResourcePlacementState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GroupResourcePlacementState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the GroupResourcePlacementState is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "placements" ],
        "summary" : "Deletes a GroupResourcePlacementState.",
        "description" : "Only Solution users, Container admins, and System admins can delete GroupResourcePlacementStates.",
        "operationId" : "deleteGroupResourcePlacementState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a GroupResourcePlacementState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "placements" ],
        "summary" : "Patches a GroupResourcePlacementState.",
        "description" : "Only Solution users, Container admins, and System admins can patch GroupResourcePlacementStates.",
        "operationId" : "patchGroupResourcePlacementState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the GroupResourcePlacementState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the GroupResourcePlacementState",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GroupResourcePlacementState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/groups" : {
      "get" : {
        "tags" : [ "resource-group" ],
        "summary" : "Retrieves all ResourceGroupStates.",
        "description" : "Only Solution users, Container admins, and System admins can list ResourceGroupStates.",
        "operationId" : "listResourceGroupState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageResourceGroupState"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "resource-group" ],
        "summary" : "Creates a ResourceGroupState.",
        "description" : "Only Solution users, Container admins, and System admins can create ResourceGroupStates.",
        "operationId" : "createResourceGroupState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ResourceGroupState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResourceGroupState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/groups/{id}" : {
      "get" : {
        "tags" : [ "resource-group" ],
        "summary" : "Retrieves a ResourceGroupState.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve ResourceGroupStates.",
        "operationId" : "getResourceGroupState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ResourceGroupState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the ResourceGroupState",
            "schema" : {
              "$ref" : "#/definitions/ResourceGroupState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ResourceGroupState with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "resource-group" ],
        "summary" : "Updates a ResourceGroupState.",
        "description" : "Only Solution users, Container admins, and System admins can update ResourceGroupStates.",
        "operationId" : "updateResourceGroupState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ResourceGroupState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ResourceGroupState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ResourceGroupState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the ResourceGroupState is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "resource-group" ],
        "summary" : "Deletes a ResourceGroupState.",
        "description" : "Only Solution users, Container admins, and System admins can delete ResourceGroupStates.",
        "operationId" : "deleteResourceGroupState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a ResourceGroupState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "resource-group" ],
        "summary" : "Patches a ResourceGroupState.",
        "description" : "Only Solution users, Container admins, and System admins can patch ResourceGroupStates.",
        "operationId" : "patchResourceGroupState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ResourceGroupState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the ResourceGroupState",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ResourceGroupState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/hosts" : {
      "put" : {
        "tags" : [ "container" ],
        "summary" : "Helper method for adding and validating container hosts.",
        "description" : "Only Solution users, Container admins, and System admins can add or validate container hosts.",
        "operationId" : "updateContainerHostSpec",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The state for the container host to be created or validated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContainerHostSpec"
          }
        }, {
          "name" : "validate",
          "in" : "query",
          "description" : "Only validate container host.",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SslTrustCertificateState"
            }
          }
        }
      }
    },
    "/api/resources/image-search" : {
      "get" : {
        "tags" : [ "images" ],
        "summary" : "Retrieves all ImageStates.",
        "description" : "Only Solution users, Container admins, and System admins can list ImageStates.",
        "operationId" : "listImageState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageImageState"
            }
          }
        }
      }
    },
    "/api/resources/images" : {
      "get" : {
        "tags" : [ "images" ],
        "summary" : "Retrieves all ImageStates.",
        "description" : "Only Solution users, Container admins, and System admins can list ImageStates.",
        "operationId" : "listImageState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageImageState"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "images" ],
        "summary" : "Creates a ImageState.",
        "description" : "Only Solution users, Container admins, and System admins can create ImageStates.",
        "operationId" : "createImageState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ImageState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ImageState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/images/{id}" : {
      "get" : {
        "tags" : [ "images" ],
        "summary" : "Retrieves a ImageState.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve ImageState.",
        "operationId" : "getImageState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ImageState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the ImageState",
            "schema" : {
              "$ref" : "#/definitions/ImageState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ImageState with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "images" ],
        "summary" : "Updates a ImageState.",
        "description" : "Only Solution users, Container admins, and System admins can update ImageStates.",
        "operationId" : "updateImageState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ImageState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ImageState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ImageState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the ImageState is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "images" ],
        "summary" : "Deletes a ImageState.",
        "description" : "Only Solution users, Container admins, and System admins can delete ImageStates.",
        "operationId" : "deleteImageState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a ImageState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "images" ],
        "summary" : "Patches a ImageState.",
        "description" : "Only Solution users, Container admins, and System admins can patch ImageStates.",
        "operationId" : "patchImageState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ImageState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the ImageState",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ImageState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/network-interfaces" : {
      "get" : {
        "tags" : [ "network" ],
        "summary" : "Retrieves all NetworkInterfaceStates.",
        "description" : "Only Solution users, Container admins, and System admins can list NetworkInterfaceStates.",
        "operationId" : "listNetworkInterfaceState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageNetworkInterfaceState"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Creates a NetworkInterfaceState.",
        "description" : "Only Solution users, Container admins, and System admins can create NetworkInterfaceStates.",
        "operationId" : "createNetworkInterfaceState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NetworkInterfaceState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NetworkInterfaceState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/network-interfaces-descriptions" : {
      "get" : {
        "tags" : [ "network" ],
        "summary" : "Retrieves all NetworkInterfaceDescriptions.",
        "description" : "Only Solution users, Compute admins, and System admins can list NetworkInterfaceDescriptions.",
        "operationId" : "listNetworkInterfaceDescriptions",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageNetworkInterfaceDescription"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Creates a NetworkInterfaceDescription.",
        "description" : "Only Solution users, Compute admins, and System admins can create ComputeNetworkDescriptions.",
        "operationId" : "createNetworkInterfaceDescription",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NetworkInterfaceDescription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NetworkInterfaceDescription"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/network-interfaces-descriptions/{id}" : {
      "get" : {
        "tags" : [ "network" ],
        "summary" : "Retrieves a NetworkInterfaceDescription.",
        "description" : "Only Solution users, Compute admins, and System admins can retrieve NetworkInterfaceDescriptions.",
        "operationId" : "getNetworkInterfaceDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the NetworkInterfaceDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the NetworkInterfaceDescription",
            "schema" : {
              "$ref" : "#/definitions/NetworkInterfaceDescription"
            }
          },
          "404" : {
            "description" : "'Not Found' if no NetworkInterfaceDescription with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "network" ],
        "summary" : "Updates a ComputeNetworkDescription.",
        "description" : "Only Solution users, Compute admins, and System admins can update NetworkInterfaceDescriptions.",
        "operationId" : "updateNetworkInterfaceDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the NetworkInterfaceDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The NetworkInterfaceDescription to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NetworkInterfaceDescription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the NetworkInterfaceDescription is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "network" ],
        "summary" : "Deletes a NetworkInterfaceDescription.",
        "description" : "Only Solution users, Compute admins, and System admins can delete NetworkInterfaceDescriptions.",
        "operationId" : "deleteNetworkInterfaceDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a NetworkInterfaceDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "network" ],
        "summary" : "Patches a NetworkInterfaceDescription.",
        "description" : "Only Solution users, Compute admins, and System admins can patch NetworkInterfaceDescriptions.",
        "operationId" : "patchNetworkInterfaceDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the NetworkInterfaceDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the NetworkInterfaceDescription",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NetworkInterfaceDescription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/network-interfaces/{id}" : {
      "get" : {
        "tags" : [ "network" ],
        "summary" : "Retrieves a NetworkInterfaceState.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve NetworkInterfaceState.",
        "operationId" : "getNetworkInterfaceState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the NetworkInterfaceState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the NetworkInterfaceState",
            "schema" : {
              "$ref" : "#/definitions/NetworkInterfaceState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no NetworkInterfaceState with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "network" ],
        "summary" : "Updates a NetworkInterfaceState.",
        "description" : "Only Solution users, Container admins, and System admins can update NetworkInterfaceStates.",
        "operationId" : "updateNetworkInterfaceState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the NetworkInterfaceState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The NetworkInterfaceState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NetworkInterfaceState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the NetworkInterfaceState is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "network" ],
        "summary" : "Deletes a NetworkInterfaceState.",
        "description" : "Only Solution users, Container admins, and System admins can delete NetworkInterfaceStates.",
        "operationId" : "deleteNetworkInterfaceState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a NetworkInterfaceState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "network" ],
        "summary" : "Patches a NetworkInterfaceState.",
        "description" : "Only Solution users, Container admins, and System admins can patch NetworkInterfaceStates.",
        "operationId" : "patchNetworkInterfaceState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the NetworkInterfaceState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the NetworkInterfaceState",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NetworkInterfaceState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/networks" : {
      "get" : {
        "tags" : [ "network" ],
        "summary" : "Retrieves all NetworkStates.",
        "description" : "Only Solution users, Container admins, and System admins can list NetworkStates.",
        "operationId" : "listNetworkState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageNetworkState"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "network" ],
        "summary" : "Creates a NetworkState.",
        "description" : "Only Solution users, Container admins, and System admins can create NetworkStates.",
        "operationId" : "createNetworkState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NetworkState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NetworkState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/networks/{id}" : {
      "get" : {
        "tags" : [ "network" ],
        "summary" : "Retrieves a NetworkState.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve NetworkState.",
        "operationId" : "getNetworkState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the NetworkState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the NetworkState",
            "schema" : {
              "$ref" : "#/definitions/NetworkState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no NetworkState with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "network" ],
        "summary" : "Updates a NetworkState.",
        "description" : "Only Solution users, Container admins, and System admins can update NetworkStates.",
        "operationId" : "updateNetworkState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the NetworkState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The NetworkState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NetworkState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the NetworkState is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "network" ],
        "summary" : "Deletes a NetworkState.",
        "description" : "Only Solution users, Container admins, and System admins can delete NetworkStates.",
        "operationId" : "deleteNetworkState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a NetworkState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "network" ],
        "summary" : "Patches a NetworkState.",
        "description" : "Only Solution users, Container admins, and System admins can patch NetworkStates.",
        "operationId" : "patchNetworkState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the NetworkState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the NetworkState",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NetworkState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/notifications" : {
      "get" : {
        "tags" : [ "notifications" ],
        "summary" : "Retrieves request and eventlog notifications.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve NotificationsStates.",
        "operationId" : "getNotifications",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NotificationsState"
            }
          }
        }
      }
    },
    "/api/resources/pools" : {
      "get" : {
        "tags" : [ "resource-pool" ],
        "summary" : "Retrieves all ResourcePoolStates.",
        "description" : "Only Solution users, Container admins, and System admins can list ResourcePoolStates.",
        "operationId" : "listResourcePoolState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageResourcePoolState"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "resource-pool" ],
        "summary" : "Creates a ResourcePoolState.",
        "description" : "Only Solution users, Container admins, and System admins can create ResourcePoolStates.",
        "operationId" : "createResourcePoolState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ResourcePoolState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ResourcePoolState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/pools/{id}" : {
      "get" : {
        "tags" : [ "resource-pool" ],
        "summary" : "Retrieves a ResourcePoolState.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve ResourcePoolStates.",
        "operationId" : "getResourcePoolState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ResourcePoolState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the ResourcePoolState",
            "schema" : {
              "$ref" : "#/definitions/ResourcePoolState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no ResourcePoolState with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "resource-pool" ],
        "summary" : "Updates a ResourcePoolState.",
        "description" : "Only Solution users, Container admins, and System admins can update ResourcePoolStates.",
        "operationId" : "updateResourcePoolState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ResourcePoolState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ResourcePoolState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ResourcePoolState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the ResourcePoolState is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "resource-pool" ],
        "summary" : "Deletes a ResourcePoolState.",
        "description" : "Only Solution users, Container admins, and System admins can delete ResourcePoolStates.",
        "operationId" : "deleteResourcePoolState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a ResourcePoolState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "resource-pool" ],
        "summary" : "Patches a ResourcePoolState.",
        "description" : "Only Solution users, Container admins, and System admins can patch ResourcePoolStates.",
        "operationId" : "patchResourcePoolState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the ResourcePoolState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the ResourcePoolState",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ResourcePoolState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/security-groups" : {
      "get" : {
        "tags" : [ "security-groups" ],
        "summary" : "Retrieves all SecurityGroups.",
        "description" : "Only Solution users, Container admins, and System admins can list SecurityGroup.",
        "operationId" : "listSecurityGroup",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageSecurityGroup"
            }
          }
        }
      }
    },
    "/api/resources/storage-descriptions" : {
      "get" : {
        "tags" : [ "storage" ],
        "summary" : "Retrieves all StorageDescription.",
        "description" : "Only Solution users, Container admins, and System admins can list StorageDescription.",
        "operationId" : "listStorageDescription",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageStorageDescription"
            }
          }
        }
      }
    },
    "/api/resources/storage-descriptions/{id}" : {
      "get" : {
        "tags" : [ "storage" ],
        "summary" : "Retrieves a StorageDescription.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve StorageDescription.",
        "operationId" : "getStorageDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the StorageDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the StorageDescription",
            "schema" : {
              "$ref" : "#/definitions/StorageDescription"
            }
          },
          "404" : {
            "description" : "'Not Found' if no StorageDescription with provided <code>id</code>"
          }
        }
      },
      "patch" : {
        "tags" : [ "storage" ],
        "summary" : "Patches a StorageDescription.",
        "description" : "Only Solution users, Container admins, and System admins can patch StorageDescription.",
        "operationId" : "patchStorageDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the StorageDescription",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the StorageDescription",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/StorageDescription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/sub-networks" : {
      "get" : {
        "tags" : [ "subnet" ],
        "summary" : "Retrieves all SubnetStates.",
        "description" : "Only Solution users, Container admins, and System admins can list SubnetStates.",
        "operationId" : "listSubnetState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageSubnetState"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "subnet" ],
        "summary" : "Creates a SubnetState.",
        "description" : "Only Solution users, Container admins, and System admins can create SubnetStates.",
        "operationId" : "createSubnetState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SubnetState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SubnetState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/sub-networks/{id}" : {
      "get" : {
        "tags" : [ "subnet" ],
        "summary" : "Retrieves a SubnetState.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve SubnetStates.",
        "operationId" : "getSubnetState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the SubnetState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the SubnetState",
            "schema" : {
              "$ref" : "#/definitions/SubnetState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no SubnetState with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "subnet" ],
        "summary" : "Updates a SubnetState.",
        "description" : "Only Solution users, Container admins, and System admins can update SubnetStates.",
        "operationId" : "updateSubnetState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the SubnetState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The SubnetState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SubnetState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the SubnetState is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "subnet" ],
        "summary" : "Deletes a SubnetState.",
        "description" : "Only Solution users, Container admins, and System admins can delete SubnetStates.",
        "operationId" : "deleteSubnetState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a SubnetState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "subnet" ],
        "summary" : "Patches a SubnetState.",
        "description" : "Only Solution users, Container admins, and System admins can patch SubnetStates.",
        "operationId" : "patchSubnetState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the SubnetState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the SubnetState",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SubnetState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/resources/tag-assignment" : {
      "post" : {
        "tags" : [ "tagging" ],
        "summary" : "Creates a TagAssignmentRequest.",
        "description" : "Only Solution users, Container admins, and System admins can create TagAssignmentRequests.",
        "operationId" : "createTagAssignmentRequest",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TagAssignmentRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TagAssignmentRequest"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/tags" : {
      "get" : {
        "tags" : [ "tagging" ],
        "summary" : "Retrieves all TagStates.",
        "description" : "Only Solution users, Container admins, and System admins can list TagStates.",
        "operationId" : "listTagState",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page Number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of entries per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        }, {
          "name" : "$orderby",
          "in" : "query",
          "description" : "Multiple comma-separated properties sorted in ascending or descending order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "Sets the number of returned entries from the top of the response (total number per page in relation to skip)",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$skip",
          "in" : "query",
          "description" : "Sets how many entries you would like to skip",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "Boolean expression for whether a particular entry should be included in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageTagState"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "tagging" ],
        "summary" : "Creates a TagState.",
        "description" : "Only Solution users, Container admins, and System admins can create TagStates.",
        "operationId" : "createTagState",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TagState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TagState"
            }
          },
          "201" : {
            "description" : "'Created' is returned for the new state with the state url in the <code>location</code> header of the response;"
          }
        }
      }
    },
    "/api/resources/tags/{id}" : {
      "get" : {
        "tags" : [ "tagging" ],
        "summary" : "Retrieves a TagState.",
        "description" : "Only Solution users, Container admins, and System admins can retrieve TagStates.",
        "operationId" : "getTagState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the TagState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with the TagState",
            "schema" : {
              "$ref" : "#/definitions/TagState"
            }
          },
          "404" : {
            "description" : "'Not Found' if no TagState with provided <code>id</code>"
          }
        }
      },
      "put" : {
        "tags" : [ "tagging" ],
        "summary" : "Updates a TagState.",
        "description" : "Only Solution users, Container admins, and System admins can update TagStates.",
        "operationId" : "updateTagState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the TagState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The TagState to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TagState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'OK' is returned when the TagState is updated.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "tagging" ],
        "summary" : "Deletes a TagState.",
        "description" : "Only Solution users, Container admins, and System admins can delete TagStates.",
        "operationId" : "deleteTagState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of a TagState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        }
      },
      "patch" : {
        "tags" : [ "tagging" ],
        "summary" : "Patches a TagState.",
        "description" : "Only Solution users, Container admins, and System admins can patch TagStates.",
        "operationId" : "patchTagState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the TagState",
          "required" : true,
          "type" : "string",
          "pattern" : ".+$"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The patch of the TagState",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TagState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        }
      }
    },
    "/api/util/long-uri-get" : {
      "post" : {
        "tags" : [ "post" ],
        "summary" : "The service accepts post request with long uri as body. Then a get request is sent using the uri in the body. The service workarounds an issue when the uri is too long and netty does not accept it",
        "description" : "",
        "operationId" : "postToGet",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/LongURIRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "'Ok' is returned with the Object received from the given request body.",
            "schema" : {
              "type" : "object"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "AndClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "subClauses" : {
            "type" : "array",
            "xml" : {
              "name" : "clause"
            },
            "items" : {
              "$ref" : "#/definitions/Clause"
            }
          }
        }
      } ]
    },
    "ApplicationProfile" : {
      "allOf" : [ {
        "$ref" : "#/definitions/networkObject"
      }, {
        "type" : "object",
        "properties" : {
          "insertXForwardedFor" : {
            "type" : "boolean",
            "default" : false
          },
          "sslPassthrough" : {
            "type" : "boolean",
            "default" : false
          },
          "template" : {
            "type" : "string"
          },
          "serverSslEnabled" : {
            "type" : "boolean",
            "default" : false
          },
          "cookieMode" : {
            "type" : "string"
          },
          "cookieName" : {
            "type" : "string"
          },
          "method" : {
            "type" : "string"
          },
          "Expiry" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "xml" : {
          "name" : "networkObject"
        }
      } ]
    },
    "AuthCredentialsServiceState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "userLink" : {
          "type" : "string"
        },
        "userEmail" : {
          "type" : "string"
        },
        "privateKey" : {
          "type" : "string"
        },
        "privateKeyId" : {
          "type" : "string"
        },
        "publicKey" : {
          "type" : "string"
        },
        "tokenReference" : {
          "type" : "string",
          "format" : "uri"
        },
        "type" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "Binding" : {
      "type" : "object",
      "properties" : {
        "targetFieldPath" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "originalFieldExpression" : {
          "type" : "string"
        },
        "placeholder" : {
          "$ref" : "#/definitions/BindingPlaceholder"
        }
      }
    },
    "BindingPlaceholder" : {
      "type" : "object",
      "properties" : {
        "bindingExpression" : {
          "type" : "string"
        },
        "defaultValue" : {
          "type" : "string"
        }
      }
    },
    "BooleanLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "description" : "Wraps a boolean value.",
        "xml" : {
          "name" : "booleanLiteral"
        }
      } ]
    },
    "BootConfig" : {
      "type" : "object",
      "properties" : {
        "label" : {
          "type" : "string"
        },
        "data" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "files" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FileEntry"
          }
        }
      }
    },
    "CallbackEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object"
      } ]
    },
    "Clause" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "ClosureDescription" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "desc" : {
          "type" : "string"
        },
        "groupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tagLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "regionId" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "runtime" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "entrypoint" : {
          "type" : "string"
        },
        "source" : {
          "type" : "string"
        },
        "sourceURL" : {
          "type" : "string"
        },
        "inputs" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "outputNames" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "dependencies" : {
          "type" : "string"
        },
        "logConfiguration" : {
          "$ref" : "#/definitions/LogConfig"
        },
        "resources" : {
          "$ref" : "#/definitions/ResourceConstraints"
        },
        "notifyUrl" : {
          "type" : "string"
        }
      }
    },
    "ClosureState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "desc" : {
          "type" : "string"
        },
        "groupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tagLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "regionId" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "descriptionLink" : {
          "type" : "string"
        },
        "parentLink" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string",
          "enum" : [ "CREATED", "STARTED", "FINISHED", "FAILED", "CANCELLED" ]
        },
        "errorMsg" : {
          "type" : "string"
        },
        "inputs" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "outputs" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "logs" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "byte"
          }
        },
        "resourceLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "lastLeasedTimeMillis" : {
          "type" : "integer",
          "format" : "int64"
        },
        "closureSemaphore" : {
          "type" : "string"
        }
      }
    },
    "CoalesceEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "arguments" : {
            "type" : "array",
            "xml" : {
              "name" : "argument",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "ComplexDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object",
        "properties" : {
          "schema" : {
            "$ref" : "#/definitions/Schema"
          }
        }
      } ]
    },
    "ComplexEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "componentTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "typeFilter" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "values" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "ComponentBinding" : {
      "type" : "object",
      "properties" : {
        "componentName" : {
          "type" : "string"
        },
        "bindings" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Binding"
          }
        }
      }
    },
    "CompositeComponent" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "name" : {
          "type" : "string"
        },
        "compositeDescriptionLink" : {
          "type" : "string"
        },
        "componentLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "created" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "CompositeDescription" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "name" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string"
        },
        "lastPublished" : {
          "type" : "integer",
          "format" : "int64"
        },
        "parentDescriptionLink" : {
          "type" : "string"
        },
        "descriptionLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "bindings" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ComponentBinding"
          }
        }
      }
    },
    "ComputeDescription" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "desc" : {
          "type" : "string"
        },
        "groupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tagLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "regionId" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "supportedChildren" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "cpuCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "cpuMhzPerCore" : {
          "type" : "integer",
          "format" : "int64"
        },
        "gpuCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "storage" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalMemoryBytes" : {
          "type" : "integer",
          "format" : "int64"
        },
        "instanceAdapterReference" : {
          "type" : "string",
          "format" : "uri"
        },
        "powerAdapterReference" : {
          "type" : "string",
          "format" : "uri"
        },
        "bootAdapterReference" : {
          "type" : "string",
          "format" : "uri"
        },
        "healthAdapterReference" : {
          "type" : "string",
          "format" : "uri"
        },
        "statsAdapterReference" : {
          "type" : "string",
          "format" : "uri"
        },
        "statsAdapterReferences" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "format" : "uri"
          }
        },
        "enumerationAdapterReference" : {
          "type" : "string",
          "format" : "uri"
        },
        "authCredentialsLink" : {
          "type" : "string"
        },
        "environmentName" : {
          "type" : "string"
        },
        "dataStoreId" : {
          "type" : "string"
        },
        "networkId" : {
          "type" : "string"
        },
        "zoneId" : {
          "type" : "string"
        },
        "instanceType" : {
          "type" : "string"
        },
        "costPerMinute" : {
          "type" : "number",
          "format" : "double"
        },
        "currencyUnit" : {
          "type" : "string"
        },
        "networkInterfaceDescLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "constraints" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/Constraint"
          }
        },
        "endpointLink" : {
          "type" : "string"
        },
        "diskDescLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ComputeDiskState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "desc" : {
          "type" : "string"
        },
        "groupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tagLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "regionId" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "sourceImageReference" : {
          "type" : "string",
          "format" : "uri"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "SSD", "HDD", "CDROM", "FLOPPY", "NETWORK" ]
        },
        "capacityMBytes" : {
          "type" : "integer",
          "format" : "int64"
        },
        "persistent" : {
          "type" : "boolean",
          "default" : false
        },
        "encrypted" : {
          "type" : "boolean",
          "default" : false
        },
        "bootOrder" : {
          "type" : "integer",
          "format" : "int32"
        },
        "bootArguments" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "bootConfig" : {
          "$ref" : "#/definitions/BootConfig"
        },
        "constraint" : {
          "$ref" : "#/definitions/Constraint"
        }
      }
    },
    "ComputeImageDescription" : {
      "type" : "object",
      "properties" : {
        "image" : {
          "type" : "string"
        },
        "imageLink" : {
          "type" : "string"
        },
        "osFamily" : {
          "type" : "string",
          "enum" : [ "WINDOWS", "LINUX", "MACOS", "OTHER" ]
        }
      }
    },
    "ComputeNetwork" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "desc" : {
          "type" : "string"
        },
        "groupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tagLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "regionId" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "descriptionLink" : {
          "type" : "string"
        },
        "parentLink" : {
          "type" : "string"
        },
        "assignment" : {
          "type" : "string"
        },
        "networkType" : {
          "type" : "string",
          "enum" : [ "PUBLIC", "ISOLATED" ]
        },
        "external" : {
          "type" : "boolean",
          "default" : false
        },
        "networkProfileLink" : {
          "type" : "string"
        },
        "subnetLink" : {
          "type" : "string"
        },
        "securityGroupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ComputeNetworkDescription" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "assignment" : {
          "type" : "string"
        },
        "networkType" : {
          "type" : "string",
          "enum" : [ "PUBLIC", "ISOLATED" ]
        },
        "external" : {
          "type" : "boolean",
          "default" : false
        },
        "networkProfileLink" : {
          "type" : "string"
        },
        "securityGroupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "constraints" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/Constraint"
          }
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ComputeProfile" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "desc" : {
          "type" : "string"
        },
        "groupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tagLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "regionId" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "endpointLink" : {
          "type" : "string"
        },
        "endpointType" : {
          "type" : "string"
        },
        "instanceTypeMapping" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/InstanceTypeDescription"
          }
        },
        "imageMapping" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ComputeImageDescription"
          }
        },
        "imageProfileLink" : {
          "type" : "string"
        },
        "instanceTypeProfileLink" : {
          "type" : "string"
        }
      }
    },
    "ComputeState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "desc" : {
          "type" : "string"
        },
        "groupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tagLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "regionId" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "descriptionLink" : {
          "type" : "string"
        },
        "parentLink" : {
          "type" : "string"
        },
        "resourcePoolLink" : {
          "type" : "string"
        },
        "address" : {
          "type" : "string"
        },
        "primaryMAC" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "VM_HOST", "VM_GUEST", "DOCKER_CONTAINER", "PHYSICAL", "OS_ON_PHYSICAL", "ZONE" ]
        },
        "powerState" : {
          "type" : "string"
        },
        "adapterManagementReference" : {
          "type" : "string",
          "format" : "uri"
        },
        "diskLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "networkInterfaceLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "creationTimeMicros" : {
          "type" : "integer",
          "format" : "int64"
        },
        "endpointLink" : {
          "type" : "string"
        },
        "hostName" : {
          "type" : "string"
        },
        "environmentName" : {
          "type" : "string"
        },
        "instanceType" : {
          "type" : "string"
        },
        "cpuCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "cpuMhzPerCore" : {
          "type" : "integer",
          "format" : "int64"
        },
        "gpuCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalMemoryBytes" : {
          "type" : "integer",
          "format" : "int64"
        },
        "zoneId" : {
          "type" : "string"
        },
        "lifecycleState" : {
          "type" : "string"
        }
      }
    },
    "Condition" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "TAG", "FIELD" ]
        },
        "enforcement" : {
          "type" : "string",
          "enum" : [ "HARD", "SOFT" ]
        },
        "occurrence" : {
          "type" : "string",
          "enum" : [ "MUST_OCCUR", "MUST_NOT_OCCUR", "SHOULD_OCCUR" ]
        },
        "expression" : {
          "$ref" : "#/definitions/QueryTerm"
        }
      }
    },
    "ConditionalEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "cases" : {
            "type" : "array",
            "xml" : {
              "name" : "case"
            },
            "items" : {
              "$ref" : "#/definitions/ConditionalEvaluatorCase"
            }
          },
          "defaulValue" : {
            "$ref" : "#/definitions/Evaluator"
          }
        }
      } ]
    },
    "ConditionalEvaluatorCase" : {
      "type" : "object",
      "properties" : {
        "condition" : {
          "$ref" : "#/definitions/Clause"
        },
        "value" : {
          "$ref" : "#/definitions/Evaluator"
        }
      }
    },
    "ConfigurationState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "key" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        }
      }
    },
    "ConstantClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/booleanLiteral"
          }
        }
      } ]
    },
    "ConstantValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/literal"
          }
        }
      } ]
    },
    "Constraint" : {
      "type" : "object",
      "required" : [ "value" ],
      "discriminator" : "type",
      "properties" : {
        "value" : {
          "$ref" : "#/definitions/Evaluator"
        }
      }
    },
    "ContainerDescription" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "desc" : {
          "type" : "string"
        },
        "groupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tagLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "regionId" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "image" : {
          "type" : "string"
        },
        "command" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "parentDescriptionLink" : {
          "type" : "string"
        },
        "imageReference" : {
          "type" : "string",
          "format" : "uri"
        },
        "instanceAdapterReference" : {
          "type" : "string",
          "format" : "uri"
        },
        "zoneId" : {
          "type" : "string"
        },
        "affinity" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "user" : {
          "type" : "string"
        },
        "memoryLimit" : {
          "type" : "integer",
          "format" : "int32"
        },
        "memorySwapLimit" : {
          "type" : "integer",
          "format" : "int32"
        },
        "cpuShares" : {
          "type" : "integer",
          "format" : "int32"
        },
        "dns" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "env" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "entryPoint" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "volumes" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "workingDir" : {
          "type" : "string"
        },
        "privileged" : {
          "type" : "boolean",
          "default" : false
        },
        "hostname" : {
          "type" : "string"
        },
        "domainName" : {
          "type" : "string"
        },
        "extraHosts" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "publishAll" : {
          "type" : "boolean",
          "default" : false
        },
        "portBindings" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PortBinding"
          }
        },
        "pod" : {
          "type" : "string"
        },
        "_cluster" : {
          "type" : "integer",
          "format" : "int32"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "dnsSearch" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "volumesFrom" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "volumeDriver" : {
          "type" : "string"
        },
        "capAdd" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "capDrop" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "restartPolicy" : {
          "type" : "string"
        },
        "maximumRetryCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "networkMode" : {
          "type" : "string"
        },
        "networks" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ServiceNetwork"
          }
        },
        "pidMode" : {
          "type" : "string"
        },
        "device" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "deploymentPolicyId" : {
          "type" : "string"
        },
        "logConfig" : {
          "$ref" : "#/definitions/LogConfig"
        },
        "healthConfig" : {
          "$ref" : "#/definitions/HealthConfig"
        },
        "dependsOn" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ContainerHostSpec" : {
      "type" : "object",
      "properties" : {
        "hostState" : {
          "$ref" : "#/definitions/ComputeState"
        },
        "acceptCertificate" : {
          "type" : "boolean",
          "default" : false
        },
        "acceptHostAddress" : {
          "type" : "boolean",
          "default" : false
        },
        "sslTrust" : {
          "$ref" : "#/definitions/SslTrustCertificateState"
        },
        "isUpdateOperation" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "ContainerNetworkDescription" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "desc" : {
          "type" : "string"
        },
        "groupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tagLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "regionId" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "ipam" : {
          "$ref" : "#/definitions/Ipam"
        },
        "driver" : {
          "type" : "string"
        },
        "options" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "external" : {
          "type" : "boolean",
          "default" : false
        },
        "externalName" : {
          "type" : "string"
        },
        "instanceAdapterReference" : {
          "type" : "string",
          "format" : "uri"
        },
        "parentDescriptionLink" : {
          "type" : "string"
        }
      }
    },
    "ContainerNetworkState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "desc" : {
          "type" : "string"
        },
        "groupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tagLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "regionId" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "descriptionLink" : {
          "type" : "string"
        },
        "parentLink" : {
          "type" : "string"
        },
        "originatingHostLink" : {
          "type" : "string"
        },
        "compositeComponentLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "adapterManagementReference" : {
          "type" : "string",
          "format" : "uri"
        },
        "powerState" : {
          "type" : "string",
          "enum" : [ "UNKNOWN", "PROVISIONING", "CONNECTED", "RETIRED", "ERROR" ]
        },
        "parentLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "ipam" : {
          "$ref" : "#/definitions/Ipam"
        },
        "driver" : {
          "type" : "string"
        },
        "external" : {
          "type" : "boolean",
          "default" : false
        },
        "connected" : {
          "type" : "integer",
          "format" : "int64"
        },
        "connectedContainersCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "options" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ContainerRequestStatus" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "phase" : {
          "type" : "string"
        },
        "taskInfo" : {
          "$ref" : "#/definitions/TaskState"
        },
        "subStage" : {
          "type" : "string"
        },
        "progress" : {
          "type" : "integer",
          "format" : "int32"
        },
        "name" : {
          "type" : "string"
        },
        "eventLogLink" : {
          "type" : "string"
        },
        "resourceLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "component" : {
          "type" : "string"
        },
        "requestProgressByComponent" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        },
        "componentNames" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ContainerState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "desc" : {
          "type" : "string"
        },
        "groupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tagLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "regionId" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "descriptionLink" : {
          "type" : "string"
        },
        "parentLink" : {
          "type" : "string"
        },
        "names" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "compositeComponentLink" : {
          "type" : "string"
        },
        "address" : {
          "type" : "string"
        },
        "adapterManagementReference" : {
          "type" : "string"
        },
        "hostReference" : {
          "type" : "string"
        },
        "powerState" : {
          "type" : "string",
          "enum" : [ "UNKNOWN", "PROVISIONING", "RUNNING", "PAUSED", "STOPPED", "RETIRED", "ERROR" ]
        },
        "ports" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PortBinding"
          }
        },
        "networks" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ServiceNetwork"
          }
        },
        "image" : {
          "type" : "string"
        },
        "command" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "volumesFrom" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "volumeDriver" : {
          "type" : "string"
        },
        "volumes" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "links" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "groupResourcePlacementLink" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string"
        },
        "created" : {
          "type" : "integer",
          "format" : "int64"
        },
        "started" : {
          "type" : "integer",
          "format" : "int64"
        },
        "memoryLimit" : {
          "type" : "integer",
          "format" : "int64"
        },
        "storageLimit" : {
          "type" : "integer",
          "format" : "int64"
        },
        "system" : {
          "type" : "boolean",
          "default" : false
        },
        "isDeleted" : {
          "type" : "boolean",
          "default" : false
        },
        "cpuShares" : {
          "type" : "integer",
          "format" : "int32"
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "env" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "extraHosts" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ContainerType" : {
      "type" : "object",
      "required" : [ "schemaReference" ],
      "properties" : {
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time",
          "xml" : {
            "attribute" : true
          }
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        },
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 255
        },
        "name" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 255
        },
        "description" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 2000
        },
        "serviceTypeId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "minLength" : 0,
          "maxLength" : 255
        },
        "schemaReference" : {
          "$ref" : "#/definitions/SchemaReference"
        }
      }
    },
    "ContainerVolumeDescription" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "desc" : {
          "type" : "string"
        },
        "groupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tagLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "regionId" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "driver" : {
          "type" : "string"
        },
        "options" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "external" : {
          "type" : "boolean",
          "default" : false
        },
        "externalName" : {
          "type" : "string"
        },
        "instanceAdapterReference" : {
          "type" : "string",
          "format" : "uri"
        },
        "parentDescriptionLink" : {
          "type" : "string"
        }
      }
    },
    "ContainerVolumeState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "desc" : {
          "type" : "string"
        },
        "groupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tagLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "regionId" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "descriptionLink" : {
          "type" : "string"
        },
        "parentLink" : {
          "type" : "string"
        },
        "originatingHostLink" : {
          "type" : "string"
        },
        "compositeComponentLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "adapterManagementReference" : {
          "type" : "string",
          "format" : "uri"
        },
        "parentLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "powerState" : {
          "type" : "string",
          "enum" : [ "UNKNOWN", "PROVISIONING", "CONNECTED", "RETIRED", "ERROR" ]
        },
        "driver" : {
          "type" : "string"
        },
        "external" : {
          "type" : "boolean",
          "default" : false
        },
        "connected" : {
          "type" : "integer",
          "format" : "int64"
        },
        "scope" : {
          "type" : "string"
        },
        "mountpoint" : {
          "type" : "string"
        },
        "options" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "status" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ContainsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "ContextPermissibleValueList" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PermissibleValueList"
      }, {
        "type" : "object"
      } ]
    },
    "CostToDate" : {
      "type" : "object",
      "required" : [ "asOnDate", "currencyCode" ],
      "properties" : {
        "amount" : {
          "type" : "number",
          "format" : "double"
        },
        "currencyCode" : {
          "type" : "string"
        },
        "asOnDate" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "CriteriaOperator" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "CustomPropertyDefinitionMetadata" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object",
        "required" : [ "field" ],
        "properties" : {
          "field" : {
            "$ref" : "#/definitions/Field"
          }
        }
      } ]
    },
    "CustomValidationConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "DataType" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "typeId" : {
          "type" : "string",
          "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
        }
      }
    },
    "DefaultValueBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "DeploymentPolicy" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        }
      }
    },
    "DisplayTextBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "DynamicLayoutReference" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutReference"
      }, {
        "type" : "object",
        "properties" : {
          "dependencies" : {
            "type" : "array",
            "xml" : {
              "name" : "dependency",
              "wrapped" : true
            },
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "DynamicPermissibleValueList" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PermissibleValueList"
      }, {
        "type" : "object",
        "properties" : {
          "context" : {
            "$ref" : "#/definitions/DynamicValueContext"
          },
          "dependencies" : {
            "type" : "array",
            "xml" : {
              "name" : "dependency",
              "wrapped" : true
            },
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "DynamicValueContext" : {
      "type" : "object",
      "required" : [ "parameterMappings" ],
      "properties" : {
        "providerEntityId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "parameterMappings" : {
          "$ref" : "#/definitions/ParameterMappingCollection"
        }
      }
    },
    "EditableBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "ElasticPlacementZoneConfigurationState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "resourcePoolState" : {
          "$ref" : "#/definitions/ResourcePoolState"
        },
        "epzState" : {
          "$ref" : "#/definitions/ElasticPlacementZoneState"
        }
      }
    },
    "ElasticPlacementZoneState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "placementPolicy" : {
          "type" : "string",
          "enum" : [ "DEFAULT", "SPREAD", "BINPACK" ]
        },
        "resourcePoolLink" : {
          "type" : "string"
        },
        "tagLinksToMatch" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ElementState" : {
      "type" : "object",
      "properties" : {
        "dependencies" : {
          "type" : "array",
          "xml" : {
            "name" : "dependency",
            "wrapped" : true
          },
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "facets" : {
          "type" : "array",
          "xml" : {
            "name" : "facet",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/Constraint"
          }
        }
      }
    },
    "EncryptedBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "EndpointState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "desc" : {
          "type" : "string"
        },
        "groupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tagLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "regionId" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "endpointType" : {
          "type" : "string"
        },
        "endpointProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "resourcePoolLink" : {
          "type" : "string"
        },
        "computeDescriptionLink" : {
          "type" : "string"
        },
        "computeLink" : {
          "type" : "string"
        },
        "authCredentialsLink" : {
          "type" : "string"
        }
      }
    },
    "EndsWithOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "EntityReferenceDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object"
      } ]
    },
    "EqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "Evaluator" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "EventLogState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "resourceType" : {
          "type" : "string"
        },
        "eventLogType" : {
          "type" : "string",
          "enum" : [ "INFO", "WARNING", "ERROR" ]
        },
        "description" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "EventTopicState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "blockable" : {
          "type" : "boolean",
          "default" : false
        },
        "schema" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "topicTaskInfo" : {
          "$ref" : "#/definitions/TopicTaskInfo"
        }
      }
    },
    "Expression" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "operator" : {
            "$ref" : "#/definitions/CriteriaOperator"
          },
          "leftOperand" : {
            "$ref" : "#/definitions/Evaluator"
          },
          "rightOperand" : {
            "$ref" : "#/definitions/Evaluator"
          }
        }
      } ]
    },
    "ExtensionForm" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FormReference"
      }, {
        "type" : "object",
        "properties" : {
          "extensionId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "extensionPointId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        }
      } ]
    },
    "ExtensionRendererContext" : {
      "type" : "object",
      "properties" : {
        "extensionId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "parameterMappings" : {
          "$ref" : "#/definitions/ParameterMappingCollection"
        }
      }
    },
    "ExternalFormReference" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FormReference"
      }, {
        "type" : "object",
        "properties" : {
          "formId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        }
      } ]
    },
    "ExternalSchemaReference" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SchemaReference"
      }, {
        "type" : "object",
        "properties" : {
          "schemaId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        }
      } ]
    },
    "ExternalValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "required" : [ "dynamicValueProviderInfo" ],
        "properties" : {
          "dynamicValueProviderInfo" : {
            "$ref" : "#/definitions/DynamicValueContext"
          }
        }
      } ]
    },
    "Field" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "label" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "dataType" : {
          "$ref" : "#/definitions/DataType"
        },
        "displayAdvice" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "TEXTBOX", "HYPERLINK", "EMAIL", "TEXTAREA", "DATE_TIME_PICKER", "CHECKBOX", "YES_NO", "CHECKBOX_GROUP", "DUAL_LIST", "RADIO_GROUP", "DROPDOWN", "LIST", "SEARCHER", "TREE", "FORM", "IMAGE", "SLIDER", "DATA_TABLE", "VALUE_PICKER", "CONFIRM_PASSWORD" ]
        },
        "orderIndex" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        },
        "permissibleValues" : {
          "$ref" : "#/definitions/PermissibleValueList"
        },
        "state" : {
          "$ref" : "#/definitions/ElementState"
        },
        "isMultiValued" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "columns" : {
          "type" : "array",
          "xml" : {
            "name" : "column",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/Field"
          }
        }
      }
    },
    "FieldReference" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "path" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        }
      } ]
    },
    "FileEntry" : {
      "type" : "object",
      "properties" : {
        "path" : {
          "type" : "string"
        },
        "contents" : {
          "type" : "string"
        },
        "contentsReference" : {
          "type" : "string",
          "format" : "uri"
        }
      }
    },
    "FixedValueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "FormReference" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "GenericTenantedServiceDocument" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "unmappedFields" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      }
    },
    "GreaterThanOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "GreaterThanOrEqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "GroupResourcePlacementState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "name" : {
          "type" : "string"
        },
        "resourcePoolLink" : {
          "type" : "string"
        },
        "deploymentPolicyLink" : {
          "type" : "string"
        },
        "priority" : {
          "type" : "integer",
          "format" : "int32"
        },
        "resourceType" : {
          "type" : "string"
        },
        "maxNumberInstances" : {
          "type" : "integer",
          "format" : "int64"
        },
        "memoryLimit" : {
          "type" : "integer",
          "format" : "int64"
        },
        "storageLimit" : {
          "type" : "integer",
          "format" : "int64"
        },
        "cpuShares" : {
          "type" : "integer",
          "format" : "int32"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "availableInstancesCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "availableMemory" : {
          "type" : "integer",
          "format" : "int64"
        },
        "allocatedInstancesCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "resourceQuotaPerResourceDesc" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "memoryQuotaPerResourceDesc" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      }
    },
    "HealthConfig" : {
      "type" : "object",
      "properties" : {
        "protocol" : {
          "type" : "string"
        },
        "port" : {
          "type" : "integer",
          "format" : "int32"
        },
        "urlPath" : {
          "type" : "string"
        },
        "httpVersion" : {
          "type" : "string"
        },
        "httpMethod" : {
          "type" : "string"
        },
        "timeoutMillis" : {
          "type" : "integer",
          "format" : "int32"
        },
        "healthyThreshold" : {
          "type" : "integer",
          "format" : "int32"
        },
        "unhealthyThreshold" : {
          "type" : "integer",
          "format" : "int32"
        },
        "ignoreOnProvision" : {
          "type" : "boolean",
          "default" : false
        },
        "autoredeploy" : {
          "type" : "boolean",
          "default" : false
        },
        "command" : {
          "type" : "string"
        }
      }
    },
    "HttpEntityString" : {
      "type" : "object",
      "properties" : {
        "headers" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "body" : {
          "type" : "string"
        }
      }
    },
    "IaasPropertyNameBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "ImageEnumerationTaskState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "taskSubStage" : {
          "type" : "string"
        },
        "taskInfo" : {
          "$ref" : "#/definitions/TaskState"
        },
        "serviceTaskCallback" : {
          "$ref" : "#/definitions/ServiceTaskCallback"
        },
        "requestTrackerLink" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "endpointType" : {
          "type" : "string"
        },
        "regionId" : {
          "type" : "string"
        },
        "endpointLink" : {
          "type" : "string"
        },
        "enumerationAction" : {
          "type" : "string",
          "enum" : [ "START", "STOP", "REFRESH" ]
        }
      }
    },
    "ImageState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "desc" : {
          "type" : "string"
        },
        "groupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tagLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "regionId" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "string"
        },
        "osFamily" : {
          "type" : "string"
        },
        "endpointLink" : {
          "type" : "string"
        },
        "endpointType" : {
          "type" : "string"
        }
      }
    },
    "IncrementBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "InstanceTypeDescription" : {
      "type" : "object",
      "properties" : {
        "instanceType" : {
          "type" : "string"
        },
        "cpuCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "memoryMb" : {
          "type" : "integer",
          "format" : "int64"
        },
        "diskSizeMb" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "InternalConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "Ipam" : {
      "type" : "object",
      "properties" : {
        "driver" : {
          "type" : "string"
        },
        "config" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IpamConfig"
          }
        }
      }
    },
    "IpamConfig" : {
      "type" : "object",
      "properties" : {
        "subnet" : {
          "type" : "string"
        },
        "ipRange" : {
          "type" : "string"
        },
        "gateway" : {
          "type" : "string"
        },
        "auxAddresses" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "IsDefinedOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "KeyValue" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        }
      }
    },
    "LayoutCell" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "xml" : {
            "attribute" : true
          }
        }
      }
    },
    "LayoutExtension" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutCell"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "extensionId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "extensionPointId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "fieldPrefix" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          }
        }
      } ]
    },
    "LayoutField" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutFlowElement"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "label" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "orderIndex" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dataType" : {
            "$ref" : "#/definitions/DataType"
          },
          "displayAdvice" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "TEXTBOX", "HYPERLINK", "EMAIL", "TEXTAREA", "DATE_TIME_PICKER", "CHECKBOX", "YES_NO", "CHECKBOX_GROUP", "DUAL_LIST", "RADIO_GROUP", "DROPDOWN", "LIST", "SEARCHER", "TREE", "FORM", "IMAGE", "SLIDER", "DATA_TABLE", "VALUE_PICKER", "CONFIRM_PASSWORD" ]
          },
          "permissibleValues" : {
            "$ref" : "#/definitions/PermissibleValueList"
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          },
          "labelSize" : {
            "type" : "integer",
            "format" : "int32",
            "xml" : {
              "attribute" : true
            }
          },
          "detailLayout" : {
            "$ref" : "#/definitions/LayoutReference"
          },
          "extensionRendererContext" : {
            "$ref" : "#/definitions/ExtensionRendererContext"
          },
          "isMultiValued" : {
            "type" : "boolean",
            "xml" : {
              "attribute" : true
            },
            "default" : false
          },
          "columns" : {
            "type" : "array",
            "xml" : {
              "name" : "column",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/LayoutField"
            }
          }
        }
      } ]
    },
    "LayoutFlow" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutCell"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          },
          "parts" : {
            "type" : "array",
            "xml" : {
              "name" : "part",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/LayoutFlowElement"
            }
          }
        }
      } ]
    },
    "LayoutFlowElement" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutCell"
      }, {
        "type" : "object"
      } ]
    },
    "LayoutPage" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "label" : {
          "type" : "string"
        },
        "state" : {
          "$ref" : "#/definitions/ElementState"
        },
        "sections" : {
          "type" : "array",
          "xml" : {
            "name" : "section",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/LayoutSection"
          }
        }
      }
    },
    "LayoutPlaceholderCell" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutCell"
      }, {
        "type" : "object"
      } ]
    },
    "LayoutReference" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "LayoutRow" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "xml" : {
            "name" : "item",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/LayoutCell"
          }
        }
      }
    },
    "LayoutSection" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "label" : {
          "type" : "string"
        },
        "state" : {
          "$ref" : "#/definitions/ElementState"
        },
        "rows" : {
          "type" : "array",
          "xml" : {
            "name" : "row",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/LayoutRow"
          }
        }
      }
    },
    "LayoutText" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutFlowElement"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "value" : {
            "type" : "string"
          },
          "state" : {
            "$ref" : "#/definitions/ElementState"
          }
        }
      } ]
    },
    "LessThanOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "LessThanOrEqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "LiteralMapEntry" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "value" : {
          "$ref" : "#/definitions/literal"
        }
      }
    },
    "LoadBalancerPool" : {
      "allOf" : [ {
        "$ref" : "#/definitions/networkObject"
      }, {
        "type" : "object",
        "xml" : {
          "name" : "loadBalancerPool"
        }
      } ]
    },
    "LoadBalancerVirtualIp" : {
      "allOf" : [ {
        "$ref" : "#/definitions/networkObject"
      }, {
        "type" : "object",
        "xml" : {
          "name" : "loadBalancerVirtualIp"
        }
      } ]
    },
    "LogConfig" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "config" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "LogServiceState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "logs" : {
          "type" : "string"
        }
      }
    },
    "LongURIRequest" : {
      "type" : "object",
      "properties" : {
        "uri" : {
          "type" : "string"
        }
      }
    },
    "MandatoryConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaxCardinalityConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaxLengthConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaxValueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MaximumValueEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "arguments" : {
            "type" : "array",
            "xml" : {
              "name" : "argument",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "MinCardinalityConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MinLengthConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MinValueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "MinimumValueEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "arguments" : {
            "type" : "array",
            "xml" : {
              "name" : "argument",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "MonetaryValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "currencyCode" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The ISO 4217 code used to identify the currency (if any) associated with this value."
          }
        },
        "description" : "Base type for representing monetary values, encapsulating both some kind of quantity and a currency.",
        "xml" : {
          "name" : "literal"
        }
      } ]
    },
    "MoneyTimeRate" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "description" : "Represents a rate of money over time.",
        "xml" : {
          "name" : "moneyTimeRate"
        }
      } ]
    },
    "MultipleEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "required" : [ "items" ],
        "properties" : {
          "elementTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Evaluator"
            }
          }
        }
      } ]
    },
    "NetworkInterfaceDescription" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "desc" : {
          "type" : "string"
        },
        "groupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tagLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "regionId" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "assignment" : {
          "type" : "string"
        },
        "deviceIndex" : {
          "type" : "integer",
          "format" : "int32"
        },
        "firewallLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "networkLink" : {
          "type" : "string"
        },
        "subnetLink" : {
          "type" : "string"
        },
        "address" : {
          "type" : "string"
        }
      }
    },
    "NetworkInterfaceState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "desc" : {
          "type" : "string"
        },
        "groupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tagLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "regionId" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "networkLink" : {
          "type" : "string"
        },
        "subnetLink" : {
          "type" : "string"
        },
        "address" : {
          "type" : "string"
        },
        "securityGroupLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "deviceIndex" : {
          "type" : "integer",
          "format" : "int32"
        },
        "networkInterfaceDescriptionLink" : {
          "type" : "string"
        },
        "endpointLink" : {
          "type" : "string"
        }
      }
    },
    "NetworkState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "desc" : {
          "type" : "string"
        },
        "groupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tagLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "regionId" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "subnetCIDR" : {
          "type" : "string"
        },
        "authCredentialsLink" : {
          "type" : "string"
        },
        "resourcePoolLink" : {
          "type" : "string"
        },
        "endpointLink" : {
          "type" : "string"
        },
        "instanceAdapterReference" : {
          "type" : "string",
          "format" : "uri"
        }
      }
    },
    "NotClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "subClause" : {
            "$ref" : "#/definitions/Clause"
          }
        }
      } ]
    },
    "NotEqualsOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "NotificationsState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "recentEventLogsCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "activeRequestsCount" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "NullDisplayTextBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "NumericRange" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "LONG", "STRING", "BYTES", "PODO", "COLLECTION", "MAP", "BOOLEAN", "DOUBLE", "InternetAddressV4", "InternetAddressV6", "DATE", "URI", "ENUM", "ARRAY" ]
        },
        "min" : {
          "type" : "number",
          "format" : "double"
        },
        "max" : {
          "type" : "number",
          "format" : "double"
        },
        "isMinInclusive" : {
          "type" : "boolean",
          "default" : false
        },
        "isMaxInclusive" : {
          "type" : "boolean",
          "default" : false
        },
        "precisionStep" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ObjectDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object",
        "properties" : {
          "componentTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "typeFilter" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "label" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        }
      } ]
    },
    "OrClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "subClauses" : {
            "type" : "array",
            "xml" : {
              "name" : "clause"
            },
            "items" : {
              "$ref" : "#/definitions/Clause"
            }
          }
        }
      } ]
    },
    "PageAuthCredentialsServiceState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AuthCredentialsServiceState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageClosureDescription" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ClosureDescription"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageClosureState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ClosureState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageCompositeComponent" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CompositeComponent"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageCompositeDescription" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CompositeDescription"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageComputeDescription" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ComputeDescription"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageComputeNetwork" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ComputeNetwork"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageComputeNetworkDescription" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ComputeNetworkDescription"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageComputeProfile" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ComputeProfile"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageComputeState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ComputeState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageConfigurationState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConfigurationState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageContainerDescription" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ContainerDescription"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageContainerNetworkDescription" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ContainerNetworkDescription"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageContainerNetworkState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ContainerNetworkState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageContainerRequestStatus" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ContainerRequestStatus"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageContainerState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ContainerState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageContainerType" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ContainerType"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageContainerVolumeDescription" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ContainerVolumeDescription"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageContainerVolumeState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ContainerVolumeState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageDeploymentPolicy" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DeploymentPolicy"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageElasticPlacementZoneConfigurationState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ElasticPlacementZoneConfigurationState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageElasticPlacementZoneState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ElasticPlacementZoneState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageEndpointState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EndpointState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageEventLogState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EventLogState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageEventTopicState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EventTopicState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageGroupResourcePlacementState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GroupResourcePlacementState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageImageEnumerationTaskState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ImageEnumerationTaskState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageImageState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ImageState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageNetworkInterfaceDescription" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NetworkInterfaceDescription"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageNetworkInterfaceState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NetworkInterfaceState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageNetworkProfile" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/deploymentNetworkProfile"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageNetworkState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NetworkState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PagePhotonModelAdapterConfig" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PhotonModelAdapterConfig"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageProfileMappingState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ProfileMappingState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageProfileState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ProfileState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageRegistryState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RegistryState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageRequestBrokerState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RequestBrokerState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageResourceGroupState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResourceGroupState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageResourcePoolState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResourcePoolState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageSecurityGroup" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/deploymentSecurityGroup"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageServiceDocumentDeleteTaskState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceDocumentDeleteTaskState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageSslTrustCertificateState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SslTrustCertificateState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageSslTrustedCertificateState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SslTrustedCertificateState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageStorageDescription" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StorageDescription"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageStorageProfile" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/deploymentStorageProfile"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageSubnetState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SubnetState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PageTagState" : {
      "type" : "object",
      "properties" : {
        "totalElements" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalPages" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "$ref" : "#/definitions/Sort"
        },
        "first" : {
          "type" : "boolean",
          "default" : false
        },
        "numberOfElements" : {
          "type" : "integer",
          "format" : "int32"
        },
        "last" : {
          "type" : "boolean",
          "default" : false
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "content" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TagState"
          }
        },
        "number" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ParameterMapping" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "value" : {
          "$ref" : "#/definitions/Evaluator"
        }
      }
    },
    "ParameterMappingCollection" : {
      "type" : "object",
      "properties" : {
        "params" : {
          "type" : "array",
          "xml" : {
            "name" : "param",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/ParameterMapping"
          }
        }
      }
    },
    "PermissibleValueList" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "customAllowed" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        }
      }
    },
    "PhotonModelAdapterConfig" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "adapterEndpoints" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "PortBinding" : {
      "type" : "object",
      "properties" : {
        "hostIp" : {
          "type" : "string"
        },
        "hostPort" : {
          "type" : "string"
        },
        "containerPort" : {
          "type" : "string"
        },
        "protocol" : {
          "type" : "string"
        }
      }
    },
    "PrimitiveDataType" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataType"
      }, {
        "type" : "object",
        "properties" : {
          "typeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
          }
        }
      } ]
    },
    "ProfileMappingState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "mappings" : {
          "type" : "object",
          "xml" : {
            "wrapped" : true
          },
          "additionalProperties" : {
            "type" : "object"
          }
        }
      }
    },
    "ProfileState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "desc" : {
          "type" : "string"
        },
        "groupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tagLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "regionId" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "endpointLink" : {
          "type" : "string"
        },
        "endpointType" : {
          "type" : "string"
        },
        "computeProfileLink" : {
          "type" : "string"
        },
        "storageProfileLink" : {
          "type" : "string"
        },
        "networkProfileLink" : {
          "type" : "string"
        },
        "misc" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/PropertyMapping"
          }
        }
      }
    },
    "PropertyMapping" : {
      "type" : "object",
      "properties" : {
        "mappings" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ProviderBinding" : {
      "type" : "object",
      "properties" : {
        "bindingId" : {
          "type" : "string"
        },
        "providerRef" : {
          "$ref" : "#/definitions/labelledReference"
        }
      }
    },
    "ProviderRequestExtension" : {
      "type" : "object",
      "properties" : {
        "extData" : {
          "$ref" : "#/definitions/literalMap"
        }
      }
    },
    "ProviderRequestValidation" : {
      "type" : "object",
      "properties" : {
        "quote" : {
          "$ref" : "#/definitions/RequestQuote"
        },
        "updatedData" : {
          "$ref" : "#/definitions/literalMap"
        }
      }
    },
    "QueryTerm" : {
      "type" : "object",
      "properties" : {
        "propertyName" : {
          "type" : "string"
        },
        "matchValue" : {
          "type" : "string"
        },
        "matchType" : {
          "type" : "string",
          "enum" : [ "WILDCARD", "TERM", "PHRASE" ]
        },
        "range" : {
          "$ref" : "#/definitions/NumericRange"
        }
      }
    },
    "ReadOnlyConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "RefreshOnChangeBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "RegexpConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object",
        "properties" : {
          "errorMessage" : {
            "type" : "string"
          }
        }
      } ]
    },
    "RegistryHostSpec" : {
      "type" : "object",
      "properties" : {
        "hostState" : {
          "$ref" : "#/definitions/RegistryState"
        },
        "acceptCertificate" : {
          "type" : "boolean",
          "default" : false
        },
        "acceptHostAddress" : {
          "type" : "boolean",
          "default" : false
        },
        "sslTrust" : {
          "$ref" : "#/definitions/SslTrustCertificateState"
        }
      }
    },
    "RegistryState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "protocolType" : {
          "type" : "string",
          "enum" : [ "SSH", "HTTP" ]
        },
        "endpointType" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "address" : {
          "type" : "string"
        },
        "authCredentialsLink" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string"
        },
        "disabled" : {
          "type" : "boolean",
          "default" : false
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "RequestBrokerState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "taskSubStage" : {
          "type" : "string"
        },
        "taskInfo" : {
          "$ref" : "#/definitions/TaskState"
        },
        "serviceTaskCallback" : {
          "$ref" : "#/definitions/ServiceTaskCallback"
        },
        "requestTrackerLink" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "resourceType" : {
          "type" : "string"
        },
        "operation" : {
          "type" : "string"
        },
        "resourceDescriptionLink" : {
          "type" : "string"
        },
        "resourceCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "resourceLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "groupResourcePlacementLink" : {
          "type" : "string"
        }
      }
    },
    "RequestQuote" : {
      "type" : "object",
      "properties" : {
        "leasePeriod" : {
          "$ref" : "#/definitions/timeSpan"
        },
        "leaseRate" : {
          "$ref" : "#/definitions/moneyTimeRate"
        },
        "totalLeaseCost" : {
          "$ref" : "#/definitions/literal"
        }
      }
    },
    "ResetValueBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "ResourceConstraints" : {
      "type" : "object",
      "properties" : {
        "cpuShares" : {
          "type" : "integer",
          "format" : "int32"
        },
        "ramMB" : {
          "type" : "integer",
          "format" : "int32"
        },
        "timeoutSeconds" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ResourceCosts" : {
      "type" : "object",
      "properties" : {
        "leaseRate" : {
          "$ref" : "#/definitions/moneyTimeRate"
        }
      }
    },
    "ResourceForms" : {
      "type" : "object",
      "properties" : {
        "details" : {
          "$ref" : "#/definitions/FormReference"
        },
        "catalogRequestInfoHidden" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "catalogResourceInfoHidden" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "requestFormScale" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "SMALL", "BIG" ]
        }
      }
    },
    "ResourceGroupState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "desc" : {
          "type" : "string"
        },
        "groupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tagLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "regionId" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ResourceLease" : {
      "type" : "object",
      "required" : [ "end", "start" ],
      "properties" : {
        "end" : {
          "type" : "string",
          "format" : "date-time"
        },
        "start" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "ResourcePoolState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "desc" : {
          "type" : "string"
        },
        "groupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tagLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "regionId" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "projectName" : {
          "type" : "string"
        },
        "properties" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "ELASTIC", "HYBRID" ]
          }
        },
        "minCpuCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "minGpuCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "minMemoryBytes" : {
          "type" : "integer",
          "format" : "int64"
        },
        "minDiskCapacityBytes" : {
          "type" : "integer",
          "format" : "int64"
        },
        "maxCpuCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "maxGpuCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "maxMemoryBytes" : {
          "type" : "integer",
          "format" : "int64"
        },
        "maxDiskCapacityBytes" : {
          "type" : "integer",
          "format" : "int64"
        },
        "maxCpuCostPerMinute" : {
          "type" : "number",
          "format" : "double"
        },
        "maxDiskCostPerMinute" : {
          "type" : "number",
          "format" : "double"
        },
        "currencyUnit" : {
          "type" : "string"
        },
        "computeResourceQueryLink" : {
          "type" : "string"
        }
      }
    },
    "ResponseEntity" : {
      "type" : "object",
      "properties" : {
        "headers" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "body" : {
          "type" : "object"
        },
        "statusCode" : {
          "type" : "string",
          "enum" : [ "CONTINUE", "SWITCHING_PROTOCOLS", "PROCESSING", "CHECKPOINT", "OK", "CREATED", "ACCEPTED", "NON_AUTHORITATIVE_INFORMATION", "NO_CONTENT", "RESET_CONTENT", "PARTIAL_CONTENT", "MULTI_STATUS", "ALREADY_REPORTED", "IM_USED", "MULTIPLE_CHOICES", "MOVED_PERMANENTLY", "FOUND", "MOVED_TEMPORARILY", "SEE_OTHER", "NOT_MODIFIED", "USE_PROXY", "TEMPORARY_REDIRECT", "PERMANENT_REDIRECT", "BAD_REQUEST", "UNAUTHORIZED", "PAYMENT_REQUIRED", "FORBIDDEN", "NOT_FOUND", "METHOD_NOT_ALLOWED", "NOT_ACCEPTABLE", "PROXY_AUTHENTICATION_REQUIRED", "REQUEST_TIMEOUT", "CONFLICT", "GONE", "LENGTH_REQUIRED", "PRECONDITION_FAILED", "PAYLOAD_TOO_LARGE", "REQUEST_ENTITY_TOO_LARGE", "URI_TOO_LONG", "REQUEST_URI_TOO_LONG", "UNSUPPORTED_MEDIA_TYPE", "REQUESTED_RANGE_NOT_SATISFIABLE", "EXPECTATION_FAILED", "I_AM_A_TEAPOT", "INSUFFICIENT_SPACE_ON_RESOURCE", "METHOD_FAILURE", "DESTINATION_LOCKED", "UNPROCESSABLE_ENTITY", "LOCKED", "FAILED_DEPENDENCY", "UPGRADE_REQUIRED", "PRECONDITION_REQUIRED", "TOO_MANY_REQUESTS", "REQUEST_HEADER_FIELDS_TOO_LARGE", "INTERNAL_SERVER_ERROR", "NOT_IMPLEMENTED", "BAD_GATEWAY", "SERVICE_UNAVAILABLE", "GATEWAY_TIMEOUT", "HTTP_VERSION_NOT_SUPPORTED", "VARIANT_ALSO_NEGOTIATES", "INSUFFICIENT_STORAGE", "LOOP_DETECTED", "BANDWIDTH_LIMIT_EXCEEDED", "NOT_EXTENDED", "NETWORK_AUTHENTICATION_REQUIRED" ]
        }
      }
    },
    "Rule" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "protocol" : {
          "type" : "string"
        },
        "ipRangeCidr" : {
          "type" : "string"
        },
        "ports" : {
          "type" : "string"
        },
        "access" : {
          "type" : "string",
          "enum" : [ "Allow", "Deny" ]
        }
      }
    },
    "Schema" : {
      "type" : "object",
      "properties" : {
        "fields" : {
          "type" : "array",
          "xml" : {
            "name" : "field"
          },
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Field"
          }
        }
      }
    },
    "SchemaReference" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "ServiceDocumentDeleteTaskState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "taskSubStage" : {
          "type" : "string"
        },
        "taskInfo" : {
          "$ref" : "#/definitions/TaskState"
        },
        "serviceTaskCallback" : {
          "$ref" : "#/definitions/ServiceTaskCallback"
        },
        "requestTrackerLink" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "deleteDocumentKind" : {
          "type" : "string"
        }
      }
    },
    "ServiceErrorResponse" : {
      "type" : "object",
      "properties" : {
        "message" : {
          "type" : "string"
        },
        "stackTrace" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "statusCode" : {
          "type" : "integer",
          "format" : "int32"
        },
        "documentKind" : {
          "type" : "string"
        },
        "errorCode" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ServiceNetwork" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "aliases" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "ipv4_address" : {
          "type" : "string"
        },
        "ipv6_address" : {
          "type" : "string"
        }
      }
    },
    "ServiceStat" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "latestValue" : {
          "type" : "number",
          "format" : "double"
        },
        "accumulatedValue" : {
          "type" : "number",
          "format" : "double"
        },
        "version" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastUpdateMicrosUtc" : {
          "type" : "integer",
          "format" : "int64"
        },
        "kind" : {
          "type" : "string"
        },
        "serviceReference" : {
          "type" : "string",
          "format" : "uri"
        },
        "logHistogram" : {
          "$ref" : "#/definitions/ServiceStatLogHistogram"
        }
      }
    },
    "ServiceStatLogHistogram" : {
      "type" : "object",
      "properties" : {
        "bins" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      }
    },
    "ServiceStats" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "kind" : {
          "type" : "string"
        },
        "entries" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ServiceStat"
          }
        },
        "parentServiceId" : {
          "type" : "string"
        },
        "extractedId" : {
          "type" : "string"
        }
      }
    },
    "ServiceTaskCallback" : {
      "type" : "object",
      "properties" : {
        "taskStageComplete" : {
          "type" : "string",
          "enum" : [ "CREATED", "STARTED", "FINISHED", "FAILED", "CANCELLED" ]
        },
        "taskStageFailed" : {
          "type" : "string",
          "enum" : [ "CREATED", "STARTED", "FINISHED", "FAILED", "CANCELLED" ]
        },
        "subStageComplete" : {
          "type" : "object"
        },
        "subStageFailed" : {
          "type" : "object"
        },
        "serviceSelfLink" : {
          "type" : "string"
        }
      }
    },
    "SkipExportBehavior" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "Sort" : {
      "type" : "object"
    },
    "SslTrustCertificateState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "certificate" : {
          "type" : "string"
        },
        "resourceLink" : {
          "type" : "string"
        },
        "commonName" : {
          "type" : "string"
        },
        "issuerName" : {
          "type" : "string"
        },
        "serial" : {
          "type" : "string"
        },
        "fingerprint" : {
          "type" : "string"
        },
        "validSince" : {
          "type" : "integer",
          "format" : "int64"
        },
        "validTo" : {
          "type" : "integer",
          "format" : "int64"
        },
        "subscriptionLink" : {
          "type" : "string"
        }
      }
    },
    "SslTrustImportRequest" : {
      "type" : "object",
      "properties" : {
        "hostUri" : {
          "type" : "string",
          "format" : "uri"
        },
        "acceptCertificate" : {
          "type" : "boolean",
          "default" : false
        },
        "resourceLink" : {
          "type" : "string"
        }
      }
    },
    "SslTrustedCertificateState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "certificate" : {
          "type" : "string"
        },
        "resourceLink" : {
          "type" : "string"
        },
        "commonName" : {
          "type" : "string"
        },
        "issuerName" : {
          "type" : "string"
        },
        "serial" : {
          "type" : "string"
        },
        "fingerprint" : {
          "type" : "string"
        },
        "validSince" : {
          "type" : "integer",
          "format" : "int64"
        },
        "validTo" : {
          "type" : "integer",
          "format" : "int64"
        },
        "subscriptionLink" : {
          "type" : "string"
        }
      }
    },
    "StartsWithOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "StaticForm" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FormReference"
      }, {
        "type" : "object",
        "required" : [ "layout" ],
        "properties" : {
          "layout" : {
            "$ref" : "#/definitions/layout"
          }
        }
      } ]
    },
    "StaticLayout" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LayoutReference"
      }, {
        "type" : "object",
        "required" : [ "layout" ],
        "properties" : {
          "layout" : {
            "$ref" : "#/definitions/layout"
          }
        }
      } ]
    },
    "StaticPermissibleValueList" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PermissibleValueList"
      }, {
        "type" : "object",
        "properties" : {
          "values" : {
            "type" : "array",
            "xml" : {
              "name" : "value"
            },
            "items" : {
              "$ref" : "#/definitions/value"
            }
          }
        }
      } ]
    },
    "StaticSchema" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SchemaReference"
      }, {
        "type" : "object",
        "required" : [ "schema" ],
        "properties" : {
          "schema" : {
            "$ref" : "#/definitions/Schema"
          }
        }
      } ]
    },
    "StorageDescription" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "desc" : {
          "type" : "string"
        },
        "groupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tagLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "regionId" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "type" : {
          "type" : "string"
        },
        "authCredentialsLink" : {
          "type" : "string"
        },
        "resourcePoolLink" : {
          "type" : "string"
        },
        "adapterManagementReference" : {
          "type" : "string",
          "format" : "uri"
        },
        "capacityBytes" : {
          "type" : "integer",
          "format" : "int64"
        },
        "endpointLink" : {
          "type" : "string"
        },
        "supportsEncryption" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "StorageItem" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "tagLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "diskProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "defaultItem" : {
          "type" : "boolean",
          "default" : false
        },
        "supportsEncryption" : {
          "type" : "boolean",
          "default" : false
        },
        "storageDescriptionLink" : {
          "type" : "string"
        },
        "resourceGroupLink" : {
          "type" : "string"
        }
      }
    },
    "SubnetState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "desc" : {
          "type" : "string"
        },
        "groupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tagLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "regionId" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "networkLink" : {
          "type" : "string"
        },
        "zoneId" : {
          "type" : "string"
        },
        "subnetCIDR" : {
          "type" : "string"
        },
        "gatewayAddress" : {
          "type" : "string"
        },
        "dnsServerAddresses" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "domain" : {
          "type" : "string"
        },
        "dnsSearchDomains" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "supportPublicIpAddress" : {
          "type" : "boolean",
          "default" : false
        },
        "defaultForZone" : {
          "type" : "boolean",
          "default" : false
        },
        "endpointLink" : {
          "type" : "string"
        }
      }
    },
    "SubsetOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "SupersetOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "TagAssignmentRequest" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "resourceLink" : {
          "type" : "string"
        },
        "tagsToUnassign" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/KeyValue"
          }
        },
        "tagsToAssign" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/KeyValue"
          }
        },
        "external" : {
          "type" : "boolean",
          "default" : false
        },
        "tagLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "TagState" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "key" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        },
        "external" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "TaskState" : {
      "type" : "object",
      "properties" : {
        "stage" : {
          "type" : "string",
          "enum" : [ "CREATED", "STARTED", "FINISHED", "FAILED", "CANCELLED" ]
        },
        "isDirect" : {
          "type" : "boolean",
          "default" : false
        },
        "failure" : {
          "$ref" : "#/definitions/ServiceErrorResponse"
        }
      }
    },
    "TimeSpan" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "description" : "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days.",
        "xml" : {
          "name" : "timeSpan"
        }
      } ]
    },
    "TopicTaskInfo" : {
      "type" : "object",
      "properties" : {
        "task" : {
          "type" : "string"
        },
        "stage" : {
          "type" : "string"
        },
        "substage" : {
          "type" : "string"
        }
      }
    },
    "UniqueConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "UnspecifiedEvaluator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object"
      } ]
    },
    "VirtualServer" : {
      "allOf" : [ {
        "$ref" : "#/definitions/networkObject"
      }, {
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "default" : false
          },
          "ipAddress" : {
            "type" : "string"
          },
          "protocol" : {
            "type" : "string"
          },
          "port" : {
            "type" : "integer",
            "format" : "int32"
          },
          "connectionLimit" : {
            "type" : "integer",
            "format" : "int32"
          },
          "connectionRate" : {
            "type" : "integer",
            "format" : "int32"
          },
          "poolId" : {
            "type" : "string"
          },
          "applicationProfileId" : {
            "type" : "string"
          },
          "enableServiceInsertion" : {
            "type" : "boolean",
            "default" : false
          },
          "accelerationEnabled" : {
            "type" : "boolean",
            "default" : false
          },
          "applicationRulesIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "xml" : {
          "name" : "networkObject"
        }
      } ]
    },
    "VisibilityConstraint" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Constraint"
      }, {
        "type" : "object"
      } ]
    },
    "WithinOperator" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CriteriaOperator"
      }, {
        "type" : "object"
      } ]
    },
    "WrapperClause" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Evaluator"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/Evaluator"
          }
        }
      } ]
    },
    "allocateComponentRequest" : {
      "type" : "object",
      "properties" : {
        "allocationConstraint" : {
          "$ref" : "#/definitions/allocationConstraint"
        },
        "userContext" : {
          "$ref" : "#/definitions/requestUserContext"
        },
        "componentInfo" : {
          "$ref" : "#/definitions/componentRequestInfo"
        },
        "blueprintId" : {
          "type" : "string"
        },
        "blueprintName" : {
          "type" : "string"
        },
        "blueprintRequestId" : {
          "type" : "string"
        },
        "requestId" : {
          "type" : "string"
        },
        "rootCafeDeploymentId" : {
          "type" : "string"
        },
        "callbackServiceId" : {
          "type" : "string"
        },
        "rootCafeRequestId" : {
          "type" : "string"
        },
        "callbackAdditionalUrlPath" : {
          "type" : "string"
        },
        "requestType" : {
          "type" : "string",
          "enum" : [ "PROVISION", "UPDATE", "ALLOCATE", "DEALLOCATE" ]
        },
        "targetResourceId" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "allocateComponentRequest"
      }
    },
    "allocationConstraint" : {
      "type" : "object",
      "properties" : {
        "filter" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "allocationConstraint"
      }
    },
    "booleanLiteral" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "value" : {
          "type" : "boolean",
          "description" : "The boolean value.",
          "default" : false
        }
      },
      "description" : "Wraps a boolean value.",
      "xml" : {
        "name" : "booleanLiteral"
      }
    },
    "catalogOrganizationReference" : {
      "type" : "object",
      "properties" : {
        "tenantRef" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLabel" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "subtenantRef" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "subtenantLabel" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "catalogOrganizationReference"
      }
    },
    "catalogPrincipal" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string"
        },
        "tenantName" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "ref" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "type" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "GROUP", "USER", "CUSTOM_GROUP", "SSO_GROUP" ]
        }
      },
      "xml" : {
        "name" : "catalogPrincipal"
      }
    },
    "catalogResource" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "iconId" : {
          "type" : "string"
        },
        "resourceTypeRef" : {
          "$ref" : "#/definitions/labelledReference"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "ACTIVE", "PENDING_APPROVAL", "REJECTED", "DELETED" ]
        },
        "catalogItem" : {
          "$ref" : "#/definitions/labelledReference"
        },
        "requestId" : {
          "type" : "string"
        },
        "requestState" : {
          "type" : "string",
          "enum" : [ "UNSUBMITTED", "SUBMITTED", "DELETED", "PENDING_PRE_APPROVAL", "PRE_APPROVAL_SEND_ERROR", "PRE_APPROVED", "PRE_REJECTED", "PROVIDER_DELETION_ERROR", "IN_PROGRESS", "PROVIDER_SEND_ERROR", "PROVIDER_COMPLETED", "PROVIDER_FAILED", "PENDING_POST_APPROVAL", "POST_APPROVAL_SEND_ERROR", "POST_APPROVED", "POST_REJECTION_RECEIVED", "ROLLBACK_ERROR", "POST_REJECTED", "SUCCESSFUL", "PARTIALLY_SUCCESSFUL", "FAILED" ]
        },
        "providerBinding" : {
          "$ref" : "#/definitions/ProviderBinding"
        },
        "owners" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/catalogPrincipal"
          }
        },
        "organization" : {
          "$ref" : "#/definitions/catalogOrganizationReference"
        },
        "dateCreated" : {
          "type" : "string",
          "format" : "date-time"
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time"
        },
        "hasLease" : {
          "type" : "boolean",
          "default" : false
        },
        "lease" : {
          "$ref" : "#/definitions/ResourceLease"
        },
        "leaseForDisplay" : {
          "$ref" : "#/definitions/timeSpan"
        },
        "hasCosts" : {
          "type" : "boolean",
          "default" : false
        },
        "costs" : {
          "$ref" : "#/definitions/ResourceCosts"
        },
        "costToDate" : {
          "$ref" : "#/definitions/literal"
        },
        "expenseMonthToDate" : {
          "$ref" : "#/definitions/CostToDate"
        },
        "totalCost" : {
          "$ref" : "#/definitions/literal"
        },
        "parentResourceRef" : {
          "$ref" : "#/definitions/labelledReference"
        },
        "hasChildren" : {
          "type" : "boolean",
          "default" : false
        },
        "operations" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/consumerResourceOperation"
          }
        },
        "forms" : {
          "$ref" : "#/definitions/ResourceForms"
        },
        "resourceData" : {
          "$ref" : "#/definitions/literalMap"
        },
        "destroyDate" : {
          "type" : "string",
          "format" : "date-time"
        }
      },
      "xml" : {
        "name" : "catalogResource"
      }
    },
    "complexLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "componentTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's component type."
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's component."
          },
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier for this literal's class."
          },
          "typeFilter" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The type filter for this literal."
          },
          "values" : {
            "description" : "Map of values, keyed by the field ids of some complex type.",
            "$ref" : "#/definitions/literalMap"
          }
        },
        "description" : "A complex value composed of multiple values keyed by the field ids of some complex type.",
        "xml" : {
          "name" : "complexLiteral"
        }
      } ]
    },
    "componentRequestInfo" : {
      "type" : "object",
      "properties" : {
        "componentId" : {
          "type" : "string"
        },
        "componentTypeId" : {
          "type" : "string"
        },
        "componentSchema" : {
          "$ref" : "#/definitions/Schema"
        },
        "componentData" : {
          "$ref" : "#/definitions/literalMap"
        },
        "requestInputData" : {
          "$ref" : "#/definitions/literalMap"
        },
        "resourceId" : {
          "type" : "string"
        },
        "previousComponentData" : {
          "$ref" : "#/definitions/literalMap"
        }
      },
      "xml" : {
        "name" : "componentRequestInfo"
      }
    },
    "compositionProviderRequest" : {
      "type" : "object",
      "properties" : {
        "userContext" : {
          "$ref" : "#/definitions/requestUserContext"
        },
        "componentInfo" : {
          "$ref" : "#/definitions/componentRequestInfo"
        },
        "blueprintId" : {
          "type" : "string"
        },
        "blueprintName" : {
          "type" : "string"
        },
        "blueprintRequestId" : {
          "type" : "string"
        },
        "requestId" : {
          "type" : "string"
        },
        "rootCafeDeploymentId" : {
          "type" : "string"
        },
        "callbackServiceId" : {
          "type" : "string"
        },
        "rootCafeRequestId" : {
          "type" : "string"
        },
        "callbackAdditionalUrlPath" : {
          "type" : "string"
        },
        "requestType" : {
          "type" : "string",
          "enum" : [ "PROVISION", "UPDATE", "ALLOCATE", "DEALLOCATE" ]
        },
        "targetResourceId" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "compositionProviderRequest"
      }
    },
    "consumerResourceOperation" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "iconId" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "ACTION", "EXTENSION" ]
        },
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "extensionId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "providerTypeId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "bindingId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "hasForm" : {
          "type" : "boolean",
          "xml" : {
            "attribute" : true
          },
          "default" : false
        },
        "formScale" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "SMALL", "BIG" ]
        }
      },
      "xml" : {
        "name" : "consumerResourceOperation"
      }
    },
    "dateTimeLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date."
          }
        },
        "description" : "Wraps a Date & Time value. This is a wrapper for the Java {@link Date} class.",
        "xml" : {
          "name" : "dateTimeLiteral"
        }
      } ]
    },
    "decimalLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "number",
            "format" : "double",
            "description" : "The decimal value."
          }
        },
        "description" : "Wraps a decimal value.",
        "xml" : {
          "name" : "decimalLiteral"
        }
      } ]
    },
    "deploymentNetworkProfile" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "desc" : {
          "type" : "string"
        },
        "groupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tagLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "regionId" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "isolationType" : {
          "type" : "string",
          "enum" : [ "NONE", "SUBNET", "SECURITY_GROUP" ]
        },
        "isolationNetworkLink" : {
          "type" : "string"
        },
        "isolationNetworkCIDR" : {
          "type" : "string"
        },
        "subnetLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "securityGroupLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "isolationNetworkCIDRAllocationLink" : {
          "type" : "string"
        },
        "isolatedSubnetCIDRPrefix" : {
          "type" : "integer",
          "format" : "int32"
        }
      },
      "xml" : {
        "name" : "deploymentNetworkProfile"
      }
    },
    "deploymentSecurityGroup" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "desc" : {
          "type" : "string"
        },
        "groupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tagLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "regionId" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "authCredentialsLink" : {
          "type" : "string"
        },
        "resourcePoolLink" : {
          "type" : "string"
        },
        "instanceAdapterReference" : {
          "type" : "string",
          "format" : "uri"
        },
        "endpointLink" : {
          "type" : "string"
        },
        "ingress" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Rule"
          }
        },
        "egress" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Rule"
          }
        }
      },
      "xml" : {
        "name" : "deploymentSecurityGroup"
      }
    },
    "deploymentStorageProfile" : {
      "type" : "object",
      "properties" : {
        "documentSelfLink" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentUpdateTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "documentExpirationTimeMicros" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "tenantLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "desc" : {
          "type" : "string"
        },
        "groupLinks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tagLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "regionId" : {
          "type" : "string"
        },
        "customProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "storageItems" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StorageItem"
          }
        },
        "endpointLink" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "deploymentStorageProfile"
      }
    },
    "entityRef" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "classId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The identifier of the type or category to which the referenced entity belongs."
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The unique identifier of the referenced entity, encoded as a string"
          },
          "componentId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The durable identifier of a component registered in the suite component registry that owns and manages the referenced entity. This can be omitted if this component can be derived from the context within which this entity reference occurs. It must be specified, if no such context exists or if the component differs from that defined by the context."
          },
          "label" : {
            "type" : "string"
          }
        },
        "description" : "Represents a reference to an entity defined somewhere in the suite.",
        "xml" : {
          "name" : "entityRef"
        }
      } ]
    },
    "entityRefEx" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "href" : {
            "type" : "string",
            "description" : "the Href"
          }
        },
        "description" : "Represents a reference to an entity by uri",
        "xml" : {
          "name" : "entityRefEx"
        }
      } ]
    },
    "externalProviderResource" : {
      "type" : "object",
      "properties" : {
        "description" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "resourceData" : {
          "$ref" : "#/definitions/literalMap"
        },
        "resourceTypeId" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "externalProviderResource"
      }
    },
    "integerLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The integer value."
          }
        },
        "description" : "Wraps a signed 64-bit integer value.",
        "xml" : {
          "name" : "integerLiteral"
        }
      } ]
    },
    "labelledReference" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "label" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "labelledReference"
      }
    },
    "layout" : {
      "type" : "object",
      "properties" : {
        "pages" : {
          "type" : "array",
          "xml" : {
            "name" : "page",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/LayoutPage"
          }
        }
      },
      "xml" : {
        "name" : "layout"
      }
    },
    "literal" : {
      "type" : "object",
      "discriminator" : "type",
      "description" : "Wraps a value such that values of different types can be treated generically.",
      "xml" : {
        "name" : "literal"
      }
    },
    "literalMap" : {
      "type" : "object",
      "properties" : {
        "entries" : {
          "type" : "array",
          "xml" : {
            "name" : "entry"
          },
          "items" : {
            "$ref" : "#/definitions/LiteralMapEntry"
          }
        }
      },
      "description" : "Equivalent of java.util.Map",
      "xml" : {
        "name" : "literalMap"
      }
    },
    "loadBalancer" : {
      "allOf" : [ {
        "$ref" : "#/definitions/networkObject"
      }, {
        "type" : "object",
        "properties" : {
          "pools" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/loadBalancerPool"
            }
          },
          "monitors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/loadBalancerMonitor"
            }
          },
          "virtualIps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/loadBalancerVirtualIp"
            }
          },
          "vipNetwork" : {
            "type" : "string"
          },
          "vipNicIndex" : {
            "type" : "integer",
            "format" : "int32"
          },
          "tierNetwork" : {
            "type" : "string"
          },
          "tierNicIndex" : {
            "type" : "integer",
            "format" : "int32"
          },
          "loggingLevel" : {
            "type" : "string"
          },
          "loadBalancerTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        },
        "xml" : {
          "name" : "loadBalancer"
        }
      } ]
    },
    "loadBalancerMember" : {
      "type" : "object",
      "properties" : {
        "address" : {
          "type" : "string"
        },
        "port" : {
          "type" : "integer",
          "format" : "int32"
        },
        "extensionData" : {
          "$ref" : "#/definitions/literalMap"
        },
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "loadBalancerMember"
      }
    },
    "loadBalancerMonitor" : {
      "type" : "object",
      "properties" : {
        "timeout" : {
          "type" : "integer",
          "format" : "int32"
        },
        "interval" : {
          "type" : "integer",
          "format" : "int32"
        },
        "maxRetries" : {
          "type" : "integer",
          "format" : "int32"
        },
        "method" : {
          "type" : "string"
        },
        "monitorPath" : {
          "type" : "string"
        },
        "send" : {
          "type" : "string"
        },
        "receive" : {
          "type" : "string"
        },
        "newEntity" : {
          "type" : "boolean",
          "default" : false
        },
        "extensionData" : {
          "$ref" : "#/definitions/literalMap"
        },
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "loadBalancerMonitor"
      }
    },
    "loadBalancerPool" : {
      "type" : "object",
      "properties" : {
        "protocol" : {
          "type" : "string"
        },
        "healthCheckProtocol" : {
          "type" : "string"
        },
        "port" : {
          "type" : "integer",
          "format" : "int32"
        },
        "memberPort" : {
          "type" : "integer",
          "format" : "int32"
        },
        "monitorPort" : {
          "type" : "integer",
          "format" : "int32"
        },
        "memberMaxConnections" : {
          "type" : "integer",
          "format" : "int32"
        },
        "memberMinConnections" : {
          "type" : "integer",
          "format" : "int32"
        },
        "acceleration" : {
          "type" : "boolean",
          "default" : false
        },
        "transparent" : {
          "type" : "boolean",
          "default" : false
        },
        "connectionRate" : {
          "type" : "integer",
          "format" : "int32"
        },
        "connectionLimit" : {
          "type" : "integer",
          "format" : "int32"
        },
        "algorithm" : {
          "type" : "string"
        },
        "algorithmParameter" : {
          "type" : "string"
        },
        "persistenceMethod" : {
          "type" : "string"
        },
        "persistenceCookieName" : {
          "type" : "string"
        },
        "persistenceCookieMode" : {
          "type" : "string"
        },
        "persistenceExpiration" : {
          "type" : "integer",
          "format" : "int32"
        },
        "monitorIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "uniqueMonitorId" : {
          "type" : "string"
        },
        "servicePortId" : {
          "type" : "string"
        },
        "members" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/loadBalancerMember"
          }
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "externalId" : {
          "type" : "string"
        },
        "extensionData" : {
          "$ref" : "#/definitions/literalMap"
        },
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "loadBalancerPool"
      }
    },
    "loadBalancerVirtualIp" : {
      "type" : "object",
      "properties" : {
        "poolId" : {
          "type" : "string"
        },
        "address" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "externalId" : {
          "type" : "string"
        },
        "extensionData" : {
          "$ref" : "#/definitions/literalMap"
        },
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "loadBalancerVirtualIp"
      }
    },
    "money" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "format" : "double",
            "description" : "The amount associated with this value (with no specific currency)."
          }
        },
        "description" : "Represents a single, precise monetary value.",
        "xml" : {
          "name" : "money"
        }
      } ]
    },
    "moneyRange" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "minValue" : {
            "type" : "number",
            "format" : "double",
            "description" : "The lower limit of the range."
          },
          "maxValue" : {
            "type" : "number",
            "format" : "double",
            "description" : "The upper limit of the range."
          }
        },
        "description" : "Represents a range of money values, between some defined minimums and maximums.",
        "xml" : {
          "name" : "moneyRange"
        }
      } ]
    },
    "moneyRate" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "cost" : {
            "description" : "The cost (including optional currency code).",
            "$ref" : "#/definitions/literal"
          }
        },
        "description" : "A base type for literals representing a rate of some monetary value over a specified basis. E.g. $5 / hour; $1-2 / GB.",
        "xml" : {
          "name" : "moneyRate"
        }
      } ]
    },
    "moneyTimeRate" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "basis" : {
            "description" : "The span of time to calculate the rate of money for.",
            "$ref" : "#/definitions/timeSpan"
          }
        },
        "description" : "Represents a rate of money over time.",
        "xml" : {
          "name" : "moneyTimeRate"
        }
      } ]
    },
    "multipleLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "elementTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            },
            "description" : "The data type of the items in the list.",
            "enum" : [ "STRING", "INTEGER", "DECIMAL", "MONEY", "MONEY_RANGE", "MONEY_TIME_RATE", "BOOLEAN", "ENTITY_REFERENCE", "DATE_TIME", "TIME_SPAN", "SECURE_STRING", "COMPLEX" ]
          },
          "items" : {
            "type" : "array",
            "xml" : {
              "name" : "item"
            },
            "description" : "The list of specified values. NOTE: All values must be of the same data type.",
            "items" : {
              "$ref" : "#/definitions/literal"
            }
          }
        },
        "description" : "A literal which represents multiple values. All of these component values must be of the same data type.",
        "xml" : {
          "name" : "multipleLiteral"
        }
      } ]
    },
    "natRule" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "externalId" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "order" : {
          "type" : "integer",
          "format" : "int32"
        },
        "action" : {
          "type" : "string"
        },
        "protocol" : {
          "type" : "string"
        },
        "enabled" : {
          "type" : "boolean",
          "default" : false
        },
        "originalAddress" : {
          "type" : "string"
        },
        "translatedAddress" : {
          "type" : "string"
        },
        "originalPort" : {
          "type" : "string"
        },
        "translatedPort" : {
          "type" : "string"
        },
        "tag" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "interfaceIndex" : {
          "type" : "integer",
          "format" : "int32"
        },
        "peerInterfaceIndex" : {
          "type" : "integer",
          "format" : "int32"
        },
        "machineId" : {
          "type" : "string"
        },
        "componentName" : {
          "type" : "string"
        },
        "componentId" : {
          "type" : "string"
        },
        "targetType" : {
          "type" : "string"
        },
        "userDefined" : {
          "type" : "boolean",
          "default" : false
        },
        "networkInterfaceId" : {
          "type" : "string"
        },
        "edgeId" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "natRule"
      }
    },
    "network" : {
      "allOf" : [ {
        "$ref" : "#/definitions/networkObject"
      }, {
        "type" : "object",
        "properties" : {
          "networkProfileType" : {
            "type" : "string",
            "enum" : [ "NONE", "PRIVATE", "NAT", "ROUTED", "EXTERNAL" ]
          },
          "machineIdCollection" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "networkBackings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/networkBacking"
            }
          },
          "natRules" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/natRule"
            }
          },
          "networkTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        },
        "xml" : {
          "name" : "network"
        }
      } ]
    },
    "networkBacking" : {
      "type" : "object",
      "properties" : {
        "externalId" : {
          "type" : "string"
        },
        "computeResourceNetworkId" : {
          "type" : "string"
        },
        "computeResourceName" : {
          "type" : "string"
        },
        "computeResourceId" : {
          "type" : "string"
        },
        "extensionData" : {
          "$ref" : "#/definitions/literalMap"
        },
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "networkBacking"
      }
    },
    "networkObject" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "externalId" : {
          "type" : "string"
        },
        "extensionData" : {
          "$ref" : "#/definitions/literalMap"
        },
        "id" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "networkObject"
      }
    },
    "networkProviderRequest" : {
      "type" : "object",
      "properties" : {
        "networkObject" : {
          "$ref" : "#/definitions/networkObject"
        },
        "rootCafeRequestId" : {
          "type" : "string"
        },
        "requestId" : {
          "type" : "string"
        },
        "originalCallbackServiceId" : {
          "type" : "string"
        },
        "callbackServiceId" : {
          "type" : "string"
        },
        "tenantId" : {
          "type" : "string"
        },
        "subtenantId" : {
          "type" : "string"
        },
        "operationType" : {
          "type" : "string",
          "enum" : [ "UNREGISTER", "DEALLOCATE", "UPDATE", "CREATE", "READ", "ALLOCATE", "DELETE" ]
        },
        "resourceId" : {
          "type" : "string"
        },
        "componentData" : {
          "$ref" : "#/definitions/literalMap"
        },
        "previousComponentData" : {
          "$ref" : "#/definitions/literalMap"
        },
        "requestInputData" : {
          "$ref" : "#/definitions/literalMap"
        },
        "componentTypeId" : {
          "type" : "string"
        },
        "blueprintRequestId" : {
          "type" : "string"
        },
        "callbackAdditionalUrlPath" : {
          "type" : "string"
        },
        "componentId" : {
          "type" : "string"
        },
        "rootCafeDeploymentId" : {
          "type" : "string"
        },
        "blueprintId" : {
          "type" : "string"
        },
        "blueprintName" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "networkProviderRequest"
      }
    },
    "providerRequest" : {
      "type" : "object",
      "properties" : {
        "requestedObjectId" : {
          "type" : "string"
        },
        "requestType" : {
          "type" : "string",
          "enum" : [ "CATALOG_ITEM", "RESOURCE_ACTION" ]
        },
        "catalogItemTypeId" : {
          "type" : "string"
        },
        "targetResourceId" : {
          "type" : "string"
        },
        "targetResourceTypeId" : {
          "type" : "string"
        },
        "targetResourceProviderId" : {
          "type" : "string"
        },
        "targetCafeResourceId" : {
          "type" : "string"
        },
        "requestBindingId" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "reasons" : {
          "type" : "string"
        },
        "organization" : {
          "$ref" : "#/definitions/catalogOrganizationReference"
        },
        "requestedFor" : {
          "type" : "string"
        },
        "requestedBy" : {
          "type" : "string"
        },
        "requestData" : {
          "$ref" : "#/definitions/literalMap"
        },
        "solution" : {
          "type" : "boolean",
          "default" : false
        },
        "rootCafeResourceId" : {
          "type" : "string"
        },
        "catalogRequestId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "callbackServiceId" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          }
        },
        "requestNumber" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "providerRequest"
      }
    },
    "providerRollbackRequest" : {
      "type" : "object",
      "properties" : {
        "resourceIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "xml" : {
        "name" : "providerRollbackRequest"
      }
    },
    "requestUserContext" : {
      "type" : "object",
      "properties" : {
        "requestedBy" : {
          "type" : "string"
        },
        "requestedFor" : {
          "type" : "string"
        },
        "tenantId" : {
          "type" : "string"
        },
        "subtenantId" : {
          "type" : "string"
        },
        "reasons" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "requestUserContext"
      }
    },
    "secureString" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "The string value."
          }
        },
        "description" : "Wraps a secured string value, such as a password.",
        "xml" : {
          "name" : "secureString"
        }
      } ]
    },
    "securityGroup" : {
      "allOf" : [ {
        "$ref" : "#/definitions/networkObject"
      }, {
        "type" : "object",
        "properties" : {
          "machineIdCollection" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "ipAddressCollection" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "securityGroupTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "internal" : {
            "type" : "boolean",
            "xml" : {
              "attribute" : true
            },
            "default" : false
          }
        },
        "xml" : {
          "name" : "securityGroup"
        }
      } ]
    },
    "securityPolicy" : {
      "allOf" : [ {
        "$ref" : "#/definitions/networkObject"
      }, {
        "type" : "object",
        "properties" : {
          "securityPolicyTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          },
          "internal" : {
            "type" : "boolean",
            "xml" : {
              "attribute" : true
            },
            "default" : false
          }
        },
        "xml" : {
          "name" : "securityPolicy"
        }
      } ]
    },
    "securityTag" : {
      "allOf" : [ {
        "$ref" : "#/definitions/networkObject"
      }, {
        "type" : "object",
        "properties" : {
          "securityTagTypeId" : {
            "type" : "string",
            "xml" : {
              "attribute" : true
            }
          }
        },
        "xml" : {
          "name" : "securityTag"
        }
      } ]
    },
    "stringLiteral" : {
      "allOf" : [ {
        "$ref" : "#/definitions/literal"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "The string value."
          }
        },
        "description" : "Wraps a String value.",
        "xml" : {
          "name" : "stringLiteral"
        }
      } ]
    },
    "timeSpan" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "unit" : {
          "type" : "string",
          "xml" : {
            "attribute" : true
          },
          "description" : "The unit of measure for the time span. e.g: days.",
          "enum" : [ "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS", "WEEKS", "MONTHS", "YEARS" ]
        },
        "amount" : {
          "type" : "integer",
          "format" : "int64",
          "xml" : {
            "attribute" : true
          },
          "description" : "The amount for the time span."
        }
      },
      "description" : "A literal defining period of time. This period is represented some integral number of a specified timeUnit.e.g. 6 days.",
      "xml" : {
        "name" : "timeSpan"
      }
    },
    "value" : {
      "type" : "object",
      "properties" : {
        "underlyingValue" : {
          "$ref" : "#/definitions/literal"
        },
        "label" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "value"
      }
    }
  }
}