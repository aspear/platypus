{
  "info": {
    "title": "Log Insight",
    "description": "  The Log Insight REST API provides programmatic access to Log Insight and to\nthe data it collects.  You can use the API to insert events into the Log\nInsight data store, to query for events and to change the Log Insight\nconfiguration.  You can also use the API to install or upgrade Log Insight.\n\n  Use 9543 port for all REST API calls for the correct operation of the service.\n\n\n## About Authorization\n  Most Log Insight APIs require authentication.  Your application can use the\n[`/api/v1/sessions`](#sessions) API to sign into Log Insight and obtain a session ID.  The\napplication can then pass that session ID in the `Authorization` header of\nsubsequent API calls to have them authorized.\n### About Session ID's\n  A session ID can be obtained from the [`POST /api/v1/sessions`](#sessions) API by\nproviding valid credentials.  The session ID can then be used to\nauthenticate subsequent API requests.  Session ID's are sequences of\nletters, numbers and other characters.  They don't have any particular\nmeaning.  Each session ID can be used to authenticate API requests until it\nexpires.  The time-to-live (TTL) of a session ID is provided in the\nresponse to the [`POST /api/v1/sessions`](#sessions) API.\n\n\n## About the Query API\n  The Query API is a part of the Log Insight REST API that lets you to retrieve\nevents and groups of events:\n\n- Queries for events and groups of events are available as HTTP GET requests:\n  1. Events: `GET /api/v1/events/constraint1/constraint2/…?param1&param2&…`\n  1. Aggregated events: `GET /api/v1/aggregated-events/constraint1/constraint2/…?param1&param2&…`\n- Queries can include both static fields, and dynamic fields defined in content\n  packs.\n- Common aggregation functions (COUNT, UCOUNT, AVG, MIN, MAX, SUM, STDDEV,\n  VARIANCE, SAMPLE) can be used on both static and dynamic fields.\n- Events can be aggregated by time into fixed-width bins.\n- Default values are set for simple & fast queries:\n  1. Events: up to 100 events from the last 5 minutes, with a 30-second timeout.\n  1. Aggregated events: 100 events from the last 5 minutes, a 30-second timeout,\n     5-second time-bins, and the COUNT aggregation function.\n\n### Limits to what can be queried\n- By default, results are limited to 100 events or bins.  You can raise that\n  limit up to 20,000 events or 2,000 bins using the **limit** query parameter.\n- By default, queries have to complete execution within 30 seconds.  If the\n  query cannot complete within that time, partial results are returned.  You can\n  raise the timeout to a higher value using the **timeout** query parameter.\n- Finally, by default, events with a timestamp of one minute ago or newer are\n  retrieved.  You can specify a longer time range with a **timestamp**\n  constraint.  See the constraints section below.\n\n### Querying for events\nTo query for events, issue the [`GET /api/v1/events`](#events___path_) API.\n\n\n## About the Ingestion API\n  The Ingetsion API is part of the Query API. This API lets you ingest and index new \nlog messages contained in the body. To send the log messages, issue the\n[`POST /api/v1events/ingest/{UUID}`](#events_ingest) API.\n",
    "version": "v1"
  },
  "host": "127.0.0.1:9543",
  "x-basePath": "/api/{version}",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "securityDefinitions": {
    "Bearer": {
      "description": "Authenticated requests must include an Authorization header with a session\nID that was retrieved from [`/api/v1/sessions`](#sessions).  The session ID\nhas a limited lifespan.  Access is allowed only to resources that the user is\nauthorized to use.\n",
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    }
  },
  "definitions": {
    "feedback": {
      "type": "boolean"
    },
    "NodeInfo": {
      "description": "Node Info",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "netmask": {
          "type": "string"
        },
        "gateway": {
          "type": "string"
        },
        "lastRestartTime": {
          "type": "integer"
        },
        "dnsServers": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "ip",
        "version",
        "status",
        "netmask",
        "gateway",
        "lastRestartTime",
        "dnsServers"
      ]
    },
    "includeGeneralConfig": {
      "type": "boolean"
    },
    "includeNtpConfig": {
      "type": "boolean"
    },
    "includeEventForwarderConfig": {
      "type": "boolean"
    },
    "includeSmtpConfig": {
      "type": "boolean"
    },
    "includeArchivingConfig": {
      "type": "boolean"
    },
    "includeAgentsGroups": {
      "type": "boolean"
    },
    "AnonymousField": {
      "title": "Field content provided directly",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "content": {
          "type": "string"
        }
      }
    },
    "PositionalField": {
      "title": "Field content from range in event text",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "startPosition": {
          "type": "integer"
        },
        "length": {
          "type": "integer"
        }
      }
    },
    "ContentlessField": {
      "title": "Field content from range in event text",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "licensekey": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "configuration": {
          "type": "string"
        },
        "expiration": {
          "type": "number"
        },
        "licenseKey": {
          "type": "string"
        },
        "infinite": {
          "type": "boolean"
        },
        "count": {
          "type": "integer"
        },
        "typeEnum": {
          "type": "string"
        }
      }
    },
    "licensekeys": {
      "type": "object",
      "additionalProperties": true
    },
    "smtpserverconfig": {
      "type": "object",
      "properties": {
        "server": {
          "type": "string"
        },
        "port": {
          "type": "integer"
        },
        "sslAuth": {
          "type": "boolean"
        },
        "tls": {
          "type": "boolean"
        },
        "defaultSender": {
          "type": "string"
        },
        "login": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "required": [
        "server",
        "port",
        "sslAuth",
        "tls",
        "defaultSender",
        "login",
        "password"
      ]
    },
    "notificationserverconfig": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "email"
          ],
          "type": "string"
        },
        "config": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "config"
      ]
    },
    "sendNotification": {
      "type": "boolean"
    },
    "dataInterval": {
      "type": "integer"
    },
    "intervalUnit": {
      "enum": [
        "MINUTES",
        "HOURS",
        "DAYS",
        "WEEKS",
        "MONTHS"
      ],
      "type": "string"
    },
    "timesource": {
      "type": "object",
      "properties": {
        "timeReference": {
          "enum": [
            "NTP_SERVER",
            "ESX_HOST"
          ],
          "type": "string"
        },
        "ntpServers": {
          "description": "List of remote NTP server FQDN/IPs",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "timeReference"
      ]
    },
    "timeout": {
      "minimum": -1,
      "type": "integer"
    },
    "alwaysUseEnglish": {
      "type": "boolean"
    },
    "UpgradeNodeList": {
      "type": "object"
    },
    "NodeUpgradeStatus": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "fullVersion": {
          "type": "string"
        }
      }
    },
    "UpgradeStatusSingleNode": {
      "type": "object",
      "properties": {
        "status": {
          "enum": [
            "Started",
            "PendingSnapshot",
            "CreatingSnapshot",
            "Pending",
            "TransferringPak",
            "Upgrading",
            "Restarting",
            "Verifying",
            "Complete",
            "Cancelled",
            "Failed",
            "NewDeployment"
          ],
          "type": "string"
        },
        "timestamp": {
          "type": "number"
        },
        "timestampString": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      },
      "required": [
        "status",
        "timestamp",
        "timestampString",
        "token"
      ]
    },
    "upgradestatus": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "pakFileName": {
          "type": "string"
        },
        "nodeStatuses": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pakFileUrl": {
          "type": "string"
        },
        "eulaAccepted": {
          "type": "boolean"
        },
        "masterToken": {
          "type": "string"
        },
        "clusterStatus": {
          "enum": [
            "Started",
            "PendingSnapshot",
            "CreatingSnapshot",
            "Pending",
            "TransferringPak",
            "Upgrading",
            "Restarting",
            "Verifying",
            "Complete",
            "Cancelled",
            "Failed",
            "NewDeployment"
          ],
          "type": "string"
        },
        "started": {
          "type": "string"
        },
        "finished": {
          "type": "string"
        },
        "startedString": {
          "type": "string"
        },
        "finishedString": {
          "type": "string"
        }
      }
    },
    "UserAccount": {
      "description": "User account",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "apiId": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "username",
        "apiId",
        "email",
        "type"
      ]
    }
  },
  "responses": {
    "trait:optionalAuthentication:401": {
      "description": "The request was refused because it included invalid authentication\ncredentials.  The `Authorization` header was present, but it contained\nan invalid session ID.\n\n[Obtain a new session ID](#sessions) and retry the request,\nor make an unauthenticated request without the `Authorization` header.\n",
      "schema": {
        "example": "Invalid session ID\n"
      }
    },
    "trait:optionalAuthentication:440": {
      "description": "The request was refused because the session ID has\nexpired.  Obtain a new session ID from [`/api/v1/sessions`](#sessions),\nor make an unauthenticated request without the `Authorization` header.\n",
      "schema": {
        "example": "Login Timeout\n"
      }
    },
    "trait:authenticated:401": {
      "description": "The request was refused because it lacks valid authentication\ncredentials.  This can happen if the `Authorization` header\nwas missing, or if it contained an invalid session ID.\n\n[Obtain a new session ID](#sessions) and retry the request,\nor make an unauthenticated request without the `Authorization` header.\n",
      "schema": {
        "example": "Invalid session ID\n"
      }
    },
    "trait:authenticated:440": {
      "description": "The request was refused because the session ID has\nexpired.  Obtain a new session ID from [`/api/v1/sessions`](#sessions).\n",
      "schema": {
        "example": "Login Timeout\n"
      }
    },
    "trait:notAuthenticated:503": {
      "description": "Log Insight did not have its initial configuration set up yet. See [/deployment/new](#deployment_new).",
      "schema": {
        "example": {
          "errorMessage": "LI server should be bootstrapped to process this API call"
        },
        "type": "object",
        "properties": {
          "errorMessage": {
            "type": "string"
          }
        },
        "required": [
          "errorMessage"
        ]
      }
    },
    "trait:internalError:500": {
      "description": "Internal error while processing the client request",
      "schema": {
        "example": {
          "errorMessage": "The operation failed due to an internal error."
        },
        "type": "object",
        "properties": {
          "errorMessage": {
            "type": "string"
          }
        },
        "required": [
          "errorMessage"
        ]
      }
    },
    "trait:techPreview:200": {
      "description": "",
      "headers": {
        "VMware-LI-API-Status": {
          "description": "Indicates the life-cycle status of the API.",
          "type": "string",
          "displayName": "VMware-LI-API-Status"
        },
        "Warning": {
          "description": "Additional information about the life-cycle status of the API.",
          "type": "string",
          "displayName": "Warning"
        }
      }
    },
    "trait:deprecated:200": {
      "description": "",
      "headers": {
        "VMware-LI-API-Status": {
          "description": "Indicates the life-cycle status of the API.",
          "type": "string",
          "displayName": "VMware-LI-API-Status"
        },
        "Warning": {
          "description": "Additional information about the life-cycle status of the API.",
          "type": "string",
          "displayName": "Warning"
        }
      }
    },
    "trait:jsonRequest:400": {
      "description": "The request failed because the request body either did not contain\nvalid JSON, or did not match the required JSON format.\n",
      "schema": {
        "example": {
          "errorMessage": "Invalid request body.",
          "errorCode": "JSON_FORMAT_ERROR",
          "errorDetails": {
            "reason": "..."
          }
        },
        "type": "object",
        "properties": {
          "errorMessage": {
            "type": "string"
          },
          "errorCode": {
            "enum": [
              "FIELD_ERROR",
              "TEST_ERROR",
              "JSON_FORMAT_ERROR",
              "LICENSE_ERROR",
              "VSPHERE_INTEGRATION_ERROR",
              "VROPS_INTEGRATION_ERROR",
              "UPGRADE_ERROR",
              "SEARCH_ERROR",
              "AGENT_ERROR",
              "RBAC_COMMON_ERROR",
              "RBAC_USERS_ERROR",
              "RBAC_GROUPS_ERROR",
              "RBAC_ADGROUPS_ERROR",
              "RBAC_DATASETS_ERROR",
              "RBAC_VIDM_GROUPS_ERROR",
              "SECURITY_ERROR",
              "DEPLOYMENT_ERROR",
              "SUPPORT_BUNDLE_ERROR",
              "LOAD_BALANCER_ERROR",
              "VIDM_ERROR",
              "QUERY_ERROR"
            ],
            "type": "string"
          },
          "errorDetails": {
            "properties": {
              "errorCode": {
                "type": "string"
              },
              "reason": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      }
    },
    "trait:bootstrapOnly:403": {
      "description": "This interface is not available after the Log Insight server has been configured.\n",
      "schema": {
        "example": {
          "errorMessage": "This call isn't allowed after the LI server is bootstrapped"
        },
        "type": "object",
        "properties": {
          "errorMessage": {
            "type": "string"
          }
        },
        "required": [
          "errorMessage"
        ]
      }
    },
    "trait:restricted:403": {
      "description": "The request was refused because the user doesn't have enough permissions.\n",
      "schema": {
        "example": "Forbidden"
      }
    },
    "trait:notFound:404": {
      "description": "Not found.\n",
      "schema": {
        "example": "Not Found"
      }
    }
  },
  "paths": {
    "/ad": {
      "get": {
        "description": "Gets the Active Directory configuration settings.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_ad",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecated:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "Updates the Active Directory configuration settings.",
        "schemes": [
          "https"
        ],
        "operationId": "POST_ad",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecated:200"
          },
          "400": {
            "$ref": "#/responses/trait:jsonRequest:400"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "enableAD": true,
                "domain": "example.com",
                "domainServers": [
                  "host1.example.com",
                  "host2.example.com",
                  "host3.example.com"
                ],
                "username": "exampleuser",
                "password": "password",
                "connType": "CUSTOM",
                "port": 636,
                "sslOnly": true
              },
              "type": "object",
              "properties": {
                "enableAD": {
                  "type": "boolean"
                },
                "domain": {
                  "type": "string"
                },
                "domainServers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "connType": {
                  "enum": [
                    "STANDARD",
                    "GLOBAL_CAT",
                    "CUSTOM"
                  ],
                  "type": "string"
                },
                "port": {
                  "type": "integer"
                },
                "sslOnly": {
                  "type": "boolean"
                }
              },
              "required": [
                "enableAD"
              ]
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/ad/test": {
      "post": {
        "description": "Tests if the Active Directory domain controller can be accessed using\nthe credentials in the configuration settings.\n",
        "schemes": [
          "https"
        ],
        "operationId": "POST_ad-test",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecated:200"
          },
          "400": {
            "$ref": "#/responses/trait:jsonRequest:400"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "enableAD": true,
                "domain": "example.com",
                "domainServers": [
                  "host1.example.com",
                  "host2.example.com",
                  "host3.example.com"
                ],
                "username": "exampleuser",
                "password": "password",
                "connType": "CUSTOM",
                "port": 636,
                "sslOnly": true
              },
              "type": "object",
              "properties": {
                "enableAD": {
                  "type": "boolean"
                },
                "domain": {
                  "type": "string"
                },
                "domainServers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "connType": {
                  "enum": [
                    "STANDARD",
                    "GLOBAL_CAT",
                    "CUSTOM"
                  ],
                  "type": "string"
                },
                "port": {
                  "type": "integer"
                },
                "sslOnly": {
                  "type": "boolean"
                }
              },
              "required": [
                "enableAD"
              ]
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/agent": {
      "get": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "GET_agent",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/agent/config": {
      "put": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "PUT_agent-config",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/agent/config/{agentId}": {
      "get": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "GET_agent-config-agentId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "default": "",
            "description": "TODO: add a description",
            "type": "string",
            "in": "query",
            "name": "hash"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "agentId"
        }
      ]
    },
    "/agent/groups": {
      "get": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "GET_agent-groups",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "POST_agent-groups",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/agent/groups/{cpNameSpace}/{groupName}": {
      "delete": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_agent-groups-cpNameSpace-groupName",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "groupName"
        },
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "cpNameSpace"
        }
      ]
    },
    "/agent/groups/{groupName}": {
      "put": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "PUT_agent-groups-groupName",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_agent-groups-groupName",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "required": true,
            "default": "",
            "description": "TODO: add a description",
            "type": "string",
            "in": "query",
            "name": "cpNameSpace"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "groupName"
        }
      ]
    },
    "/agent/packages": {
      "post": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "POST_agent-packages",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/agent/packages/files/{fileName}": {
      "get": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "GET_agent-packages-files-fileName",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_agent-packages-files-fileName",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "fileName"
        }
      ]
    },
    "/agent/packages/info/{packageType}": {
      "get": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "GET_agent-packages-info-packageType",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "default": "",
            "description": "TODO: add a description",
            "type": "string",
            "in": "query",
            "name": "version"
          },
          {
            "default": 32,
            "minimum": 32,
            "maximum": 64,
            "description": "TODO: add a description",
            "type": "integer",
            "in": "query",
            "name": "osBitness"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "packageType"
        }
      ]
    },
    "/agent/packages/types/{packageType}": {
      "get": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "GET_agent-packages-types-packageType",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "default": 32,
            "minimum": 32,
            "maximum": 64,
            "description": "TODO: add a description",
            "type": "integer",
            "in": "query",
            "name": "osBitness"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "packageType"
        }
      ]
    },
    "/agent/search": {
      "post": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "POST_agent-search",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/aggregated-events/{+path}": {
      "get": {
        "description": "Queries Log Insight for groups of events.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_aggregated-events-+path",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "example": {
                "complete": true,
                "duration": 90,
                "results": [
                  {
                    "minTimestamp": 0,
                    "maxTimestamp": 9223372036828800000,
                    "event_type": "v4_4a6fdf4b",
                    "COUNT(event)": 50,
                    "SAMPLE(event)": {
                      "text": "[2017-06-13 15:27:22.606] ...",
                      "timestamp": 1497353242606,
                      "timestampString": "2017-06-13 15:27:22.606 GMT+04:00",
                      "appname": "Vpxa",
                      "event_type": "v4_df1bc800",
                      "hostname": "li-qe-esx5.vmware.com",
                      "source": "127.0.0.1"
                    }
                  },
                  {
                    "minTimestamp": 0,
                    "maxTimestamp": 9223372036828800000,
                    "event_type": "v4_dc0c9904",
                    "COUNT(event)": 100,
                    "SAMPLE(event)": {
                      "text": "[2017-06-13 15:27:52.491-0700] ...",
                      "timestamp": 1497353272491,
                      "timestampString": "2017-06-13 15:27:52.491 GMT+04:00",
                      "event_type": "v4_dc0c9904",
                      "source": "127.0.0.1"
                    }
                  }
                ]
              },
              "type": "object",
              "properties": {
                "bins": {
                  "description": "Lists bins of events matching the query. Present when view=DEFAULT",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "minTimestamp": {
                        "description": "The lowest timestamp in the bin, in milliseconds since 00:00:00 UTC on 1 January 1970",
                        "type": "integer"
                      },
                      "minTimestampString": {
                        "description": "The lowest timestamp in the bin, in ISO8601 format with time zone offset",
                        "type": "string"
                      },
                      "maxTimestamp": {
                        "description": "The highest timestamp in the bin, in milliseconds since 00:00:00 UTC on 1 January 1970",
                        "type": "integer"
                      },
                      "maxTimestampString": {
                        "description": "The highest timestamp in the bin, in ISO8601 format with time zone offset",
                        "type": "string"
                      },
                      "keys": {
                        "description": "The values of the GROUP BY fields for this bin. Present only when GROUP BY fields are requested with 'group-by-field'.",
                        "type": "array"
                      },
                      "value": {
                        "description": "The value of the aggregation function on the events in the bin. Present when one aggregation function is requested; see also 'values'.",
                        "type": "number"
                      },
                      "values": {
                        "description": "The values of the aggregation functions on the events in the bin. Present when more than one aggregation function is requested; see also 'value'.",
                        "type": "array"
                      }
                    }
                  }
                },
                "results": {
                  "description": "List of rows in simple query results table. Present when view=SIMPLE",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true
                  }
                },
                "complete": {
                  "description": "Indicates whether all matching bins were returned (true), or if only some of them where, because the timeout expired or other problems (false).  See also 'warnings'.",
                  "type": "boolean"
                },
                "duration": {
                  "description": "The time required to compute the results, in milliseconds.",
                  "type": "number"
                },
                "warnings": {
                  "description": "A list of problems that were encountered while processing the query. Present if 'complete' is false.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "An identifier for the problem.",
                        "type": "number"
                      },
                      "details": {
                        "description": "A description of the problem.",
                        "type": "string"
                      },
                      "progress": {
                        "description": "The fraction of events processed when the timeout expired. Present for id 128 which indicates that the request timeout expired.",
                        "type": "number"
                      }
                    }
                  }
                }
              },
              "required": [
                "complete"
              ]
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "default": 100,
            "minimum": 1,
            "maximum": 2147483647,
            "description": "The maximum number of events to retrieve.",
            "type": "integer",
            "in": "query",
            "name": "limit"
          },
          {
            "default": 30000,
            "minimum": 0,
            "maximum": 2147483647,
            "description": "The time to wait for a response.  If the complete result is not\navailable within that time, partial result is returned and the\n`complete` flag is set to `true`.\n",
            "type": "integer",
            "in": "query",
            "name": "timeout"
          },
          {
            "default": "DEFAULT",
            "description": "The format of query results in the reponse.\n",
            "enum": [
              "DEFAULT",
              "SIMPLE"
            ],
            "type": "string",
            "in": "query",
            "name": "view"
          },
          {
            "description": "The namespace of a content pack to take fields from.\nIf provided, fields defined in the given content-pack are returned\nin the response, in addition to static fields. Specify this\nparameter more than once to extract fields from several content\npacks.  If this parameter is not specified, then only static fields\nare returned in the response payload\n",
            "type": "string",
            "in": "query",
            "name": "content-pack-fields"
          },
          {
            "default": 5000,
            "minimum": 1,
            "maximum": 2147483647,
            "description": "The time-span of time range bins, in milliseconds.",
            "type": "integer",
            "in": "query",
            "name": "bin-width"
          },
          {
            "default": "COUNT",
            "description": "The aggregation function to use. One of the following values:\n- **COUNT**: The count of the events in each bin is returned\n- **SAMPLE**: An arbitrary event from each bin is returned\n- **UCOUNT**: The count of unique values in the bin\n- **MIN**: The minimum value in the bin\n- **MAX**: The maximum value in the bin\n- **SUM**: The sum of the values in the bin\n- **STDDEV**: The standard deviation of the values in the bin\n- **VARIANCE**: The variance of the values in the bin\n",
            "enum": [
              "COUNT",
              "SAMPLE",
              "UCOUNT",
              "MIN",
              "MAX",
              "SUM",
              "STDDEV",
              "VARIANCE"
            ],
            "type": "string",
            "in": "query",
            "name": "aggregation-function"
          },
          {
            "description": "The field to aggregate.  This parameter is required for all\naggregation functions, except `COUNT` and `SAMPLE`.  It is not\nsupported for `COUNT` and `SAMPLE`.\n",
            "type": "string",
            "in": "query",
            "name": "aggregation-field"
          },
          {
            "description": "Specify additional GROUP BY fields. Use subsequent key=value pairs\nto specify custom bins for numeric fields: use bin-width=12345 to\nspecify fixed-width bins; use bins=10,100,500 to specify a specific\nset of bin boundaries; if neither is specified then each individual\nvalue of the field is assigned to its own bucket.\n",
            "type": "string",
            "in": "query",
            "name": "group-by-field"
          },
          {
            "description": "The aggregation function to use for ordering the bins.  Those are\nthe same functions as in the **aggregation-function** query\nparameter, with the exception of `SAMPLE` which is not supported.\n",
            "enum": [
              "COUNT",
              "UCOUNT",
              "MIN",
              "MAX",
              "SUM",
              "STDDEV",
              "VARIANCE"
            ],
            "type": "string",
            "in": "query",
            "name": "order-by-function"
          },
          {
            "description": "The field to sort by.",
            "type": "string",
            "in": "query",
            "name": "order-by-field"
          },
          {
            "default": "DESC",
            "description": "The sort direction.",
            "enum": [
              "ASC",
              "DESC"
            ],
            "type": "string",
            "in": "query",
            "name": "order-by-direction"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "Specifies constraints on the events to retrieve.  See the\n[specifying constraints section of /events](#events) for details.\n",
          "type": "string",
          "in": "path",
          "name": "+path"
        }
      ]
    },
    "/alerts": {
      "get": {
        "description": "Get all the alerts created by the current user",
        "schemes": [
          "https"
        ],
        "operationId": "GET_alerts",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "A list of all the current user's alerts",
            "schema": {
              "example": [
                {
                  "id": "32ffeeb9-427e-475d-a983-a92a77c485c8",
                  "enabled": true,
                  "emailEnabled": true,
                  "vcopsEnabled": false,
                  "alertType": "RATE_BASED_WITH_GROUPS",
                  "name": "Hello Alert 3",
                  "hitCount": 5,
                  "searchPeriod": 300000,
                  "searchInterval": 60000,
                  "emails": "email@address.com",
                  "info": "This is an example of a rate based with groups alert<br>",
                  "vcopsResourceName": "",
                  "vcopsCriticality": "none",
                  "lastRanAt": 1497017941283,
                  "lastRanAtString": "2017-06-09 18:19:01.283 GMT+04:00",
                  "nextRunAt": 1497018241283,
                  "nextRunAtString": "2017-06-09 18:24:01.283 GMT+04:00",
                  "runCount": 79,
                  "lastRunTime": 4,
                  "totalRunTime": 55186,
                  "lastHitTimestamp": 1497017922145,
                  "lastHitTimestampString": "2017-06-09 18:18:42.145 GMT+04:00",
                  "ownerUuid": "1f024658-8b93-4f45-ae59-4657f96a5450",
                  "webhookEnabled": false,
                  "autoClearAlertAfterTimeout": false
                },
                {
                  "id": "94110e39-efd8-48ae-a767-2bf96afefc40",
                  "enabled": true,
                  "emailEnabled": true,
                  "vcopsEnabled": false,
                  "alertType": "NEW_EVENT_TYPE",
                  "name": "Hello Alert 4",
                  "hitCount": 0,
                  "searchPeriod": 300000,
                  "searchInterval": 300000,
                  "emails": "email@address.com",
                  "info": "This is an example of a new event type alert<br>",
                  "vcopsResourceName": "",
                  "vcopsCriticality": "immediate",
                  "lastRanAt": 1497017941391,
                  "lastRanAtString": "2017-06-09 18:19:01.391 GMT+04:00",
                  "nextRunAt": 1497018241391,
                  "nextRunAtString": "2017-06-09 18:24:01.391 GMT+04:00",
                  "runCount": 17,
                  "lastRunTime": 1,
                  "totalRunTime": 31,
                  "lastHitTimestamp": 1497017922145,
                  "lastHitTimestampString": "2017-06-09 18:18:42.145 GMT+04:00",
                  "ownerUuid": "1f024658-8b93-4f45-ae59-4657f96a5450",
                  "webhookEnabled": false,
                  "autoClearAlertAfterTimeout": false
                },
                {
                  "id": "df3cb390-1a0b-48ea-baa3-1116858127bc",
                  "enabled": true,
                  "emailEnabled": true,
                  "vcopsEnabled": false,
                  "alertType": "RATE_BASED",
                  "name": "Hello Alert 2",
                  "hitCount": 0,
                  "searchPeriod": 300000,
                  "searchInterval": 300000,
                  "emails": "email@address.com",
                  "info": "This is an example of an on any match alert",
                  "vcopsResourceName": "",
                  "vcopsCriticality": "none",
                  "lastRanAtString": "2017-06-09 18:19:01.439 GMT+04:00",
                  "nextRunAt": 1497018241439,
                  "nextRunAtString": "2017-06-09 18:24:01.439 GMT+04:00",
                  "runCount": 17,
                  "lastRunTime": 1,
                  "totalRunTime": 36,
                  "lastHitTimestamp": 1497017922145,
                  "lastHitTimestampString": "2017-06-09 18:18:42.145 GMT+04:00",
                  "ownerUuid": "1f024658-8b93-4f45-ae59-4657f96a5450",
                  "webhookEnabled": false,
                  "autoClearAlertAfterTimeout": false
                },
                {
                  "id": "fc7bfcac-200c-4840-b349-b885338f03d1",
                  "enabled": true,
                  "emailEnabled": true,
                  "vcopsEnabled": true,
                  "alertType": "RATE_BASED",
                  "name": "Hello Alert",
                  "hitCount": 2,
                  "searchPeriod": 300000,
                  "searchInterval": 60000,
                  "emails": "email1@address.com, email2@address.com",
                  "info": "This is an example of a rate based alert",
                  "vcopsResourceName": "local-li-wdc-li1-04",
                  "vcopsCriticality": "immediate",
                  "lastRanAt": 1497018241300,
                  "lastRanAtString": "2017-06-09 18:24:01.300 GMT+04:00",
                  "nextRunAt": 1497018541300,
                  "nextRunAtString": "2017-06-09 18:29:01.300 GMT+04:00",
                  "runCount": 86,
                  "lastRunTime": 1,
                  "totalRunTime": 1039,
                  "lastHitTimestamp": 1497018235310,
                  "lastHitTimestampString": "2017-06-09 18:23:55.310 GMT+04:00",
                  "ownerUuid": "1f024658-8b93-4f45-ae59-4657f96a5450",
                  "webhookEnabled": true,
                  "webhookURLs": "http://example.com/webhook1 http://example.com/webhook2",
                  "autoClearAlertAfterTimeout": false
                }
              ],
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                    "type": "string"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "alertType": {
                    "enum": [
                      "RATE_BASED",
                      "RATE_BASED_WITH_GROUPS",
                      "NEW_EVENT_TYPE"
                    ],
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "hitCount": {
                    "minimum": 0,
                    "type": "number"
                  },
                  "searchPeriod": {
                    "minimum": 60000,
                    "type": "integer"
                  },
                  "searchInterval": {
                    "minimum": 60000,
                    "type": "integer"
                  },
                  "info": {
                    "type": "string"
                  },
                  "emailEnabled": {
                    "type": "boolean"
                  },
                  "emails": {
                    "description": "A comma-separated list of email addresses",
                    "type": "string"
                  },
                  "vcopsEnabled": {
                    "type": "boolean"
                  },
                  "vcopsResourceName": {
                    "type": "string"
                  },
                  "vcopsCriticality": {
                    "enum": [
                      "none",
                      "information",
                      "warning",
                      "immediate",
                      "critical"
                    ],
                    "type": "string"
                  },
                  "webhookEnabled": {
                    "type": "boolean"
                  },
                  "webhookURLs": {
                    "description": "A space-separated list of URLs",
                    "type": "string"
                  },
                  "lastRanAt": {
                    "type": "integer"
                  },
                  "lastRanAtString": {
                    "type": "string"
                  },
                  "nextRunAt": {
                    "type": "integer"
                  },
                  "nextRanAtString": {
                    "type": "string"
                  },
                  "runCount": {
                    "type": "integer"
                  },
                  "lastRunTime": {
                    "type": "integer"
                  },
                  "totalRunTime": {
                    "type": "integer"
                  },
                  "lastHitTimestamp": {
                    "type": "integer"
                  },
                  "lastHitTimestampString": {
                    "type": "string"
                  },
                  "ownerUuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                    "type": "string"
                  },
                  "autoClearAlertAfterTimeout": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "Create a new alert by given parameters.\nThe 'name', 'alertType' and 'chartQuery' parameters are mandatory.\nThere are some optional parameters as well, but some of them could be required in specific combination with other parameters. For example:\n- When the field 'emailEnabled' is set to 'true' then at least one email address should be specified in the 'emails' field.\n- When the field 'webhookEnabled' is set to 'true' then at least one URL should be specified in the 'webhookURLs' field.\n- When the field 'vcopsEnabled' is set to 'true' then both 'vcopsResourceName' and 'vcopsResourceKindKey' fields should be specified.\n",
        "schemes": [
          "https"
        ],
        "operationId": "POST_alerts",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "201": {
            "description": "Created a new alert with the provided data",
            "schema": {
              "example": {
                "id": "fc7bfcac-200c-4840-b349-b885338f03d1",
                "enabled": true,
                "emailEnabled": true,
                "vcopsEnabled": true,
                "alertType": "RATE_BASED",
                "name": "Hello Alert",
                "hitCount": 2,
                "searchPeriod": 300000,
                "searchInterval": 60000,
                "emails": "email1@address.com, email2@address.com",
                "info": "This is an example of a rate based alert",
                "vcopsResourceName": "local-li-wdc-li1-04",
                "vcopsCriticality": "immediate",
                "lastRanAt": 1497017941283,
                "lastRanAtString": "2017-06-09 18:19:01.283 GMT+04:00",
                "nextRunAt": 1497018241283,
                "nextRunAtString": "2017-06-09 18:24:01.283 GMT+04:00",
                "runCount": 7,
                "lastRunTime": 800,
                "totalRunTime": 946,
                "lastHitTimestamp": 1497017922145,
                "lastHitTimestampString": "2017-06-09 18:18:42.145 GMT+04:00",
                "ownerUuid": "1f024658-8b93-4f45-ae59-4657f96a5450",
                "webhookEnabled": true,
                "webhookURLs": "http://example.com/webhook1 http://example.com/webhook2",
                "autoClearAlertAfterTimeout": false
              },
              "type": "object",
              "properties": {
                "id": {
                  "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                  "type": "string"
                },
                "enabled": {
                  "type": "boolean"
                },
                "alertType": {
                  "enum": [
                    "RATE_BASED",
                    "RATE_BASED_WITH_GROUPS",
                    "NEW_EVENT_TYPE"
                  ],
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "hitCount": {
                  "minimum": 0,
                  "type": "number"
                },
                "searchPeriod": {
                  "minimum": 60000,
                  "type": "integer"
                },
                "searchInterval": {
                  "minimum": 60000,
                  "type": "integer"
                },
                "info": {
                  "type": "string"
                },
                "emailEnabled": {
                  "type": "boolean"
                },
                "emails": {
                  "description": "A comma-separated list of email addresses",
                  "type": "string"
                },
                "vcopsEnabled": {
                  "type": "boolean"
                },
                "vcopsResourceName": {
                  "type": "string"
                },
                "vcopsCriticality": {
                  "enum": [
                    "none",
                    "information",
                    "warning",
                    "immediate",
                    "critical"
                  ],
                  "type": "string"
                },
                "webhookEnabled": {
                  "type": "boolean"
                },
                "webhookURLs": {
                  "description": "A space-separated list of URLs",
                  "type": "string"
                },
                "lastRanAt": {
                  "type": "integer"
                },
                "lastRanAtString": {
                  "type": "string"
                },
                "nextRunAt": {
                  "type": "integer"
                },
                "nextRanAtString": {
                  "type": "string"
                },
                "runCount": {
                  "type": "integer"
                },
                "lastRunTime": {
                  "type": "integer"
                },
                "totalRunTime": {
                  "type": "integer"
                },
                "lastHitTimestamp": {
                  "type": "integer"
                },
                "lastHitTimestampString": {
                  "type": "string"
                },
                "ownerUuid": {
                  "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                  "type": "string"
                },
                "autoClearAlertAfterTimeout": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Error trying to create an alert with incorrect parameters",
            "schema": {
              "example": {
                "errorMessage": "The 'name' field is required"
              },
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "name": "My Alert",
                "info": "This is an example of a rate based alert",
                "recommendation": "Some text for recommendation",
                "emailEnabled": true,
                "emails": "email1@example.com, email2@example.com",
                "webhookEnabled": true,
                "webhookURLs": "http://username:password@example.com/webhook1 http://example.com/webhook2",
                "vcopsEnabled": true,
                "vcopsResourceName": "test-vsan-template",
                "vcopsCriticality": "none",
                "vcopsResourceKindKey": "resourceName=test-vsan-template&adapterKindKey=VMWARE&resourceKindKey=VirtualMachine&identifiers=VMEntityName::test-vsan-template$$VMEntityObjectID::vm-107$$VMEntityVCID::94a1a7ea-ff03-4c18-827a-413998b7308c",
                "autoClearAlertAfterTimeout": false,
                "alertType": "RATE_BASED",
                "hitCount": 4,
                "searchPeriod": 300000,
                "hitOperator": "GREATER_THAN",
                "chartQuery": "{\"query\":\"alert\",\"startTimeMillis\":1500451917374,\"endTimeMillis\":1500532872702,\"piqlFunctionGroups\":[{\"functions\":[{\"label\":\"Count\",\"value\":\"COUNT\",\"requiresField\":false,\"numericOnly\":false}],\"field\":null}],\"dateFilterPreset\":\"LAST_5_MINUTES\",\"shouldGroupByTime\":true,\"eventSortOrder\":\"DESC\",\"summarySortOrder\":\"DESC\",\"compareQueryOrderBy\":\"TREND\",\"compareQuerySortOrder\":\"DESC\",\"compareQueryOptions\":null,\"messageViewType\":\"EVENTS\",\"constraintToggle\":\"ALL\",\"piqlFunction\":{\"label\":\"Count\",\"value\":\"COUNT\",\"requiresField\":false,\"numericOnly\":false},\"piqlFunctionField\":null,\"fieldConstraints\":[],\"supplementalConstraints\":[],\"groupByFields\":[],\"extractedFields\":[]}"
              },
              "type": "object",
              "properties": {
                "alertType": {
                  "enum": [
                    "RATE_BASED",
                    "RATE_BASED_WITH_GROUPS",
                    "NEW_EVENT_TYPE"
                  ],
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "chartQuery": {
                  "description": "A query in json format",
                  "type": "string"
                },
                "hitCount": {
                  "minimum": 0,
                  "default": 0,
                  "type": "number"
                },
                "hitOperator": {
                  "default": "GREATER_THAN",
                  "enum": [
                    "GREATER_THAN",
                    "LESS_THAN"
                  ],
                  "type": "string"
                },
                "searchPeriod": {
                  "minimum": 60000,
                  "default": 300000,
                  "type": "integer"
                },
                "info": {
                  "type": "string"
                },
                "recommendation": {
                  "type": "string"
                },
                "emailEnabled": {
                  "default": false,
                  "type": "boolean"
                },
                "emails": {
                  "description": "A comma-separated list of email addresses",
                  "type": "string"
                },
                "vcopsEnabled": {
                  "default": false,
                  "type": "boolean"
                },
                "vcopsResourceName": {
                  "type": "string"
                },
                "vcopsResourceKindKey": {
                  "type": "string"
                },
                "vcopsCriticality": {
                  "default": "none",
                  "enum": [
                    "none",
                    "information",
                    "warning",
                    "immediate",
                    "critical"
                  ],
                  "type": "string"
                },
                "autoClearAlertAfterTimeout": {
                  "default": false,
                  "type": "boolean"
                },
                "webhookEnabled": {
                  "default": false,
                  "type": "boolean"
                },
                "webhookURLs": {
                  "description": "A space-separated list of URLs",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "alertType",
                "chartQuery"
              ]
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/alerts/all": {
      "get": {
        "description": "Get all alerts for all users (only admin users can make this call)",
        "schemes": [
          "https"
        ],
        "operationId": "GET_alerts-all",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/alerts/{alertId}": {
      "get": {
        "description": "Get alert by UUID",
        "schemes": [
          "https"
        ],
        "operationId": "GET_alerts-alertId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the alert information",
            "schema": {
              "example": {
                "id": "fc7bfcac-200c-4840-b349-b885338f03d1",
                "enabled": true,
                "emailEnabled": true,
                "vcopsEnabled": true,
                "alertType": "RATE_BASED",
                "name": "Hello Alert",
                "hitCount": 2,
                "searchPeriod": 300000,
                "searchInterval": 60000,
                "emails": "email1@address.com, email2@address.com",
                "info": "This is an example of a rate based alert",
                "vcopsResourceName": "local-li-wdc-li1-04",
                "vcopsCriticality": "immediate",
                "lastRanAt": 1497017941283,
                "lastRanAtString": "2017-06-09 18:19:01.283 GMT+04:00",
                "nextRunAt": 1497018241283,
                "nextRunAtString": "2017-06-09 18:24:01.283 GMT+04:00",
                "runCount": 7,
                "lastRunTime": 800,
                "totalRunTime": 946,
                "lastHitTimestamp": 1497017922145,
                "lastHitTimestampString": "2017-06-09 18:18:42.145 GMT+04:00",
                "ownerUuid": "1f024658-8b93-4f45-ae59-4657f96a5450",
                "webhookEnabled": true,
                "webhookURLs": "http://example.com/webhook1 http://example.com/webhook2",
                "autoClearAlertAfterTimeout": false
              },
              "type": "object",
              "properties": {
                "id": {
                  "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                  "type": "string"
                },
                "enabled": {
                  "type": "boolean"
                },
                "alertType": {
                  "enum": [
                    "RATE_BASED",
                    "RATE_BASED_WITH_GROUPS",
                    "NEW_EVENT_TYPE"
                  ],
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "hitCount": {
                  "minimum": 0,
                  "type": "number"
                },
                "searchPeriod": {
                  "minimum": 60000,
                  "type": "integer"
                },
                "searchInterval": {
                  "minimum": 60000,
                  "type": "integer"
                },
                "info": {
                  "type": "string"
                },
                "emailEnabled": {
                  "type": "boolean"
                },
                "emails": {
                  "description": "A comma-separated list of email addresses",
                  "type": "string"
                },
                "vcopsEnabled": {
                  "type": "boolean"
                },
                "vcopsResourceName": {
                  "type": "string"
                },
                "vcopsCriticality": {
                  "enum": [
                    "none",
                    "information",
                    "warning",
                    "immediate",
                    "critical"
                  ],
                  "type": "string"
                },
                "webhookEnabled": {
                  "type": "boolean"
                },
                "webhookURLs": {
                  "description": "A space-separated list of URLs",
                  "type": "string"
                },
                "lastRanAt": {
                  "type": "integer"
                },
                "lastRanAtString": {
                  "type": "string"
                },
                "nextRunAt": {
                  "type": "integer"
                },
                "nextRanAtString": {
                  "type": "string"
                },
                "runCount": {
                  "type": "integer"
                },
                "lastRunTime": {
                  "type": "integer"
                },
                "totalRunTime": {
                  "type": "integer"
                },
                "lastHitTimestamp": {
                  "type": "integer"
                },
                "lastHitTimestampString": {
                  "type": "string"
                },
                "ownerUuid": {
                  "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                  "type": "string"
                },
                "autoClearAlertAfterTimeout": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "description": "Delete alert by UUID",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_alerts-alertId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "The alert is successfully deleted",
            "schema": {
              "example": {}
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "The UUID of the alert",
          "type": "string",
          "in": "path",
          "name": "alertId"
        }
      ]
    },
    "/alerts/{alertId}/history": {
      "get": {
        "description": "Get alert history records",
        "schemes": [
          "https"
        ],
        "operationId": "GET_alerts-alertId-history",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved history records for specified alert",
            "schema": {
              "example": [
                {
                  "alertId": "2f8d5c71-177d-4625-b1f5-441908f870fa",
                  "resultUrl": "https://192.168.8.101:9443/explorer?existingChartQuery=%7B%22query%22%3A%22%22%2C%22startTimeMillis%22%3A1467313663823%2C%22endTimeMillis%22%3A1467313724401%2C%22piqlFunctionGroups%22%3A%5B%7B%22functions%22%3A%5B%7B%22label%22%3A%22Count%22%2C%22value%22%3A%22COUNT%22%2C%22requiresField%22%3Afalse%2C%22numericOnly%22%3Afalse%7D%5D%2C%22field%22%3Anull%7D%5D%2C%22dateFilterPreset%22%3A%22CUSTOM%22%2C%22shouldGroupByTime%22%3Atrue%2C%22eventSortOrder%22%3A%22DESC%22%2C%22summarySortOrder%22%3A%22DESC%22%2C%22compareQueryOrderBy%22%3A%22TREND%22%2C%22compareQuerySortOrder%22%3A%22DESC%22%2C%22compareQueryOptions%22%3Anull%2C%22messageViewType%22%3A%22EVENTS%22%2C%22constraintToggle%22%3A%22ALL%22%2C%22piqlFunction%22%3A%7B%22label%22%3A%22Count%22%2C%22value%22%3A%22COUNT%22%2C%22requiresField%22%3Afalse%2C%22numericOnly%22%3Afalse%7D%2C%22piqlFunctionField%22%3Anull%2C%22fieldConstraints%22%3A%5B%5D%2C%22supplementalConstraints%22%3A%5B%5D%2C%22groupByFields%22%3A%5B%5D%2C%22extractedFields%22%3A%5B%5D%7D",
                  "messages": [
                    {
                      "text": "hello world 3",
                      "timestamp": 1496994835768,
                      "timestampString": "2017-06-09 11:53:55.768 GMT+04:00",
                      "fields": [
                        {
                          "name": "Field2",
                          "content": "Content2_3"
                        },
                        {
                          "name": "__li_agent_id",
                          "content": "ok"
                        },
                        {
                          "name": "__li_source_path",
                          "content": "0:0:0:0:0:0:0:1"
                        },
                        {
                          "name": "Field1",
                          "content": "Content1_3"
                        }
                      ]
                    },
                    {
                      "text": "hello world 3",
                      "timestamp": 1496994835134,
                      "timestampString": "2017-06-09 11:53:55.134 GMT+04:00",
                      "fields": [
                        {
                          "name": "Field2",
                          "content": "Content2_3"
                        },
                        {
                          "name": "__li_agent_id",
                          "content": "ok"
                        },
                        {
                          "name": "__li_source_path",
                          "content": "0:0:0:0:0:0:0:1"
                        },
                        {
                          "name": "Field1",
                          "content": "Content1_3"
                        }
                      ]
                    }
                  ],
                  "acknowledged": false,
                  "triggerTimestamp": 1496994860447,
                  "triggerTimestampString": "2017-06-09 11:54:20.447 GMT+04:00"
                },
                {
                  "alertId": "2f8d5c71-177d-4625-b1f5-441908f870fa",
                  "resultUrl": "https://192.168.8.101:9443/explorer?existingChartQuery=%7B%22query%22%3A%22%22%2C%22startTimeMillis%22%3A1467313603317%2C%22endTimeMillis%22%3A1467313664391%2C%22piqlFunctionGroups%22%3A%5B%7B%22functions%22%3A%5B%7B%22label%22%3A%22Count%22%2C%22value%22%3A%22COUNT%22%2C%22requiresField%22%3Afalse%2C%22numericOnly%22%3Afalse%7D%5D%2C%22field%22%3Anull%7D%5D%2C%22dateFilterPreset%22%3A%22CUSTOM%22%2C%22shouldGroupByTime%22%3Atrue%2C%22eventSortOrder%22%3A%22DESC%22%2C%22summarySortOrder%22%3A%22DESC%22%2C%22compareQueryOrderBy%22%3A%22TREND%22%2C%22compareQuerySortOrder%22%3A%22DESC%22%2C%22compareQueryOptions%22%3Anull%2C%22messageViewType%22%3A%22EVENTS%22%2C%22constraintToggle%22%3A%22ALL%22%2C%22piqlFunction%22%3A%7B%22label%22%3A%22Count%22%2C%22value%22%3A%22COUNT%22%2C%22requiresField%22%3Afalse%2C%22numericOnly%22%3Afalse%7D%2C%22piqlFunctionField%22%3Anull%2C%22fieldConstraints%22%3A%5B%5D%2C%22supplementalConstraints%22%3A%5B%5D%2C%22groupByFields%22%3A%5B%5D%2C%22extractedFields%22%3A%5B%5D%7D",
                  "messages": [
                    {
                      "text": "hello world 3",
                      "timestamp": 1496994480389,
                      "timestampString": "2017-06-09 11:48:00.389 GMT+04:00",
                      "fields": [
                        {
                          "name": "Field2",
                          "content": "Content2_3"
                        },
                        {
                          "name": "__li_agent_id",
                          "content": "ok"
                        },
                        {
                          "name": "__li_source_path",
                          "content": "0:0:0:0:0:0:0:1"
                        },
                        {
                          "name": "Field1",
                          "content": "Content1_3"
                        }
                      ]
                    },
                    {
                      "text": "hello world 3",
                      "timestamp": 1496994476883,
                      "timestampString": "2017-06-09 11:47:56.883 GMT+04:00",
                      "fields": [
                        {
                          "name": "Field2",
                          "content": "Content2_3"
                        },
                        {
                          "name": "__li_agent_id",
                          "content": "ok"
                        },
                        {
                          "name": "__li_source_path",
                          "content": "0:0:0:0:0:0:0:1"
                        },
                        {
                          "name": "Field1",
                          "content": "Content1_3"
                        }
                      ]
                    }
                  ],
                  "acknowledged": false,
                  "triggerTimestamp": 1496994560395,
                  "triggerTimestampString": "2017-06-09 11:49:20.395 GMT+04:00"
                }
              ],
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "alertId": {
                    "type": "string"
                  },
                  "resultUrl": {
                    "type": "string"
                  },
                  "messages": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "text": {
                          "type": "string"
                        },
                        "timestamp": {
                          "type": "integer"
                        },
                        "timestampString": {
                          "type": "string"
                        },
                        "fields": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "content": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "name",
                              "content"
                            ]
                          }
                        }
                      },
                      "required": [
                        "text",
                        "timestamp",
                        "timestampString",
                        "fields"
                      ]
                    }
                  },
                  "acknowledged": {
                    "type": "boolean"
                  },
                  "triggerTimestamp": {
                    "type": "integer"
                  },
                  "triggerTimestampString": {
                    "type": "string"
                  }
                },
                "required": [
                  "alertId",
                  "triggerTimestamp",
                  "triggerTimestampString",
                  "resultUrl",
                  "messages",
                  "acknowledged"
                ]
              }
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "default": 20,
            "minimum": 1,
            "maximum": 50,
            "description": "The maximum number of records to retrieve.",
            "type": "integer",
            "in": "query",
            "name": "limit"
          },
          {
            "default": 9223372036854776000,
            "minimum": 0,
            "maximum": 9223372036854776000,
            "description": "The timestamp of the last record retrieved, this is the way to paginate when retrieving the records, no value if the first page is being retrieved",
            "type": "integer",
            "in": "query",
            "name": "fromTimestamp"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "The UUID of the alert",
          "type": "string",
          "in": "path",
          "name": "alertId"
        }
      ]
    },
    "/appliance/support-bundles": {
      "post": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "POST_appliance-support-bundles",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/appliance/support-bundles/{id}": {
      "get": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "GET_appliance-support-bundles-id",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "default": 60,
            "minimum": 0,
            "maximum": 9223372036854776000,
            "description": "TODO: add a description",
            "type": "integer",
            "in": "query",
            "name": "timeout"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_appliance-support-bundles-id",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "id"
        }
      ]
    },
    "/appliance/vm-support-bundles": {
      "post": {
        "description": "Creates a new support bundle and returns it in a compressed format.\nCalling this API without specifying a `manifests` value retrieves the\nentire support bundle. Or, you can provide an array of manifest IDs you\nare interested in.  `manifests` is a list of string manifest IDs.  You\ncan get the list of supported manifests with the `GET\n/api/v1/vm-support-bundles/manifests` API.\n",
        "schemes": [
          "https"
        ],
        "operationId": "POST_appliance-vm-support-bundles",
        "produces": [
          "text/plain",
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "Successfully created a support bundle and sent the support bundle as\nan attachment.  The response body contains the support bundle as\nbinary data, which can be saved as a compressed file in .tgz format.\n"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "target": "SINGLE",
                "manifests": [
                  "Core:Logs",
                  "Linux:Coredumps"
                ]
              },
              "type": "object",
              "properties": {
                "target": {
                  "default": "SINGLE",
                  "enum": [
                    "ALL",
                    "SINGLE"
                  ],
                  "type": "string"
                },
                "manifests": {
                  "type": "array"
                }
              }
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/appliance/vm-support-bundles/manifests": {
      "get": {
        "description": "Gets a list of manifests of available support bundle content.  The\nmanifest list is returned in XML format.\n",
        "schemes": [
          "https"
        ],
        "operationId": "GET_appliance-vm-support-bundles-manifests",
        "produces": [
          "text/plain",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of manifests.",
            "schema": {
              "example": "<xml>\n  <manifestList>\n    <manifest name=\"Agent\" id=\"Agent:Agent\" group=\"Agent\" defaultSelected=\"true\" vmOnly=\"false\"></manifest>\n    <manifest name=\"Configuration\" id=\"Core:Configuration\" group=\"Core\" defaultSelected=\"true\" vmOnly=\"false\"></manifest>\n    <manifest name=\"Logs\" id=\"Core:Logs\" group=\"Core\" defaultSelected=\"true\" vmOnly=\"false\"></manifest>\n  </manifestList>\n</xml>"
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/appliance/vm-support-bundles/{filename}": {
      "delete": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_appliance-vm-support-bundles-filename",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "filename"
        }
      ]
    },
    "/archiving": {
      "get": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "GET_archiving",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "POST_archiving",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/archiving/config": {
      "get": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "GET_archiving-config",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecated:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "POST_archiving-config",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecated:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/archiving/test": {
      "post": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "POST_archiving-test",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/auth-providers": {
      "get": {
        "description": "Returns a list of supported authentication providers. You can use these\nproviders with the sessions API.\n",
        "schemes": [
          "https"
        ],
        "operationId": "GET_auth-providers",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "example": {
                "providers": [
                  "Local",
                  "ActiveDirectory"
                ]
              }
            }
          },
          "503": {
            "$ref": "#/responses/trait:notAuthenticated:503"
          }
        }
      }
    },
    "/authgroups": {
      "post": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "POST_authgroups",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/authgroups/{provider}": {
      "get": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "GET_authgroups-provider",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "provider"
        }
      ]
    },
    "/authgroups/{provider}/{domain}/{name}": {
      "get": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "GET_authgroups-provider-domain-name",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "POST_authgroups-provider-domain-name",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "PATCH_authgroups-provider-domain-name",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_authgroups-provider-domain-name",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "name"
        },
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "domain"
        },
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "provider"
        }
      ]
    },
    "/authgroups/{provider}/{domain}/{name}/capabilities": {
      "get": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "GET_authgroups-provider-domain-name-capabilities",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "POST_authgroups-provider-domain-name-capabilities",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "PATCH_authgroups-provider-domain-name-capabilities",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "PUT_authgroups-provider-domain-name-capabilities",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "name"
        },
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "domain"
        },
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "provider"
        }
      ]
    },
    "/authgroups/{provider}/{domain}/{name}/datasets": {
      "get": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "GET_authgroups-provider-domain-name-datasets",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "POST_authgroups-provider-domain-name-datasets",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "PATCH_authgroups-provider-domain-name-datasets",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "PUT_authgroups-provider-domain-name-datasets",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "name"
        },
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "domain"
        },
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "provider"
        }
      ]
    },
    "/authgroups/{provider}/{domain}/{name}/groups": {
      "get": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "GET_authgroups-provider-domain-name-groups",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "POST_authgroups-provider-domain-name-groups",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "PATCH_authgroups-provider-domain-name-groups",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "PUT_authgroups-provider-domain-name-groups",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "name"
        },
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "domain"
        },
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "provider"
        }
      ]
    },
    "/ceip": {
      "get": {
        "description": "Retrieve current Customer Experience Improvement Program participation status.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_ceip",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Customer Experience Improvement Program configuration was retrieved successfully.",
            "schema": {
              "example": {
                "feedback": true
              }
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "description": "Enable or disable participation in the Customer Experience Improvement Program.",
        "schemes": [
          "https"
        ],
        "operationId": "PUT_ceip",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Customer Experience Improvement Program participation change was saved successfully."
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "feedback": true
              },
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/certificate": {
      "post": {
        "description": "Upload custom certificate\n",
        "schemes": [
          "https"
        ],
        "operationId": "POST_certificate",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/cluster/nodes": {
      "get": {
        "description": "Get the list of nodes of the Log Insight cluster.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_cluster-nodes",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/cluster/nodes/{id}": {
      "get": {
        "description": "Retrieve the details of the cluster node.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_cluster-nodes-id",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "404": {
            "description": "A node with specified ID was not found."
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "description": "Restart the cluster node.",
        "schemes": [
          "https"
        ],
        "operationId": "PATCH_cluster-nodes-id",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "action": "RESTART"
              },
              "type": "object",
              "properties": {
                "action": {
                  "enum": [
                    "RESTART"
                  ],
                  "type": "string"
                }
              }
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "description": "Removes the node from the cluster.",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_cluster-nodes-id",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "The unique identifier of a Log Insight server.  This is the\n`workerToken` value returned from the [`POST /api/v1/deployment/join`](#deployment_join) API\nor `id` value returned from the [`GET /api/v1/cluster/nodes`](#cluster_nodes) API.\n",
          "type": "string",
          "in": "path",
          "name": "id"
        }
      ]
    },
    "/cluster/nodes/{id}/maintenance": {
      "post": {
        "description": "Start maintenance for the cluster node.",
        "schemes": [
          "https"
        ],
        "operationId": "POST_cluster-nodes-id-maintenance",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "description": "Stop maintenance of the cluster node.",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_cluster-nodes-id-maintenance",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "The unique identifier of a Log Insight server.  This is the\n`workerToken` value returned from the [`POST /api/v1/deployment/join`](#deployment_join) API\nor `id` value returned from the [`GET /api/v1/cluster/nodes`](#cluster_nodes) API.\n",
          "type": "string",
          "in": "path",
          "name": "id"
        }
      ]
    },
    "/cluster/vips": {
      "get": {
        "description": "Retrieve the list of virtual IP addresses.\nIncludes the IP and FQDN for each, along with current status.\n",
        "schemes": [
          "https"
        ],
        "operationId": "GET_cluster-vips",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "The list of virtual IP addresses was retrieved successfully.",
            "schema": {
              "example": {
                "vips": [
                  {
                    "uuid": "10.11.12.13",
                    "ipAddress": "10.11.12.13",
                    "fqdn": "test1.example.com",
                    "tags": {
                      "k1": "v1",
                      "k2": "v2"
                    },
                    "status": "AVAILABLE"
                  },
                  {
                    "uuid": "10.11.12.14",
                    "ipAddress": "10.11.12.14",
                    "fqdn": "",
                    "tags": {
                      "k3": "v3"
                    },
                    "status": "UNAVAILABLE"
                  },
                  {
                    "uuid": "10.11.12.15",
                    "ipAddress": "10.11.12.15",
                    "fqdn": "test3.example.com",
                    "tags": {
                      "k4": "v4",
                      "k5": "v5"
                    },
                    "status": "UNKNOWN"
                  }
                ]
              },
              "type": "object",
              "properties": {
                "vips": {
                  "description": "A list of all virtual IP addresses in the Log Insight cluster",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string"
                      },
                      "ipAddress": {
                        "type": "string"
                      },
                      "fqdn": {
                        "type": "string"
                      },
                      "tags": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "status": {
                        "enum": [
                          "AVAILABLE",
                          "UNAVAILABLE",
                          "UNKNOWN"
                        ],
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "Create new virtual IP addresses.",
        "schemes": [
          "https"
        ],
        "operationId": "POST_cluster-vips",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "New virtual IP address was created successfully.",
            "schema": {
              "example": {
                "uuid": "10.11.12.13"
              },
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "403": {
            "description": "A virtual IP address with specified IP Address or FQDN already exists."
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "ipAddress": "10.11.12.13",
                "fqdn": "test1.example.com",
                "tags": {
                  "k1": "v1",
                  "k2": "v2"
                }
              },
              "type": "object",
              "properties": {
                "ipAddress": {
                  "type": "string"
                },
                "fqdn": {
                  "type": "string"
                },
                "tags": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "ipAddress"
              ]
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/cluster/vips/{uuid}": {
      "get": {
        "description": "Retrieve the details of a virtual IP address.\nIncludes the IP and FQDN for each, along with current status.\n",
        "schemes": [
          "https"
        ],
        "operationId": "GET_cluster-vips-uuid",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "The virtual IP address details were retrieved successfully.",
            "schema": {
              "example": {
                "uuid": "10.11.12.13",
                "ipAddress": "10.11.12.13",
                "fqdn": "test1.example.com",
                "tags": {
                  "k1": "v1",
                  "k2": "v2"
                },
                "status": "AVAILABLE"
              },
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string"
                },
                "ipAddress": {
                  "type": "string"
                },
                "fqdn": {
                  "type": "string"
                },
                "tags": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "status": {
                  "enum": [
                    "AVAILABLE",
                    "UNAVAILABLE",
                    "UNKNOWN"
                  ],
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "404": {
            "description": "A virtual IP address with specified UUID was not found."
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "description": "Update existing virtual IP address.",
        "schemes": [
          "https"
        ],
        "operationId": "PUT_cluster-vips-uuid",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "The virtual IP address was updated successfully."
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "404": {
            "description": "A virtual IP address with the specified UUID was not found."
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "fqdn": "test1.example.com",
                "tags": {
                  "k1": "v1",
                  "k2": "v2"
                }
              },
              "type": "object",
              "properties": {
                "fqdn": {
                  "type": "string"
                },
                "tags": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "description": "Delete specified virtual IP address.",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_cluster-vips-uuid",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "The specified Virtual IP address was deleted successfully."
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "404": {
            "description": "A virtual IP address with the specified UUID was not found."
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "This is a unique ID for Log Insight virtual IP address.\nIt can be retrieved by 'GET /cluster/vips' call.\n",
          "type": "string",
          "in": "path",
          "name": "uuid"
        }
      ]
    },
    "/config/data": {
      "get": {
        "description": "Export LogInsight configuration into a file, which can be used for configuring a fresh Log Insight setup.\n\nExported configuration includes the following information about the LogInsight cluster:\n- General configuration (CEIP, System notification recipients, etc.)\n- NTP configuration\n- Event forwarder configuration\n- SMTP configuration\n- Archiving settings\n- Agents groups configuration\n\nExported configuration does NOT include the following information:\n- Cluster configuration (e.g. the number of nodes, VIP configuration, etc.)\nExporting VIP configuration might result in multiple clusters having the same VIP, which would cause\nisues with ingestion, event forwarding, etc.\n- Hosts information\n- Patterns and fields extracted during machine learning\n- Agents configuration\n- Local users. Local users aren't migrated for security reasons so that passwords are exposed in the\nexported configuration file.\n- Active Directory and vIDM configurations aren't migrated for security reasons, as exporting these\nconfigurations would expose the passwords.\n- Content packs and user content, such as dashboards, alerts, etc. Content migration can be addressed\nwith separate APIs designed to export and import content packs and user content.\n- SSL configuration\n- vSphere integration configuration isn't migrated for security reasons, as exporting this configuration\nwould expose the passwords.\n- vROps integration configuration isn't migrated for security reasons, as exporting this configuration\nwould expose the passwords.\n",
        "schemes": [
          "https"
        ],
        "operationId": "GET_config-data",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Returns a file containing the exported configuration.\n"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "Import an exported Log Insight configuration.\n\nThe following configuration can be imported based on the provided parameters:\n- General configuration (CEIP, System notification recipients, etc.)\n- NTP configuration\n- Event forwarder configuration\n- SMTP configuration\n- Archiving settings\n- Agents groups configuration\n\nImported configuration does NOT include the following information:\n- Cluster configuration (e.g. the number of nodes, VIP configuration, etc.)\nExporting VIP configuration might result in multiple clusters having the same VIP, which would cause\nisues with ingestion, event forwarding, etc.\n- Hosts information\n- Patterns and fields extracted during machine learning\n- Agents configuration\n- Local users. Local users aren't migrated for security reasons so that passwords are exposed in the\nexported configuration file.\n- Active Directory and vIDM configurations aren't migrated for security reasons, as exporting these\nconfigurations would expose the passwords.\n- Content packs and user content, such as dashboards, alerts, etc. Content migration can be addressed\nwith separate APIs designed to export and import content packs and user content.\n- SSL configuration\n- vSphere integration configuration isn't migrated for security reasons, as exporting this configuration\nwould expose the passwords.\n- vROps integration configuration isn't migrated for security reasons, as exporting this configuration\nwould expose the passwords.\n\nConfiguration import process consists of two steps:\n1. The exported configuration file should be uploaded as binary data with the \"Content-Type: applications/octet-stream\" header.\n2. Once the file is uploaded, the configurations can be applied by setting the \"Content-Type: applications/json\" header and providing the items to exclude in the JSON body.\n",
        "schemes": [
          "https"
        ],
        "operationId": "POST_config-data",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Imports the configuration file and applies the selected configuration.\n",
            "schema": {
              "example": {
                "GeneralConfiguration": "Successfully configured.",
                "Time": "Successfully configured.",
                "EventForwarder": "Successfully configured.",
                "SMTP": "Successfully configured.",
                "Archiving": "Successfully configured.",
                "includeAgentsGroups": "Successfully configured."
              }
            }
          },
          "202": {
            "description": "Applying the imported configuration has partially succeeded.\n",
            "schema": {
              "example": {
                "GeneralConfiguration": "Successfully configured.",
                "Time": "Successfully configured.",
                "EventForwarder": "Successfully configured.",
                "SMTP": "Successfully configured.",
                "Archiving": "Successfully configured.",
                "includeAgentsGroups": "Successfully configured."
              }
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "includeNtpConfig": "false",
                "includeAgentsGroups": "false"
              },
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/content/contentpack": {
      "post": {
        "description": "Install a content pack\n",
        "schemes": [
          "https"
        ],
        "operationId": "POST_content-contentpack",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "403": {
            "$ref": "#/responses/trait:restricted:403"
          },
          "409": {
            "description": "Returning already existing content pack with provided namespace\n",
            "schema": {
              "example": {
                "name": "VMware - Test",
                "namespace": "com.vmware.test",
                "contentPackId": "com.vmware.test",
                "framework": "#9c4",
                "version": "2.4",
                "extractedFields": [
                  {
                    "displayName": "vmw_esxi_device_id",
                    "preContext": "",
                    "postContext": "",
                    "regexValue": "((naa|eui|sym|sns|t10)\\.[0-9a-z]+|mpx\\.vmhba[0-9]+:C[0-9]+:T[0-9]+:L[0-9]+)",
                    "internalName": "Example",
                    "constraints": "Example",
                    "info": "Example"
                  },
                  {
                    "displayName": "vmw_esxi_scsi_sense_data",
                    "preContext": "(Possible|Valid) sense data: ",
                    "postContext": "\\.",
                    "regexValue": ".*?",
                    "internalName": "Example",
                    "constraints": "{\"filters\":[{\"internalName\":\"appname\",\"hidden\":false}]}",
                    "info": "Example"
                  }
                ],
                "queries": [
                  {
                    "name": "Example",
                    "chartQuery": "{}",
                    "messageQuery": "{}",
                    "options": "Example"
                  }
                ],
                "alerts": [
                  {
                    "name": "Storage: Permanent Device Loss (PDL)",
                    "info": "Example",
                    "alertType": "RATE_BASED_WITH_GROUPS",
                    "chartQuery": "{}",
                    "messageQuery": "{}",
                    "hitCount": 1,
                    "hitOperator": "GREATER_THAN",
                    "searchPeriod": 300000,
                    "searchInterval": 60000
                  }
                ],
                "dashboardSections": [
                  {
                    "views": [
                      {
                        "name": "General - Overview",
                        "constraints": [
                          {
                            "internalName": "__li_source_path",
                            "operator": "CONTAINS"
                          },
                          {
                            "internalName": "hostname",
                            "operator": "EQUAL"
                          },
                          {
                            "internalName": "vsphere",
                            "operator": "EQUAL"
                          }
                        ],
                        "rows": [
                          {
                            "widgets": [
                              {
                                "name": "All vSphere events",
                                "info": "Example",
                                "chartType": "Example",
                                "chartOptions": "{\"logaxis\":false,\"legend\":true,\"trendline\":false}",
                                "widgetType": "chart",
                                "chartQuery": "{}",
                                "messageQuery": "{}"
                              },
                              {
                                "name": "All vSphere events by hostname",
                                "info": "Example",
                                "chartType": "Example",
                                "chartOptions": "{\"logaxis\":false,\"pielabelstyle\":\"legend\",\"piestyle\":\"normal\"}",
                                "widgetType": "chart",
                                "chartQuery": "{}",
                                "messageQuery": "{}"
                              }
                            ]
                          }
                        ]
                      }
                    ],
                    "header": ""
                  }
                ],
                "agentClasses": [
                  {
                    "name": "vSphere 5.x - vCenter (Linux) SSO",
                    "info": "<span>Meant for standalone Linux-based SSO systems.</span><br>",
                    "agentConfig": "Example"
                  }
                ],
                "aliasFields": [],
                "aliasRules": [],
                "author": "VMware, Inc.",
                "url": "https://www.vmware.com/products/vsphere",
                "contentVersion": "4.3",
                "info": "Example",
                "instructions": "Example",
                "upgradeInstructions": "Example"
              },
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "name": {
                  "type": "string"
                },
                "namespace": {
                  "type": "string"
                },
                "contentPackId": {
                  "type": "string"
                },
                "framework": {
                  "type": "string"
                },
                "version": {
                  "type": "string"
                },
                "author": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "contentVersion": {
                  "type": "string"
                },
                "info": {
                  "type": "string"
                },
                "instructions": {
                  "type": "string"
                },
                "upgradeInstructions": {
                  "type": "string"
                },
                "extractedFields": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "displayName": {
                        "type": "string"
                      },
                      "preContext": {
                        "type": "string"
                      },
                      "postContext": {
                        "type": "string"
                      },
                      "regexValue": {
                        "type": "string"
                      },
                      "internalName": {
                        "type": "string"
                      },
                      "constraints": {
                        "type": "string"
                      },
                      "info": {
                        "type": "string"
                      }
                    }
                  }
                },
                "queries": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "chartQuery": {
                        "type": "string"
                      },
                      "messageQuery": {
                        "type": "string"
                      },
                      "options": {
                        "type": "string"
                      }
                    }
                  }
                },
                "alerts": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "info": {
                        "type": "string"
                      },
                      "alertType": {
                        "type": "string"
                      },
                      "chartQuery": {
                        "type": "string"
                      },
                      "messageQuery": {
                        "type": "string"
                      },
                      "hitCount": {
                        "type": "string"
                      },
                      "hitOperator": {
                        "type": "string"
                      },
                      "searchPeriod": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "dashboardSections": {
                  "maxItems": 1,
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "header": {
                        "type": "string"
                      },
                      "views": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "agentClasses": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "info": {
                        "type": "string"
                      },
                      "agentConfig": {
                        "type": "string"
                      }
                    }
                  }
                },
                "aliasFields": {
                  "type": "array"
                },
                "aliasRules": {
                  "type": "array"
                }
              },
              "required": [
                "name",
                "namespace",
                "version",
                "contentVersion"
              ]
            }
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "name": "VMware - Test",
                "namespace": "com.vmware.test",
                "contentPackId": "com.vmware.test",
                "framework": "#9c4",
                "version": "2.4",
                "extractedFields": [
                  {
                    "displayName": "vmw_esxi_device_id",
                    "preContext": "",
                    "postContext": "",
                    "regexValue": "((naa|eui|sym|sns|t10)\\.[0-9a-z]+|mpx\\.vmhba[0-9]+:C[0-9]+:T[0-9]+:L[0-9]+)",
                    "internalName": "Example",
                    "constraints": "Example",
                    "info": "Example"
                  },
                  {
                    "displayName": "vmw_esxi_scsi_sense_data",
                    "preContext": "(Possible|Valid) sense data: ",
                    "postContext": "\\.",
                    "regexValue": ".*?",
                    "internalName": "Example",
                    "constraints": "{\"filters\":[{\"internalName\":\"appname\",\"hidden\":false}]}",
                    "info": "Example"
                  }
                ],
                "queries": [
                  {
                    "name": "Example",
                    "chartQuery": "{}",
                    "messageQuery": "{}",
                    "options": "Example"
                  }
                ],
                "alerts": [
                  {
                    "name": "Storage: Permanent Device Loss (PDL)",
                    "info": "Example",
                    "alertType": "RATE_BASED_WITH_GROUPS",
                    "chartQuery": "{}",
                    "messageQuery": "{}",
                    "hitCount": 1,
                    "hitOperator": "GREATER_THAN",
                    "searchPeriod": 300000,
                    "searchInterval": 60000
                  }
                ],
                "dashboardSections": [
                  {
                    "views": [
                      {
                        "name": "General - Overview",
                        "constraints": [
                          {
                            "internalName": "__li_source_path",
                            "operator": "CONTAINS"
                          },
                          {
                            "internalName": "hostname",
                            "operator": "EQUAL"
                          },
                          {
                            "internalName": "vsphere",
                            "operator": "EQUAL"
                          }
                        ],
                        "rows": [
                          {
                            "widgets": [
                              {
                                "name": "All vSphere events",
                                "info": "Example",
                                "chartType": "Example",
                                "chartOptions": "{\"logaxis\":false,\"legend\":true,\"trendline\":false}",
                                "widgetType": "chart",
                                "chartQuery": "{}",
                                "messageQuery": "{}"
                              },
                              {
                                "name": "All vSphere events by hostname",
                                "info": "Example",
                                "chartType": "Example",
                                "chartOptions": "{\"logaxis\":false,\"pielabelstyle\":\"legend\",\"piestyle\":\"normal\"}",
                                "widgetType": "chart",
                                "chartQuery": "{}",
                                "messageQuery": "{}"
                              }
                            ]
                          }
                        ]
                      }
                    ],
                    "header": ""
                  }
                ],
                "agentClasses": [
                  {
                    "name": "vSphere 5.x - vCenter (Linux) SSO",
                    "info": "<span>Meant for standalone Linux-based SSO systems.</span><br>",
                    "agentConfig": "Example"
                  }
                ],
                "aliasFields": [],
                "aliasRules": [],
                "author": "VMware, Inc.",
                "url": "https://www.vmware.com/products/vsphere",
                "contentVersion": "4.3",
                "info": "Example",
                "instructions": "Example",
                "upgradeInstructions": "Example",
                "icon": "Example"
              },
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "namespace": {
                  "type": "string"
                },
                "contentPackId": {
                  "type": "string"
                },
                "framework": {
                  "type": "string"
                },
                "version": {
                  "type": "string"
                },
                "author": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "contentVersion": {
                  "type": "string"
                },
                "info": {
                  "type": "string"
                },
                "instructions": {
                  "type": "string"
                },
                "upgradeInstructions": {
                  "type": "string"
                },
                "icon": {
                  "type": "string"
                },
                "extractedFields": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "displayName": {
                        "type": "string"
                      },
                      "preContext": {
                        "type": "string"
                      },
                      "postContext": {
                        "type": "string"
                      },
                      "regexValue": {
                        "type": "string"
                      },
                      "internalName": {
                        "type": "string"
                      },
                      "constraints": {
                        "type": "string"
                      },
                      "info": {
                        "type": "string"
                      }
                    }
                  }
                },
                "queries": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "chartQuery": {
                        "type": "string"
                      },
                      "messageQuery": {
                        "type": "string"
                      },
                      "options": {
                        "type": "string"
                      }
                    }
                  }
                },
                "alerts": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "info": {
                        "type": "string"
                      },
                      "alertType": {
                        "type": "string"
                      },
                      "chartQuery": {
                        "type": "string"
                      },
                      "messageQuery": {
                        "type": "string"
                      },
                      "hitCount": {
                        "type": "string"
                      },
                      "hitOperator": {
                        "type": "string"
                      },
                      "searchPeriod": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "dashboardSections": {
                  "maxItems": 1,
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "header": {
                        "type": "string"
                      },
                      "views": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "agentClasses": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "info": {
                        "type": "string"
                      },
                      "agentConfig": {
                        "type": "string"
                      }
                    }
                  }
                },
                "aliasFields": {
                  "type": "array"
                },
                "aliasRules": {
                  "type": "array"
                }
              },
              "required": [
                "name",
                "namespace",
                "contentVersion"
              ]
            },
            "in": "body",
            "name": "body"
          },
          {
            "default": false,
            "description": "Overwrite already installed content pack\n",
            "type": "boolean",
            "in": "query",
            "name": "overwrite"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/content/contentpack/list": {
      "get": {
        "description": "Returns the list of all installed content packs' meta information\n",
        "schemes": [
          "https"
        ],
        "operationId": "GET_content-contentpack-list",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/content/contentpack/{contentPackNamespace}": {
      "get": {
        "description": "Export an installed content pack with provided namespace\n",
        "schemes": [
          "https"
        ],
        "operationId": "GET_content-contentpack-contentPackNamespace",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "404": {
            "$ref": "#/responses/trait:notFound:404"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "description": "Delete installed content pack with provided namespace\n",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_content-contentpack-contentPackNamespace",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "403": {
            "$ref": "#/responses/trait:restricted:403"
          },
          "404": {
            "$ref": "#/responses/trait:notFound:404"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "Namespace is a unique identifier of the requested content pack\n",
          "type": "string",
          "in": "path",
          "name": "contentPackNamespace"
        }
      ]
    },
    "/content/usercontent": {
      "post": {
        "description": "Import to \"My Content\". Importing only dashboards, bookmarked queries, alerts and extracted fields.\n",
        "schemes": [
          "https"
        ],
        "operationId": "POST_content-usercontent",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "403": {
            "$ref": "#/responses/trait:restricted:403"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "name": "VMware - Test",
                "namespace": "com.vmware.test",
                "contentPackId": "com.vmware.test",
                "framework": "#9c4",
                "version": "2.4",
                "extractedFields": [
                  {
                    "displayName": "vmw_esxi_device_id",
                    "preContext": "",
                    "postContext": "",
                    "regexValue": "((naa|eui|sym|sns|t10)\\.[0-9a-z]+|mpx\\.vmhba[0-9]+:C[0-9]+:T[0-9]+:L[0-9]+)",
                    "internalName": "Example",
                    "constraints": "Example",
                    "info": "Example"
                  },
                  {
                    "displayName": "vmw_esxi_scsi_sense_data",
                    "preContext": "(Possible|Valid) sense data: ",
                    "postContext": "\\.",
                    "regexValue": ".*?",
                    "internalName": "Example",
                    "constraints": "{\"filters\":[{\"internalName\":\"appname\",\"hidden\":false}]}",
                    "info": "Example"
                  }
                ],
                "queries": [
                  {
                    "name": "Example",
                    "chartQuery": "{}",
                    "messageQuery": "{}",
                    "options": "Example"
                  }
                ],
                "alerts": [
                  {
                    "name": "Storage: Permanent Device Loss (PDL)",
                    "info": "Example",
                    "alertType": "RATE_BASED_WITH_GROUPS",
                    "chartQuery": "{}",
                    "messageQuery": "{}",
                    "hitCount": 1,
                    "hitOperator": "GREATER_THAN",
                    "searchPeriod": 300000,
                    "searchInterval": 60000
                  }
                ],
                "dashboardSections": [
                  {
                    "views": [
                      {
                        "name": "General - Overview",
                        "constraints": [
                          {
                            "internalName": "__li_source_path",
                            "operator": "CONTAINS"
                          },
                          {
                            "internalName": "hostname",
                            "operator": "EQUAL"
                          },
                          {
                            "internalName": "vsphere",
                            "operator": "EQUAL"
                          }
                        ],
                        "rows": [
                          {
                            "widgets": [
                              {
                                "name": "All vSphere events",
                                "info": "Example",
                                "chartType": "Example",
                                "chartOptions": "{\"logaxis\":false,\"legend\":true,\"trendline\":false}",
                                "widgetType": "chart",
                                "chartQuery": "{}",
                                "messageQuery": "{}"
                              },
                              {
                                "name": "All vSphere events by hostname",
                                "info": "Example",
                                "chartType": "Example",
                                "chartOptions": "{\"logaxis\":false,\"pielabelstyle\":\"legend\",\"piestyle\":\"normal\"}",
                                "widgetType": "chart",
                                "chartQuery": "{}",
                                "messageQuery": "{}"
                              }
                            ]
                          }
                        ]
                      }
                    ],
                    "header": ""
                  }
                ],
                "agentClasses": [
                  {
                    "name": "vSphere 5.x - vCenter (Linux) SSO",
                    "info": "<span>Meant for standalone Linux-based SSO systems.</span><br>",
                    "agentConfig": "Example"
                  }
                ],
                "aliasFields": [],
                "aliasRules": [],
                "author": "VMware, Inc.",
                "url": "https://www.vmware.com/products/vsphere",
                "contentVersion": "4.3",
                "info": "Example",
                "instructions": "Example",
                "upgradeInstructions": "Example",
                "icon": "Example"
              },
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "namespace": {
                  "type": "string"
                },
                "contentPackId": {
                  "type": "string"
                },
                "framework": {
                  "type": "string"
                },
                "version": {
                  "type": "string"
                },
                "author": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "contentVersion": {
                  "type": "string"
                },
                "info": {
                  "type": "string"
                },
                "instructions": {
                  "type": "string"
                },
                "upgradeInstructions": {
                  "type": "string"
                },
                "icon": {
                  "type": "string"
                },
                "extractedFields": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "displayName": {
                        "type": "string"
                      },
                      "preContext": {
                        "type": "string"
                      },
                      "postContext": {
                        "type": "string"
                      },
                      "regexValue": {
                        "type": "string"
                      },
                      "internalName": {
                        "type": "string"
                      },
                      "constraints": {
                        "type": "string"
                      },
                      "info": {
                        "type": "string"
                      }
                    }
                  }
                },
                "queries": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "chartQuery": {
                        "type": "string"
                      },
                      "messageQuery": {
                        "type": "string"
                      },
                      "options": {
                        "type": "string"
                      }
                    }
                  }
                },
                "alerts": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "info": {
                        "type": "string"
                      },
                      "alertType": {
                        "type": "string"
                      },
                      "chartQuery": {
                        "type": "string"
                      },
                      "messageQuery": {
                        "type": "string"
                      },
                      "hitCount": {
                        "type": "string"
                      },
                      "hitOperator": {
                        "type": "string"
                      },
                      "searchPeriod": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "dashboardSections": {
                  "maxItems": 1,
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "header": {
                        "type": "string"
                      },
                      "views": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "agentClasses": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "info": {
                        "type": "string"
                      },
                      "agentConfig": {
                        "type": "string"
                      }
                    }
                  }
                },
                "aliasFields": {
                  "type": "array"
                },
                "aliasRules": {
                  "type": "array"
                }
              },
              "required": [
                "name",
                "namespace",
                "contentVersion"
              ]
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "get": {
        "description": "Export all user content as a content pack\n",
        "schemes": [
          "https"
        ],
        "operationId": "GET_content-usercontent",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "required": true,
            "description": "Namespace is a unique identifier required for creating a content pack based on the user content, e.g. com.company.product\n",
            "type": "string",
            "in": "query",
            "name": "namespace"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/content/usercontent/{userId}": {
      "get": {
        "description": "Export all user content of specified user as a content pack\n",
        "schemes": [
          "https"
        ],
        "operationId": "GET_content-usercontent-userId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "403": {
            "$ref": "#/responses/trait:restricted:403"
          },
          "404": {
            "$ref": "#/responses/trait:notFound:404"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "required": true,
            "description": "Namespace is a unique identifier required for creating a content pack based on the user content, e.g. com.company.product\n",
            "type": "string",
            "in": "query",
            "name": "namespace"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "Import to \"My Content\" of specified user\n",
        "schemes": [
          "https"
        ],
        "operationId": "POST_content-usercontent-userId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "403": {
            "$ref": "#/responses/trait:restricted:403"
          },
          "404": {
            "$ref": "#/responses/trait:notFound:404"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "The ID of user, whose content is migrated. The list of all user IDs can be retrieved using [Get users](#users)\n",
          "type": "string",
          "in": "path",
          "name": "userId"
        }
      ]
    },
    "/content/usercontent/dashboard/list": {
      "get": {
        "description": "Returns the list of all dashboards meta information from \"My Content\", e.g. name, ID\n",
        "schemes": [
          "https"
        ],
        "operationId": "GET_content-usercontent-dashboard-list",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/content/usercontent/dashboard/{dashboardId}": {
      "delete": {
        "description": "Remove dashboard from \"My Content\"\n",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_content-usercontent-dashboard-dashboardId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "404": {
            "$ref": "#/responses/trait:notFound:404"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "The dashboard ID. The list of available dashbord IDs can be retrieved using [Get user dashboards](#content_usercontent_dashboard_list)\n",
          "type": "string",
          "in": "path",
          "name": "dashboardId"
        }
      ]
    },
    "/content/usercontent/bookmarkedquery/list": {
      "get": {
        "description": "Returns the list of all bookmarked queries meta information from \"My Content\", e.g. name, ID\n",
        "schemes": [
          "https"
        ],
        "operationId": "GET_content-usercontent-bookmarkedquery-list",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/content/usercontent/bookmarkedquery/{bookmarkedQueryId}": {
      "delete": {
        "description": "Remove bookmarked query from \"My Content\"\n",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_content-usercontent-bookmarkedquery-bookmarkedQueryId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "404": {
            "$ref": "#/responses/trait:notFound:404"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "The bookmarked query ID. The list of available bookmarked query IDs can be retrieved using [Get user bookmarked queries](#content_usercontent_bookmarkedquery_list)\n",
          "type": "string",
          "in": "path",
          "name": "bookmarkedQueryId"
        }
      ]
    },
    "/content/usercontent/alert/list": {
      "get": {
        "description": "Returns the list of all alerts meta information from \"My Content\", e.g. name, ID\n",
        "schemes": [
          "https"
        ],
        "operationId": "GET_content-usercontent-alert-list",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/content/usercontent/alert/{alertId}": {
      "delete": {
        "description": "Remove alert from \"My Content\"\n",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_content-usercontent-alert-alertId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "404": {
            "$ref": "#/responses/trait:notFound:404"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "The alert ID. The list of available alert IDs can be retrieved using [Get user alerts](#content_usercontent_alert_list)\n",
          "type": "string",
          "in": "path",
          "name": "alertId"
        }
      ]
    },
    "/content/usercontent/extractedfield/list": {
      "get": {
        "description": "Returns the list of all extracted fields meta information from \"My Content\", e.g. name, ID\n",
        "schemes": [
          "https"
        ],
        "operationId": "GET_content-usercontent-extractedfield-list",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/content/usercontent/extractedfield/{extractedFieldId}": {
      "delete": {
        "description": "Remove extracted field from \"My Content\"\n",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_content-usercontent-extractedfield-extractedFieldId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "404": {
            "$ref": "#/responses/trait:notFound:404"
          },
          "409": {
            "description": "The field has dependencies\n",
            "schema": {
              "example": "The field has dependencies. Use query parameter(?force=true) to force delete\n"
            }
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "default": false,
            "description": "Force delete the field and ignore its dependencies\n",
            "type": "boolean",
            "in": "query",
            "name": "force"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "The extracted field ID. The list of available extracted field IDs can be retrieved using [Get user extracted fields](#content_usercontent_extractedfield_list)\n",
          "type": "string",
          "in": "path",
          "name": "extractedFieldId"
        }
      ]
    },
    "/content/sharedcontent": {
      "post": {
        "description": "Import to \"Shared Content\". Importing only dashboards, bookmarked queries, and extracted fields.\n",
        "schemes": [
          "https"
        ],
        "operationId": "POST_content-sharedcontent",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "403": {
            "$ref": "#/responses/trait:restricted:403"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "name": "VMware - Test",
                "namespace": "com.vmware.test",
                "contentPackId": "com.vmware.test",
                "framework": "#9c4",
                "version": "2.4",
                "extractedFields": [
                  {
                    "displayName": "vmw_esxi_device_id",
                    "preContext": "",
                    "postContext": "",
                    "regexValue": "((naa|eui|sym|sns|t10)\\.[0-9a-z]+|mpx\\.vmhba[0-9]+:C[0-9]+:T[0-9]+:L[0-9]+)",
                    "internalName": "Example",
                    "constraints": "Example",
                    "info": "Example"
                  },
                  {
                    "displayName": "vmw_esxi_scsi_sense_data",
                    "preContext": "(Possible|Valid) sense data: ",
                    "postContext": "\\.",
                    "regexValue": ".*?",
                    "internalName": "Example",
                    "constraints": "{\"filters\":[{\"internalName\":\"appname\",\"hidden\":false}]}",
                    "info": "Example"
                  }
                ],
                "queries": [
                  {
                    "name": "Example",
                    "chartQuery": "{}",
                    "messageQuery": "{}",
                    "options": "Example"
                  }
                ],
                "alerts": [
                  {
                    "name": "Storage: Permanent Device Loss (PDL)",
                    "info": "Example",
                    "alertType": "RATE_BASED_WITH_GROUPS",
                    "chartQuery": "{}",
                    "messageQuery": "{}",
                    "hitCount": 1,
                    "hitOperator": "GREATER_THAN",
                    "searchPeriod": 300000,
                    "searchInterval": 60000
                  }
                ],
                "dashboardSections": [
                  {
                    "views": [
                      {
                        "name": "General - Overview",
                        "constraints": [
                          {
                            "internalName": "__li_source_path",
                            "operator": "CONTAINS"
                          },
                          {
                            "internalName": "hostname",
                            "operator": "EQUAL"
                          },
                          {
                            "internalName": "vsphere",
                            "operator": "EQUAL"
                          }
                        ],
                        "rows": [
                          {
                            "widgets": [
                              {
                                "name": "All vSphere events",
                                "info": "Example",
                                "chartType": "Example",
                                "chartOptions": "{\"logaxis\":false,\"legend\":true,\"trendline\":false}",
                                "widgetType": "chart",
                                "chartQuery": "{}",
                                "messageQuery": "{}"
                              },
                              {
                                "name": "All vSphere events by hostname",
                                "info": "Example",
                                "chartType": "Example",
                                "chartOptions": "{\"logaxis\":false,\"pielabelstyle\":\"legend\",\"piestyle\":\"normal\"}",
                                "widgetType": "chart",
                                "chartQuery": "{}",
                                "messageQuery": "{}"
                              }
                            ]
                          }
                        ]
                      }
                    ],
                    "header": ""
                  }
                ],
                "agentClasses": [
                  {
                    "name": "vSphere 5.x - vCenter (Linux) SSO",
                    "info": "<span>Meant for standalone Linux-based SSO systems.</span><br>",
                    "agentConfig": "Example"
                  }
                ],
                "aliasFields": [],
                "aliasRules": [],
                "author": "VMware, Inc.",
                "url": "https://www.vmware.com/products/vsphere",
                "contentVersion": "4.3",
                "info": "Example",
                "instructions": "Example",
                "upgradeInstructions": "Example",
                "icon": "Example"
              },
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "namespace": {
                  "type": "string"
                },
                "contentPackId": {
                  "type": "string"
                },
                "framework": {
                  "type": "string"
                },
                "version": {
                  "type": "string"
                },
                "author": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "contentVersion": {
                  "type": "string"
                },
                "info": {
                  "type": "string"
                },
                "instructions": {
                  "type": "string"
                },
                "upgradeInstructions": {
                  "type": "string"
                },
                "icon": {
                  "type": "string"
                },
                "extractedFields": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "displayName": {
                        "type": "string"
                      },
                      "preContext": {
                        "type": "string"
                      },
                      "postContext": {
                        "type": "string"
                      },
                      "regexValue": {
                        "type": "string"
                      },
                      "internalName": {
                        "type": "string"
                      },
                      "constraints": {
                        "type": "string"
                      },
                      "info": {
                        "type": "string"
                      }
                    }
                  }
                },
                "queries": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "chartQuery": {
                        "type": "string"
                      },
                      "messageQuery": {
                        "type": "string"
                      },
                      "options": {
                        "type": "string"
                      }
                    }
                  }
                },
                "alerts": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "info": {
                        "type": "string"
                      },
                      "alertType": {
                        "type": "string"
                      },
                      "chartQuery": {
                        "type": "string"
                      },
                      "messageQuery": {
                        "type": "string"
                      },
                      "hitCount": {
                        "type": "string"
                      },
                      "hitOperator": {
                        "type": "string"
                      },
                      "searchPeriod": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "dashboardSections": {
                  "maxItems": 1,
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "header": {
                        "type": "string"
                      },
                      "views": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "agentClasses": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "info": {
                        "type": "string"
                      },
                      "agentConfig": {
                        "type": "string"
                      }
                    }
                  }
                },
                "aliasFields": {
                  "type": "array"
                },
                "aliasRules": {
                  "type": "array"
                }
              },
              "required": [
                "name",
                "namespace",
                "contentVersion"
              ]
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "get": {
        "description": "Export all shared content as a content pack\n",
        "schemes": [
          "https"
        ],
        "operationId": "GET_content-sharedcontent",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "required": true,
            "description": "Namespace is a unique identifier required for creating a content pack based on the shared content, e.g. com.company.product\n",
            "type": "string",
            "in": "query",
            "name": "namespace"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/content/sharedcontent/dashboard/list": {
      "get": {
        "description": "Returns the list of all dashboards meta information from \"Shared Content\", e.g. name, ID\n",
        "schemes": [
          "https"
        ],
        "operationId": "GET_content-sharedcontent-dashboard-list",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/content/sharedcontent/dashboard/{dashboardId}": {
      "delete": {
        "description": "Remove dashboard from \"Shared Content\"\n",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_content-sharedcontent-dashboard-dashboardId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "403": {
            "$ref": "#/responses/trait:restricted:403"
          },
          "404": {
            "$ref": "#/responses/trait:notFound:404"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "The dashboard ID. The list of available dashboard IDs can be retrieved using [Get shared dashboards](#content_sharedcontent_dashboard_list)\n",
          "type": "string",
          "in": "path",
          "name": "dashboardId"
        }
      ]
    },
    "/content/sharedcontent/bookmarkedquery/list": {
      "get": {
        "description": "Returns the list of all bookmarked queries meta information from \"Shared Content\", e.g. name, ID\n",
        "schemes": [
          "https"
        ],
        "operationId": "GET_content-sharedcontent-bookmarkedquery-list",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/content/sharedcontent/bookmarkedquery/{bookmarkedQueryId}": {
      "delete": {
        "description": "Remove bookmarked query from \"Shared Content\"\n",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_content-sharedcontent-bookmarkedquery-bookmarkedQueryId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "403": {
            "$ref": "#/responses/trait:restricted:403"
          },
          "404": {
            "$ref": "#/responses/trait:notFound:404"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "The bookmarked query ID. The list of available bookmarked query IDs can be retrieved using [Get shared bookmarked queries](#content_sharedcontent_bookmarkedquery_list)\n",
          "type": "string",
          "in": "path",
          "name": "bookmarkedQueryId"
        }
      ]
    },
    "/content/sharedcontent/extractedfield/list": {
      "get": {
        "description": "Returns the list of all extracted fields meta information from \"Shared Content\", e.g. name, ID\n",
        "schemes": [
          "https"
        ],
        "operationId": "GET_content-sharedcontent-extractedfield-list",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/content/sharedcontent/extractedfield/{extractedFieldId}": {
      "delete": {
        "description": "Remove extracted field from \"Shared Content\"\n",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_content-sharedcontent-extractedfield-extractedFieldId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "403": {
            "$ref": "#/responses/trait:restricted:403"
          },
          "404": {
            "$ref": "#/responses/trait:notFound:404"
          },
          "409": {
            "description": "The field has dependencies\n",
            "schema": {
              "example": "The field has dependencies. Use query parameter(?force=true) to force delete\n"
            }
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "default": false,
            "description": "Force delete the field and ignore its dependencies\n",
            "type": "boolean",
            "in": "query",
            "name": "force"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "The extracted field ID. The list of available extracted field IDs can be retrieved using [Get shared extracted fields](#content_sharedcontent_extractedfield_list)\n",
          "type": "string",
          "in": "path",
          "name": "extractedFieldId"
        }
      ]
    },
    "/datasets": {
      "get": {
        "description": "Gets a list of all data sets.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_datasets",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "default": false,
            "description": "TODO: add a description",
            "type": "boolean",
            "in": "query",
            "name": "includeDisplayMeta"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "Creates a new data set.",
        "schemes": [
          "https"
        ],
        "operationId": "POST_datasets",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          },
          {
            "default": false,
            "description": "TODO: add a description",
            "type": "boolean",
            "in": "query",
            "name": "includeDisplayMeta"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/datasets/{dataSetId}": {
      "get": {
        "description": "Retrieves the settings of a data set.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_datasets-dataSetId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "default": false,
            "description": "TODO: add a description",
            "type": "boolean",
            "in": "query",
            "name": "includeDisplayMeta"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "Updates the settings of a data set.",
        "schemes": [
          "https"
        ],
        "operationId": "POST_datasets-dataSetId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          },
          {
            "default": false,
            "description": "TODO: add a description",
            "type": "boolean",
            "in": "query",
            "name": "includeDisplayMeta"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "description": "Updates the settings of a data set.",
        "schemes": [
          "https"
        ],
        "operationId": "PATCH_datasets-dataSetId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "default": false,
            "description": "TODO: add a description",
            "type": "boolean",
            "in": "query",
            "name": "includeDisplayMeta"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "description": "Deletes a data set.",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_datasets-dataSetId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "dataSetId"
        }
      ]
    },
    "/deployment/approve": {
      "post": {
        "description": "Approves a request to join a server to a Log Insight cluster.",
        "schemes": [
          "https"
        ],
        "operationId": "POST_deployment-approve",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "The request to join the cluster was successfully approved or denied.\n",
            "schema": {
              "example": {
                "masterHostname": "10.0.0.123",
                "clusterNode": {
                  "token": "2bd24a67-ac4c-4ca5-a54a-7a8e215c4e8d",
                  "hostname": "10.0.0.124",
                  "status": "Connected",
                  "fullVersion": "4.0.0-1234567"
                }
              },
              "type": "object",
              "properties": {
                "masterHostname": {
                  "type": "string"
                },
                "clusterNode": {
                  "properties": {
                    "token": {
                      "type": "string"
                    },
                    "hostname": {
                      "type": "string"
                    },
                    "status": {
                      "enum": [
                        "Connected",
                        "Disconnected",
                        "Maintenance"
                      ],
                      "type": "string"
                    },
                    "fullVersion": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "token",
                    "hostname",
                    "status",
                    "fullVersion"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "masterHostname",
                "clusterNode"
              ]
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "403": {
            "$ref": "#/responses/trait:bootstrapOnly:403"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "workerAddress": "10.0.0.124",
                "workerPort": 16520,
                "workerToken": "fcfeab92-3346-460f-bd9e-20799437a475",
                "approved": true
              },
              "type": "object",
              "properties": {
                "workerAddress": {
                  "type": "string"
                },
                "workerPort": {
                  "minimum": 1,
                  "maximum": 65535,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "type": "integer"
                },
                "workerToken": {
                  "type": "string"
                },
                "approved": {
                  "type": "boolean"
                }
              },
              "required": [
                "workerAddress",
                "workerPort",
                "workerToken",
                "approved"
              ]
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/deployment/join": {
      "post": {
        "description": "Joins a newly installed Log Insight server to an existing cluster.  When\nsetting up a cluster with multiple servers, call the\n`POST /api/v1/deployment/new` API on the first server.  Then call this\nAPI on the other servers to get them to join the cluster.\n",
        "schemes": [
          "https"
        ],
        "operationId": "POST_deployment-join",
        "responses": {
          "200": {
            "description": "Successfully submitted a request to join the cluster.",
            "schema": {
              "title": "Joined existing deployment",
              "example": {
                "masterAddress": "10.0.0.123",
                "masterUiPort": 80,
                "workerAddress": "10.0.0.124",
                "workerPort": 16520,
                "workerToken": "0ae94cb9-550a-4c01-85b9-3b7095e92321"
              },
              "type": "object",
              "properties": {
                "masterAddress": {
                  "type": "string"
                },
                "workerAddress": {
                  "type": "string"
                },
                "workerPort": {
                  "minimum": 1,
                  "maximum": 65535,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "type": "integer"
                },
                "workerToken": {
                  "type": "string"
                },
                "masterUiPort": {
                  "minimum": 1,
                  "maximum": 65535,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "type": "integer"
                }
              },
              "required": [
                "masterAddress",
                "workerAddress",
                "workerPort",
                "workerToken",
                "masterUiPort"
              ]
            }
          },
          "400": {
            "$ref": "#/responses/trait:jsonRequest:400"
          },
          "403": {
            "$ref": "#/responses/trait:bootstrapOnly:403"
          }
        },
        "parameters": [
          {
            "schema": {
              "title": "Join existing deployment",
              "example": {
                "masterFQDN": "li-01.example.com"
              },
              "type": "object",
              "properties": {
                "masterFQDN": {
                  "type": "string"
                },
                "masterPort": {
                  "minimum": 1,
                  "maximum": 65535,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "type": "integer"
                }
              },
              "required": [
                "masterFQDN"
              ]
            },
            "in": "body",
            "name": "body"
          }
        ]
      }
    },
    "/deployment/new": {
      "post": {
        "description": "Configures a newly installed Log Insight server as the first member of\na new cluster.  When setting up a single stand-alone server, call this\nAPI to initialize the server.  When setting up a cluster with multiple\nservers, call this API on the first server to create a cluster.  Then\ncall `POST /api/v1/deployment/join` on the other servers to get them to\njoin the cluster.\n",
        "schemes": [
          "https"
        ],
        "operationId": "POST_deployment-new",
        "responses": {
          "200": {
            "description": "Successfully configured the server."
          },
          "400": {
            "$ref": "#/responses/trait:jsonRequest:400"
          },
          "403": {
            "$ref": "#/responses/trait:bootstrapOnly:403"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "schema": {
              "title": "Administrator Account",
              "example": {
                "user": {
                  "userName": "admin",
                  "password": "secret",
                  "email": "admin@example.com"
                }
              },
              "type": "object",
              "properties": {
                "user": {
                  "properties": {
                    "userName": {
                      "type": "string"
                    },
                    "password": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "userName",
                    "password"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "user"
              ]
            },
            "in": "body",
            "name": "body"
          }
        ]
      }
    },
    "/deployment/{nodeGuid}": {
      "parameters": [
        {
          "required": true,
          "description": "The unique identifier of a Log Insight server.  This is the\n`workerToken` value returned from the `POST /api/v1/deployment/join`\nAPI.\n",
          "type": "string",
          "in": "path",
          "name": "nodeGuid"
        }
      ]
    },
    "/deployment/waitUntilStarted": {
      "post": {
        "description": "Waits until the server starts.  This can take several minutes to\ncomplete.\n",
        "schemes": [
          "https"
        ],
        "operationId": "POST_deployment-waitUntilStarted",
        "responses": {
          "200": {
            "description": "The server started successfully."
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        }
      }
    },
    "/events/ingest/{agentId}": {
      "post": {
        "description": "Ingest and index new log messages contained in the body.\n\nCan contain a maximum of 4MB of JSON in a single submission with\n16KB in a single `text` field.\nBatch-submission of multiple adjacent events is more\nefficient than a seperate `POST` for each.\n\nEach event can contain a list of key-value `fields`.\nValues are expressed as strings or as character ranges in the event `text`.\n\nThe `timestamp` of an event is optional, and expressed as\nmilliseconds-since-epoch UTC.\nIf the submission is authenticated, the `timestamp` field is trusted.\nUnauthenticated event submissions have their time clamped to\nwithin 10 minutes of the server's current time.\n#% config.api-server.max-tolerated-client-time-drift=600000\n",
        "schemes": [
          "https",
          "http"
        ],
        "operationId": "POST_events-ingest-agentId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Successfully ingested new log events.",
            "schema": {
              "example": {
                "ingested": 1,
                "message": "events ingested",
                "status": "ok"
              },
              "type": "object",
              "properties": {
                "ingested": {
                  "type": "integer"
                },
                "message": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              },
              "required": [
                "ingested",
                "message",
                "status"
              ]
            }
          },
          "400": {
            "description": "The body contained a zero-length list of events.",
            "schema": {
              "example": {
                "errorMessage": "Missing events"
              }
            }
          },
          "401": {
            "$ref": "#/responses/trait:optionalAuthentication:401"
          },
          "440": {
            "$ref": "#/responses/trait:optionalAuthentication:440"
          },
          "503": {
            "description": "The server is overloaded and unable to handle this ingestion request.\nThe `Retry-After` header contains a suggested retry time in seconds.\n"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "events": [
                  {
                    "fields": [
                      {
                        "name": "StaticField",
                        "content": "Security"
                      },
                      {
                        "name": "PositionalField",
                        "startPosition": 6,
                        "length": 7
                      }
                    ],
                    "text": "A new process has been created.",
                    "timestamp": 1396622879241
                  }
                ]
              },
              "type": "object",
              "properties": {
                "events": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "fields": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "text": {
                        "type": "string"
                      },
                      "timestamp": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "required": [
                "events"
              ]
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "A unique identifier for the event source.\nSpecify a BIOS UUID, a stored UUID4 or other stable identifier.\nIf no suitible identifier exists, can be safely set to `0`.\n",
          "type": "string",
          "in": "path",
          "name": "agentId"
        }
      ]
    },
    "/events/{+path}": {
      "get": {
        "description": "Queries Log Insight for events.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_events-+path",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "example": {
                "complete": true,
                "duration": 12,
                "events": [
                  {
                    "text": "[2017-06-09 12:21:02.076-0700] [vpxa] ...",
                    "timestamp": 1496996462076,
                    "timestampString": "2017-06-09 12:21:02.076 GMT+04:00",
                    "fields": [
                      {
                        "name": "source",
                        "content": "10.0.0.123"
                      },
                      {
                        "name": "event_type",
                        "content": "v4_4eca2033"
                      },
                      {
                        "name": "appname",
                        "startPosition": 32,
                        "length": 4
                      }
                    ]
                  },
                  {
                    "text": "[2017-06-09 12:20:56.176-0700] [hostd] ...",
                    "timestamp": 1496996456176,
                    "timestampString": "2017-06-09 12:20:56.176 GMT+04:00",
                    "fields": [
                      {
                        "name": "source",
                        "content": "10.0.0.234"
                      },
                      {
                        "name": "event_type",
                        "content": "v4_a7ce5b6a"
                      },
                      {
                        "name": "appname",
                        "startPosition": 32,
                        "length": 5
                      }
                    ]
                  }
                ]
              },
              "type": "object",
              "properties": {
                "events": {
                  "description": "Lists events that match the query. Present when view=DEFAULT",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "description": "The full text of the event.",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "The time the event was reported, in milliseconds since 00:00:00 UTC on 1 January 1970",
                        "type": "integer"
                      },
                      "timestampString": {
                        "description": "The time the event was reported, in ISO8601 format with time zone offset",
                        "type": "string"
                      },
                      "fields": {
                        "description": "The fields of the event.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "The field name.",
                              "type": "string"
                            },
                            "content": {
                              "description": "The content of the field. Present if the field is not a substring of the event text; see also 'startPosition' and 'length'.",
                              "type": "string"
                            },
                            "startPosition": {
                              "description": "The startPosition in the event text of the field. Present if the field is a substring of the event text; see also 'content' and 'length'.",
                              "type": "integer"
                            },
                            "length": {
                              "description": "The length in the event text of the field. Present if the field is a substring of the event text; see also 'content' and 'startPosition'.",
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "results": {
                  "description": "List of events in a simple flat map format. Present when view=SIMPLE",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "text": {
                        "description": "The full text of the event.",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "The time the event was reported, in milliseconds since 00:00:00 UTC on 1 January 1970",
                        "type": "integer"
                      },
                      "timestampString": {
                        "description": "The time the event was reported, in ISO8601 format with time zone offset",
                        "type": "string"
                      }
                    }
                  }
                },
                "complete": {
                  "description": "Indicates whether all matching events were returned (true), or if only some of them where, because the timeout expired (false).  See also 'warnings'.",
                  "type": "boolean"
                },
                "duration": {
                  "description": "The time required to compute the results, in milliseconds.",
                  "type": "number"
                },
                "warnings": {
                  "description": "A list of problems that were encountered while processing the query. Present if 'complete' is false.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "An identifier for the problem.",
                        "type": "number"
                      },
                      "details": {
                        "description": "A description of the problem.",
                        "type": "string"
                      },
                      "progress": {
                        "description": "The fraction of events processed when the timeout expired. Present for id 128 which indicates that the request timeout expired.",
                        "type": "number"
                      }
                    }
                  }
                }
              },
              "required": [
                "complete"
              ]
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "default": 100,
            "description": "The maximum number of events to retrieve.",
            "type": "integer",
            "in": "query",
            "name": "limit"
          },
          {
            "default": 30000,
            "description": "The time to wait for a response.  If the complete result is not\navailable within that time, partial result is returned and the\n`complete` flag is set to `true`.\n",
            "type": "integer",
            "in": "query",
            "name": "timeout"
          },
          {
            "default": "DEFAULT",
            "description": "The format of query results in the reponse.\n",
            "enum": [
              "DEFAULT",
              "SIMPLE"
            ],
            "type": "string",
            "in": "query",
            "name": "view"
          },
          {
            "description": "If provided, fields defined in the given content-pack are returned\nin the response, in addition to static fields. Specify this\nparameter more than once to extract fields from several content\npacks.  If this parameter is not specified, then only static fields\nare returned in the response payload\n",
            "type": "string",
            "in": "query",
            "name": "content-pack-fields"
          },
          {
            "default": "DESC",
            "description": "The event timestamp sort direction.",
            "enum": [
              "ASC",
              "DESC"
            ],
            "type": "string",
            "in": "query",
            "name": "order-by-direction"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "Specifies constraints on the events to retrieve.  See the\n[specifying constraints section of /events](#events) for details.\n",
          "type": "string",
          "in": "path",
          "name": "+path"
        }
      ]
    },
    "/roles": {
      "get": {
        "description": "Gets a list of all user roles.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_roles",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "Creates a new role.",
        "schemes": [
          "https"
        ],
        "operationId": "POST_roles",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "201": {
            "description": "Successfully created a new role.",
            "schema": {
              "example": {
                "role": {
                  "id": "f970dcba-fe3b-4ae2-b867-7164644db34e",
                  "name": "User1",
                  "description": "Can use Interactive Analytics and Dashboards",
                  "capabilities": [
                    "ANALYTICS",
                    "DASHBOARD"
                  ],
                  "dataSets": [],
                  "required": false,
                  "editable": true
                }
              },
              "type": "object",
              "properties": {
                "group": {
                  "properties": {
                    "capabilities": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "enum": [
                              "ANALYTICS",
                              "VIEW_ADMIN",
                              "INTERNAL",
                              "EDIT_SHARED",
                              "EDIT_ADMIN",
                              "STATISTICS",
                              "INVENTORY",
                              "DASHBOARD"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ]
                      }
                    },
                    "description": {
                      "type": "string"
                    },
                    "editable": {
                      "type": "boolean"
                    },
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "required": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "capabilities",
                    "editable",
                    "id",
                    "name",
                    "required"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "group"
              ]
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "name": "User",
                "description": "Can use Interactive Analytics and Dashboards",
                "capabilities": [
                  "ANALYTICS",
                  "DASHBOARD"
                ],
                "dataSets": [
                  "HostEvents",
                  "DatastoreEvents"
                ]
              },
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "capabilities": {
                  "type": "array",
                  "items": {
                    "enum": [
                      "ANALYTICS",
                      "VIEW_ADMIN",
                      "INTERNAL",
                      "EDIT_SHARED",
                      "EDIT_ADMIN",
                      "STATISTICS",
                      "INVENTORY",
                      "DASHBOARD"
                    ],
                    "type": "string"
                  }
                },
                "dataSets": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "name",
                "capabilities"
              ]
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/roles/{roleId}": {
      "get": {
        "description": "Gets the details of a role.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_roles-roleId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "Updates an existing role.",
        "schemes": [
          "https"
        ],
        "operationId": "POST_roles-roleId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "name": "User",
                "description": "Can use Interactive Analytics and Dashboards",
                "capabilities": [
                  "ANALYTICS",
                  "DASHBOARD"
                ],
                "dataSets": [
                  "HostEvents",
                  "DatastoreEvents"
                ]
              },
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "capabilities": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "enum": [
                          "ANALYTICS",
                          "VIEW_ADMIN",
                          "INTERNAL",
                          "EDIT_SHARED",
                          "EDIT_ADMIN",
                          "STATISTICS",
                          "INVENTORY",
                          "DASHBOARD"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ]
                  }
                },
                "dataSets": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "description": "Updates an existing role.",
        "schemes": [
          "https"
        ],
        "operationId": "PATCH_roles-roleId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "name": "User",
                "description": "Can use Interactive Analytics and Dashboards",
                "capabilities": [
                  "ANALYTICS",
                  "DASHBOARD"
                ],
                "dataSets": [
                  "HostEvents",
                  "DatastoreEvents"
                ]
              },
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "capabilities": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "enum": [
                          "ANALYTICS",
                          "VIEW_ADMIN",
                          "INTERNAL",
                          "EDIT_SHARED",
                          "EDIT_ADMIN",
                          "STATISTICS",
                          "INVENTORY",
                          "DASHBOARD"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ]
                  }
                },
                "dataSets": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "description": "Deletes an exsting role.",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_roles-roleId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "A GUID that uniquely identifies the role.",
          "type": "string",
          "in": "path",
          "name": "roleId"
        }
      ]
    },
    "/roles/{roleId}/authprovidergroups": {
      "get": {
        "description": "Gets a list of directory groups, configured to use the role.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_roles-roleId-authprovidergroups",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "A GUID that uniquely identifies the role.",
          "type": "string",
          "in": "path",
          "name": "roleId"
        }
      ]
    },
    "/roles/{roleId}/authprovidergroups/{provider}": {
      "post": {
        "description": "Updates directory groups.",
        "schemes": [
          "https"
        ],
        "operationId": "POST_roles-roleId-authprovidergroups-provider",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "object",
              "properties": {
                "authProviderGroupsToAdd": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      },
                      "domain": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  }
                },
                "authProviderGroupsToRemove": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      },
                      "domain": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "PATCH_roles-roleId-authprovidergroups-provider",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "type": "string",
          "in": "path",
          "name": "provider",
          "description": "provider"
        },
        {
          "required": true,
          "description": "A GUID that uniquely identifies the role.",
          "type": "string",
          "in": "path",
          "name": "roleId"
        }
      ]
    },
    "/roles/{roleId}/capabilities": {
      "get": {
        "description": "Gets the list of capabilities granted to the group.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_roles-roleId-capabilities",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "description": "Sets the group's capabilities.",
        "schemes": [
          "https"
        ],
        "operationId": "PUT_roles-roleId-capabilities",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "capabilities": [
                  "DASHBOARD",
                  "ANALYTICS"
                ],
                "provider": "ad"
              },
              "type": "object",
              "properties": {
                "capabilities": {
                  "type": "array",
                  "items": {
                    "enum": [
                      "ANALYTICS",
                      "VIEW_ADMIN",
                      "INTERNAL",
                      "EDIT_SHARED",
                      "EDIT_ADMIN",
                      "STATISTICS",
                      "INVENTORY",
                      "DASHBOARD"
                    ],
                    "type": "string"
                  }
                }
              },
              "required": [
                "capabilities"
              ]
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "POST_roles-roleId-capabilities",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "object",
              "properties": {
                "capabilitiesToAdd": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "enum": [
                          "ANALYTICS",
                          "VIEW_ADMIN",
                          "INTERNAL",
                          "EDIT_SHARED",
                          "EDIT_ADMIN",
                          "STATISTICS",
                          "INVENTORY",
                          "DASHBOARD"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ]
                  }
                },
                "capabilitiesToRemove": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "enum": [
                          "ANALYTICS",
                          "VIEW_ADMIN",
                          "INTERNAL",
                          "EDIT_SHARED",
                          "EDIT_ADMIN",
                          "STATISTICS",
                          "INVENTORY",
                          "DASHBOARD"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ]
                  }
                }
              }
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "PATCH_roles-roleId-capabilities",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "object",
              "properties": {
                "capabilitiesToAdd": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "enum": [
                          "ANALYTICS",
                          "VIEW_ADMIN",
                          "INTERNAL",
                          "EDIT_SHARED",
                          "EDIT_ADMIN",
                          "STATISTICS",
                          "INVENTORY",
                          "DASHBOARD"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ]
                  }
                },
                "capabilitiesToRemove": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "enum": [
                          "ANALYTICS",
                          "VIEW_ADMIN",
                          "INTERNAL",
                          "EDIT_SHARED",
                          "EDIT_ADMIN",
                          "STATISTICS",
                          "INVENTORY",
                          "DASHBOARD"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ]
                  }
                }
              }
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "A GUID that uniquely identifies the role.",
          "type": "string",
          "in": "path",
          "name": "roleId"
        }
      ]
    },
    "/roles/{roleId}/datasets": {
      "get": {
        "description": "Gets the list of data sets that the group can access.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_roles-roleId-datasets",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "description": "Sets the list of data sets that the group can access.",
        "schemes": [
          "https"
        ],
        "operationId": "PUT_roles-roleId-datasets",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "dataSets": [
                  {
                    "id": "3b2f6741-a450-4f23-adf6-137df9ffd32a",
                    "name": "An Important Dataset",
                    "description": "A custom dataset for important machines",
                    "type": "AND",
                    "constraints": [
                      {
                        "operator": "CONTAINS",
                        "hidden": false,
                        "name": "hostname",
                        "value": "importantprefix*",
                        "fieldType": "STRING"
                      }
                    ]
                  }
                ]
              },
              "type": "object",
              "properties": {
                "dataSets": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                        "type": "string"
                      },
                      "name": {
                        "minLength": 1,
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "description": "If AND, this data set restricts other data sets",
                        "type": "string"
                      },
                      "constraints": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "operator": {
                              "minLength": 1,
                              "type": "string"
                            },
                            "hidden": {
                              "type": "boolean"
                            },
                            "name": {
                              "minLength": 1,
                              "type": "string"
                            },
                            "value": {
                              "minLength": 1,
                              "type": "string"
                            },
                            "fieldType": {
                              "minLength": 1,
                              "type": "string"
                            }
                          },
                          "required": [
                            "operator",
                            "hidden",
                            "name",
                            "value",
                            "fieldType"
                          ]
                        }
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "description",
                      "type",
                      "constraints"
                    ]
                  }
                }
              },
              "required": [
                "dataSets"
              ]
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "POST_roles-roleId-datasets",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "object",
              "properties": {
                "dataSetsToAdd": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "dataSetsToRemove": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "PATCH_roles-roleId-datasets",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "object",
              "properties": {
                "dataSetsToAdd": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "dataSetsToRemove": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "A GUID that uniquely identifies the role.",
          "type": "string",
          "in": "path",
          "name": "roleId"
        }
      ]
    },
    "/roles/{roleId}/users": {
      "get": {
        "description": "Gets the list of users in the group.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_roles-roleId-users",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "POST_roles-roleId-users",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "object",
              "properties": {
                "usersToAdd": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "usersToRemove": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "PATCH_roles-roleId-users",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "object",
              "properties": {
                "usersToAdd": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "usersToRemove": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "A GUID that uniquely identifies the role.",
          "type": "string",
          "in": "path",
          "name": "roleId"
        }
      ]
    },
    "/hosts": {
      "post": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "POST_hosts",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/inventory/clients": {
      "get": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "GET_inventory-clients",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/inventory/item/{clientId}/{sourceId}": {
      "get": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "GET_inventory-item-clientId-sourceId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "POST_inventory-item-clientId-sourceId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "PATCH_inventory-item-clientId-sourceId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_inventory-item-clientId-sourceId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "sourceId"
        },
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "clientId"
        }
      ]
    },
    "/inventory/items/{clientId}": {
      "get": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "GET_inventory-items-clientId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "clientId"
        }
      ]
    },
    "/inventory/lookup/{hostname}": {
      "get": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "GET_inventory-lookup-hostname",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "hostname"
        }
      ]
    },
    "/inventory/settings": {
      "get": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "GET_inventory-settings",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "POST_inventory-settings",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "PATCH_inventory-settings",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/inventory/source": {
      "post": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "POST_inventory-source",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/inventory/source/{sourceId}": {
      "get": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "GET_inventory-source-sourceId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "POST_inventory-source-sourceId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "PATCH_inventory-source-sourceId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_inventory-source-sourceId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "sourceId"
        }
      ]
    },
    "/inventory/sources": {
      "get": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "GET_inventory-sources",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/licenses": {
      "get": {
        "description": "Retrieve the license state, including a list of licenses.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_licenses",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the License information",
            "schema": {
              "example": {
                "licenseState": "ACTIVE",
                "maxOsis": 0,
                "maxCpus": 0,
                "hasCpu": false,
                "hasOsi": true,
                "hasTap": false,
                "licenses": {
                  "95bfa29a-e60d-49e7-b00e-8c40d83f2036": {
                    "id": "95bfa29a-e60d-49e7-b00e-8c40d83f2036",
                    "status": "Active",
                    "error": "",
                    "configuration": "1 Operating System Instance (OSI)",
                    "licenseKey": "4J2TK-XXXXX-XXXXX-XXXXX-XXXXX",
                    "infinite": true,
                    "count": 0,
                    "typeEnum": "OSI",
                    "expiration": -14400000,
                    "createdDate": 1498731608705,
                    "expirationString": "",
                    "createdDateString": "2017-06-29 14:20:08.705 GMT+04:00"
                  }
                },
                "standardLicenseCapabilities": [
                  "FORWARDING",
                  "RBAC",
                  "UPGRADE",
                  "CUSTOM_SSL",
                  "ACTIVE_DIRECTORY",
                  "CONTENT_PACK",
                  "VSPHERE_FULL_SUPPORT",
                  "CLUSTER",
                  "IMPORT_CONTENT_PACKS",
                  "QUERY",
                  "ARCHIVE",
                  "THIRD_PARTY_CONTENT_PACKS"
                ],
                "limitedLicenseCapabilities": [
                  "QUERY",
                  "RBAC",
                  "UPGRADE",
                  "ACTIVE_DIRECTORY",
                  "CONTENT_PACK"
                ],
                "uninitializedLicenseCapabilities": [
                  "RBAC",
                  "ACTIVE_DIRECTORY",
                  "CONTENT_PACK"
                ]
              },
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "licenseState": {
                  "enum": [
                    "ACTIVE",
                    "LIMITED",
                    "EXPIRED",
                    "UNINITIALIZED",
                    "ERROR",
                    "DELETED"
                  ],
                  "type": "string"
                },
                "maxOsis": {
                  "type": "integer"
                },
                "maxCpus": {
                  "type": "integer"
                },
                "hasCpu": {
                  "type": "boolean"
                },
                "hasOsi": {
                  "type": "boolean"
                },
                "hasTap": {
                  "type": "boolean"
                },
                "licenses": {
                  "type": "string"
                },
                "standardLicenseCapabilities": {
                  "type": "array",
                  "items": {
                    "enum": [
                      "FORWARDING",
                      "RBAC",
                      "UPGRADE",
                      "CUSTOM_SSL",
                      "ACTIVE_DIRECTORY",
                      "CONTENT_PACK",
                      "VSPHERE_FULL_SUPPORT",
                      "CLUSTER",
                      "IMPORT_CONTENT_PACKS",
                      "QUERY",
                      "ARCHIVE",
                      "THIRD_PARTY_CONTENT_PACKS"
                    ],
                    "type": "string"
                  }
                },
                "limitedLicenseCapabilities": {
                  "type": "array",
                  "items": {
                    "enum": [
                      "QUERY",
                      "RBAC",
                      "UPGRADE",
                      "ACTIVE_DIRECTORY",
                      "CONTENT_PACK"
                    ],
                    "type": "string"
                  }
                },
                "uninitializedLicenseCapabilities": {
                  "type": "array",
                  "items": {
                    "enum": [
                      "RBAC",
                      "ACTIVE_DIRECTORY",
                      "CONTENT_PACK"
                    ],
                    "type": "string"
                  }
                }
              },
              "required": [
                "licenseState",
                "maxOsis",
                "maxCpus",
                "hasCpu",
                "hasOsi",
                "hasTap",
                "licenses",
                "standardLicenseCapabilities",
                "limitedLicenseCapabilities",
                "uninitializedLicenseCapabilities"
              ]
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "Add a new license to the collection. A UUID will be generated to represent\nthe license, and can be used for deletion. The license summary cannot be set,\nand is derived from the license key. In addition, a single license key cannot\nbe updated in-place. Instead, the old license keys should be deleted after the\nnew license is added.\n",
        "schemes": [
          "https"
        ],
        "operationId": "POST_licenses",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "201": {
            "description": "Created a new license with the provided license key.",
            "schema": {
              "title": "License Key Added",
              "example": {
                "id": "abcdef12-3456-7890-ba36-123456789012",
                "status": "Active",
                "error": "",
                "configuration": "1 Operating System Instance (OSI)",
                "licenseKey": "M502V-XXXXX-XXXXX-XXXXX-XXXXX",
                "infinite": true,
                "count": 0,
                "typeEnum": "OSI",
                "expiration": -14400000,
                "createdDate": 1498731659310,
                "expirationString": "",
                "createdDateString": "2017-06-29 14:20:59.310 GMT+04:00"
              },
              "type": "object",
              "properties": {
                "id": {
                  "title": "UUID",
                  "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "error": {
                  "type": "string"
                },
                "configuration": {
                  "type": "string"
                },
                "licenseKey": {
                  "pattern": "^[0-9A-Z]{5}-[0-9A-Z]{5}-[0-9A-Z]{5}-[0-9A-Z]{5}-[0-9A-Z]{5}$",
                  "type": "string"
                },
                "infinite": {
                  "type": "boolean"
                },
                "count": {
                  "type": "integer"
                },
                "typeEnum": {
                  "type": "string"
                },
                "expiration": {
                  "type": "number"
                },
                "createdDate": {
                  "type": "number"
                },
                "expirationString": {
                  "type": "string"
                },
                "createdDateString": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "status",
                "count",
                "licenseKey"
              ]
            }
          },
          "400": {
            "description": "Error when trying to upload an invalid license key",
            "schema": {
              "example": {
                "errorMessage": "Invalid serial number"
              },
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "409": {
            "description": "Error when trying to upload the license key which already exists",
            "schema": {
              "example": {
                "errorMessage": "License already exists."
              },
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                }
              }
            }
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "schema": {
              "title": "License Key Added",
              "example": {
                "key": "M502V-XXXXX-XXXXX-XXXXX-XXXXX"
              },
              "type": "object",
              "properties": {
                "key": {
                  "pattern": "^[0-9A-Z]{5}-[0-9A-Z]{5}-[0-9A-Z]{5}-[0-9A-Z]{5}-[0-9A-Z]{5}$",
                  "type": "string"
                }
              },
              "required": [
                "key"
              ]
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/licenses/{licenseId}": {
      "delete": {
        "description": "Remove a single license key, specified by its UUID.\n",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_licenses-licenseId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted a license."
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "License ID of the license to delete.",
          "type": "string",
          "in": "path",
          "name": "licenseId"
        }
      ]
    },
    "/load-balancer": {
      "get": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "GET_load-balancer",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "POST_load-balancer",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/load-balancer/status": {
      "get": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "GET_load-balancer-status",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/notification/channels": {
      "get": {
        "description": "Gets a list of all the notification channels that are used for alerting. At this time, the list includes SMTP server configuration used for sending alert emails.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_notification-channels",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the SMTP server configuration used for sending email alerts.",
            "schema": {
              "example": {
                "channels": [
                  {
                    "type": "email",
                    "config": {
                      "server": "smtp.example.com",
                      "port": 25,
                      "sslAuth": false,
                      "tls": false,
                      "defaultSender": "email@example.com",
                      "login": "user@example.com",
                      "password": ""
                    }
                  }
                ]
              },
              "type": "object",
              "properties": {
                "channels": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "description": "Updates the configurations for the notification channels that are used for alerting. At this time, the list includes SMTP server configuration used for sending alert emails.",
        "schemes": [
          "https"
        ],
        "operationId": "PUT_notification-channels",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the SMTP configurations used for sending alert emails."
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "channels": [
                  {
                    "type": "email",
                    "config": {
                      "server": "smtp.example.com",
                      "port": 25,
                      "sslAuth": false,
                      "tls": false,
                      "defaultSender": "email@example.com",
                      "login": "user@example.com",
                      "password": ""
                    }
                  }
                ]
              },
              "type": "object",
              "properties": {
                "channels": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/notification/email": {
      "get": {
        "description": "Retrieve the list of email addresses to which system notifications will be delivered.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_notification-email",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of email addresses to which system notifications will be delivered.",
            "schema": {
              "example": {
                "emails": [
                  "email1@address.com",
                  "email2@address.com"
                ]
              },
              "type": "object",
              "properties": {
                "emails": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "emails"
              ]
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "description": "Update the list of email addresses to which system notifications will be delivered.",
        "schemes": [
          "https"
        ],
        "operationId": "PUT_notification-email",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the list of emails to which system notifications will be delivered."
          },
          "400": {
            "description": "Failed to apply configuration changes, either because of a parse error or invalid configuration options."
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "emails": [
                  "email1@address.com",
                  "email2@address.com"
                ]
              },
              "type": "object",
              "properties": {
                "emails": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "emails"
              ]
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/notification/webhook": {
      "get": {
        "description": "Get the list of webhook URLs configured for receiving system notifications.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_notification-webhook",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of webhook URLs configured for receiving system notifications.",
            "schema": {
              "example": {
                "URLs": [
                  "http://example.com/webhook1",
                  "http://example.com/webhook2"
                ]
              },
              "type": "object",
              "properties": {
                "URLs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "URLs"
              ]
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "description": "Update the list of webhook URLs configured for receiving system notifications.",
        "schemes": [
          "https"
        ],
        "operationId": "PUT_notification-webhook",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the list of webhook URLs configured for receiving system notifications."
          },
          "400": {
            "description": "Failed to apply configuration changes, either because of a parse error or invalid configuration options."
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "URLs": [
                  "http://example.com/webhook1",
                  "http://example.com/webhook2"
                ]
              },
              "type": "object",
              "properties": {
                "URLs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "URLs"
              ]
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/notification/config/retention-threshold": {
      "get": {
        "description": "Retrieve current retention notification threshold configuration.\nIf the amount of data the system can hold at the current ingestion rate is less than the given amount,\nsend a system notification.\nE.g., if you are receiving 10 GB/day of data and you have 200 GB of space, then you have 20 days of capacity.\nIf you set your threshold to 1 month, you will receive a notification that you are below this capacity.\n",
        "schemes": [
          "https"
        ],
        "operationId": "GET_notification-config-retention-threshold",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved retention notification threshold configuration.",
            "schema": {
              "example": {
                "sendNotification": true,
                "dataInterval": 2,
                "intervalUnit": "MONTHS"
              }
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "description": "Update retention notification threshold configuration.",
        "schemes": [
          "https"
        ],
        "operationId": "PUT_notification-config-retention-threshold",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Successfully updated retention notification threshold configuration."
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "sendNotification": true,
                "dataInterval": 2,
                "intervalUnit": "MONTHS"
              },
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/sessions": {
      "post": {
        "description": "Signs into Log Insight with the given credentials, creates and returns a\nnew session.\n",
        "schemes": [
          "https"
        ],
        "operationId": "POST_sessions",
        "responses": {
          "200": {
            "description": "Successfully signed into Log Insight.",
            "schema": {
              "example": {
                "userId": "cc251b9f-b4d0-437d-86de-8ac560d45e55",
                "sessionId": "80Lmue52xwIgDiQMu7as9jLdLFFs+Hn3HI2WP0fx6kH0ApL",
                "ttl": 1800
              },
              "type": "object",
              "properties": {
                "userId": {
                  "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                  "description": "UUID",
                  "type": "string"
                },
                "sessionId": {
                  "minLength": 1,
                  "description": "An opaque session ID for use in the Authorization header.",
                  "type": "string"
                },
                "ttl": {
                  "minimum": 0,
                  "description": "Time to live: Number of seconds this session is valid for.",
                  "type": "integer"
                }
              },
              "required": [
                "userId",
                "sessionId",
                "ttl"
              ]
            }
          },
          "401": {
            "description": "Could not sign in with the given credentials.",
            "schema": {
              "example": {
                "errorMessage": "Invalid username or password.",
                "errorCode": "FIELD_ERROR"
              }
            }
          },
          "503": {
            "$ref": "#/responses/trait:notAuthenticated:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "title": "Login",
              "example": {
                "username": "johndoe",
                "password": "password",
                "provider": "Local"
              },
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "provider": {
                  "pattern": "^(Local|ActiveDirectory)$",
                  "type": "string"
                }
              },
              "required": [
                "username",
                "password",
                "provider"
              ]
            },
            "in": "body",
            "name": "body"
          }
        ]
      }
    },
    "/sessions/current": {
      "get": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "GET_sessions-current",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "TODO: add a description",
            "schema": {
              "example": {}
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/ssl/force": {
      "put": {
        "description": "Sets whether an SSL connection to the API is required.",
        "schemes": [
          "https"
        ],
        "operationId": "PUT_ssl-force",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/time": {
      "get": {
        "description": "Retrieve the current time from the server's perspective,\nexpressed as milliseconds-since-epoch UTC.\n\nConstraints used for an events query include operators.\nThe time range for the LAST operator is relative to the current time.\nSee the [constraints reference section of /events](#events) for details.\n",
        "schemes": [
          "https"
        ],
        "operationId": "GET_time",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the server's current time.",
            "schema": {
              "example": {
                "currentTime": 1496995473577,
                "currentTimeString": "2017-06-09 12:04:33.577 GMT+04:00"
              },
              "type": "object",
              "properties": {
                "currentTime": {
                  "type": "integer"
                },
                "currentTimeString": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/time/config": {
      "get": {
        "description": "Retrieve the current list of time sources for this cluster.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_time-config",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the current time source.",
            "schema": {
              "example": {
                "ntpConfig": {
                  "timeReference": "NTP_SERVER",
                  "ntpServers": [
                    "0.vmware.pool.ntp.org",
                    "1.vmware.pool.ntp.org",
                    "2.vmware.pool.ntp.org",
                    "3.vmware.pool.ntp.org"
                  ]
                }
              },
              "type": "object",
              "properties": {
                "ntpConfig": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "description": "Set new time sources for this cluster.",
        "schemes": [
          "https"
        ],
        "operationId": "PUT_time-config",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Successfully applied new time source settings."
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "timeReference": "NTP_SERVER",
                "ntpServers": [
                  "0.vmware.pool.ntp.org",
                  "1.vmware.pool.ntp.org",
                  "2.vmware.pool.ntp.org",
                  "3.vmware.pool.ntp.org"
                ]
              },
              "type": "object",
              "properties": {
                "timeReference": {
                  "enum": [
                    "NTP_SERVER",
                    "ESX_HOST"
                  ],
                  "type": "string"
                },
                "ntpServers": {
                  "type": "array"
                }
              }
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/time/test": {
      "post": {
        "description": "Test connectivity to new NTP servers.\nMay take up to 20 seconds per server listed.\n",
        "schemes": [
          "https"
        ],
        "operationId": "POST_time-test",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Successfully tested connectivity to NTP servers.",
            "schema": {
              "example": {
                "testedNTPServers": [
                  {
                    "server": "0.vmware.pool.ntp.org",
                    "state": "pass"
                  },
                  {
                    "server": "1.vmware.pool.ntp.org",
                    "state": "pass"
                  },
                  {
                    "server": "2.vmware.pool.ntp.org",
                    "state": "pass"
                  },
                  {
                    "server": "3.vmware.pool.ntp.org",
                    "state": "fail"
                  }
                ]
              },
              "type": "object",
              "properties": {
                "testedNTPServers": {
                  "description": "List of remote NTP server FQDN/IPs",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "server": {
                        "type": "string"
                      },
                      "state": {
                        "enum": [
                          "fail",
                          "pass"
                        ],
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "schema": {
              "description": "Test NTP servers",
              "example": {
                "ntpServers": [
                  "0.vmware.pool.ntp.org",
                  "1.vmware.pool.ntp.org",
                  "2.vmware.pool.ntp.org",
                  "3.vmware.pool.ntp.org"
                ]
              },
              "type": "object",
              "properties": {
                "ntpServers": {
                  "description": "List of remote NTP server FQDN/IPs",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/ui/browser-session": {
      "get": {
        "description": "Retrieve current browser session timeout, expressed in minutes.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_ui-browser-session",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Browser session timeout configuration was retrieved successfully.",
            "schema": {
              "example": {
                "timeout": 20
              }
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "description": "Set a new browser session timeout, expressed in minutes.\nSpecify `-1` for no timeout.\n",
        "schemes": [
          "https"
        ],
        "operationId": "PUT_ui-browser-session",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Browser session timeout was saved successfully."
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "timeout": 20
              },
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/ui/language": {
      "get": {
        "description": "Retrieve current language configuration.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_ui-language",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Language configuration was retrieved successfully.",
            "schema": {
              "example": {
                "alwaysUseEnglish": true
              }
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "description": "Set a new language configuration.",
        "schemes": [
          "https"
        ],
        "operationId": "PUT_ui-language",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Language configuration was saved successfully."
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "alwaysUseEnglish": true
              },
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/upgrades": {
      "post": {
        "description": "Starts the process of upgrading Log Insight to a new version. This request\nuploads a PAK file containing the new version, and sets the upgrade status\nto \"Pending\". PAK file URL should be provided in JSON body. It's also possible\nto upload PAK file directly as a binary data by setting 'Content-Type' header\nto 'application/octet-stream' and sending PAK file as a body. It returns the\nnew End User License Agreement (EULA) and upgrade version. To continue with\nthe upgrade, send a `PUT /upgrades/{version}/eula` with `eulaAccepted` set to true.\n",
        "schemes": [
          "https"
        ],
        "operationId": "POST_upgrades",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "The upgrade was started successfully.",
            "schema": {
              "example": {
                "eula": "VMware Agreement text",
                "version": "4.0.0-1234567"
              },
              "type": "object",
              "properties": {
                "eula": {
                  "type": "string"
                },
                "version": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request failed because the request body either did not contain\nvalid JSON, or did not match the required JSON format.\n",
            "schema": {
              "example": {
                "errorMessage": "Invalid request body.",
                "errorCode": "JSON_FORMAT_ERROR",
                "errorDetails": {
                  "reason": "..."
                }
              },
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                },
                "errorCode": {
                  "enum": [
                    "FIELD_ERROR",
                    "TEST_ERROR",
                    "JSON_FORMAT_ERROR",
                    "LICENSE_ERROR",
                    "VSPHERE_INTEGRATION_ERROR",
                    "VROPS_INTEGRATION_ERROR",
                    "UPGRADE_ERROR",
                    "SEARCH_ERROR",
                    "AGENT_ERROR",
                    "RBAC_COMMON_ERROR",
                    "RBAC_USERS_ERROR",
                    "RBAC_GROUPS_ERROR",
                    "RBAC_ADGROUPS_ERROR",
                    "RBAC_DATASETS_ERROR",
                    "RBAC_VIDM_GROUPS_ERROR",
                    "SECURITY_ERROR",
                    "DEPLOYMENT_ERROR",
                    "SUPPORT_BUNDLE_ERROR",
                    "LOAD_BALANCER_ERROR",
                    "VIDM_ERROR",
                    "QUERY_ERROR"
                  ],
                  "type": "string"
                },
                "errorDetails": {
                  "properties": {
                    "errorCode": {
                      "type": "string"
                    },
                    "reason": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "schema": {
              "type": "object",
              "example": {
                "pakUrl": "http://vmware.com/downloads/VMware-vRealize-Log-Insight-4.0.0.pak"
              }
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "get": {
        "description": "Gets the upgraded version of the Log Insight cluster.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_upgrades",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "The upgraded version was retrieved successfully.",
            "schema": {
              "example": {
                "version": "4.0.0-1234567",
                "fullVersion": "4.0.0-1234567",
                "stable": true,
                "nodes": {
                  "5817df88-7383-43cb-bf2b-aa87de412213": {
                    "version": "4.0.0-1234567",
                    "fullVersion": "4.0.0-1234567"
                  },
                  "74108d1e-7ec2-4524-b5ca-864957654d2e": {
                    "version": "4.0.0-1234567",
                    "fullVersion": "4.0.0-1234567"
                  },
                  "61f3dfb1-dcf2-4e6d-9335-6271716d8055": {
                    "version": "4.0.0-1234567",
                    "fullVersion": "4.0.0-1234567"
                  },
                  "c73f9683-0319-4fee-a3a8-a841c62e6b61": {
                    "version": "4.0.0-1234567",
                    "fullVersion": "4.0.0-1234567"
                  }
                }
              },
              "type": "object",
              "properties": {
                "version": {
                  "type": "string"
                },
                "fullVersion": {
                  "type": "string"
                },
                "stable": {
                  "type": "boolean"
                },
                "nodes": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/upgrades/local": {
      "get": {
        "description": "Gets the upgraded version on the Log Insight node that received the API\ncall.\n",
        "schemes": [
          "https"
        ],
        "operationId": "GET_upgrades-local",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "The upgraded version was retrieved successfully.",
            "schema": {
              "example": {
                "version": "4.0.0-1234567",
                "fullVersion": "4.0.0-1234567"
              },
              "type": "object",
              "properties": {
                "version": {
                  "type": "string"
                },
                "fullVersion": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/upgrades/{version}": {
      "get": {
        "description": "Gets the cluster-wide status of the upgrade.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_upgrades-version",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the upgrade status of the cluster.",
            "schema": {
              "title": "Upgrade to Version Status",
              "example": {
                "status": {
                  "version": "4.0.0-1234567",
                  "pakFileName": "VMware-vRealize-Log-Insight-4.0.0-1234567.pak",
                  "nodeStatuses": [
                    {
                      "status": "Upgrading",
                      "timestamp": 1496145083890,
                      "timestampString": "2017-05-30 15:51:23.890 GMT+04:00",
                      "token": "27bcbafc-b99d-4609-9fab-4f3ad937fe5e"
                    }
                  ],
                  "pakFileUrl": "http://vmware.com/downloads/VMware-vRealize-Log-Insight-4.0.0.pak",
                  "eulaAccepted": false,
                  "masterToken": "27bcbafc-b99d-4609-9fab-4f3ad937fe5e",
                  "clusterStatus": "Upgrading",
                  "started": "1496145083067",
                  "finished": "0",
                  "startedString": "2017-05-30 15:51:23.067 GMT+04:00",
                  "finishedString": ""
                }
              },
              "type": "object",
              "properties": {
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "The Log Insight version of the upgrade",
          "type": "string",
          "in": "path",
          "name": "version"
        }
      ]
    },
    "/upgrades/{version}/eula": {
      "put": {
        "description": "Accepts or declines the End User License Agreement (EULA) of a product\nupgrade. Continues the upgrade process if `accepted` is true, or\ncancels it otherwise. This request is expected when the upgrade status\nis \"Pending\".\n",
        "schemes": [
          "https"
        ],
        "operationId": "PUT_upgrades-version-eula",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Successfully accepted or declined the EULA.  Returns the upgrade\nstatus of the cluster.\n",
            "schema": {
              "title": "Upgrade to Version Status",
              "example": {
                "status": {
                  "started": "1471285414207",
                  "finished": "0",
                  "version": "4.0.0-1234567",
                  "pakFileName": "VMware-vRealize-Log-Insight-4.0.0-1234567.pak",
                  "nodeStatuses": [
                    {
                      "status": "Upgrading",
                      "token": "27bcbafc-b99d-4609-9fab-4f3ad937fe5e",
                      "timestamp": 1498657510765,
                      "timestampString": "2017-06-28 17:45:10.765 GMT+04:00"
                    }
                  ],
                  "pakFileUrl": "http://vmware.com/downloads/VMware-vRealize-Log-Insight-4.0.0.pak",
                  "eulaAccepted": true,
                  "masterToken": "27bcbafc-b99d-4609-9fab-4f3ad937fe5e",
                  "clusterStatus": "Upgrading"
                }
              },
              "type": "object",
              "properties": {
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "accepted": true
              },
              "type": "object",
              "properties": {
                "accepted": {
                  "default": false,
                  "type": "boolean"
                }
              },
              "required": [
                "accepted"
              ]
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "The Log Insight version of the upgrade",
          "type": "string",
          "in": "path",
          "name": "version"
        }
      ]
    },
    "/upgrades/{version}/nodes": {
      "parameters": [
        {
          "required": true,
          "description": "The Log Insight version of the upgrade",
          "type": "string",
          "in": "path",
          "name": "version"
        }
      ]
    },
    "/users": {
      "get": {
        "description": "Gets a list of users.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_users",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "default": false,
            "description": "Indicates whether to include extended information in the results, such\nas the capabilities of the user and the groups they are a member of.\n",
            "type": "boolean",
            "in": "query",
            "name": "includeExtendedData"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "Creates a new user.",
        "schemes": [
          "https"
        ],
        "operationId": "POST_users",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "201": {
            "description": "Successfully added a user.",
            "schema": {
              "example": {
                "user": {
                  "id": "de305d54-75b4-431b-adb2-eb6b9e546014",
                  "username": "johndoe",
                  "apiId": "8d03c137-74e4-4a99-921d-4e2867de4fa7",
                  "groupIds": [
                    "00000000-0000-0000-0000-000000000002"
                  ],
                  "capabilities": [
                    {
                      "id": "ANALYTICS"
                    },
                    {
                      "id": "DASHBOARD"
                    }
                  ],
                  "userCapabilities": [
                    {
                      "id": "ANALYTICS"
                    },
                    {
                      "id": "DASHBOARD"
                    }
                  ],
                  "email": "johndoe@example.com",
                  "type": "DEFAULT"
                }
              },
              "type": "object",
              "properties": {
                "user": {
                  "type": "string"
                }
              },
              "required": [
                "user"
              ]
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "username": "johndoe",
                "password": "Password123!",
                "email": "johndoe@example.com",
                "groupIds": [
                  "00000000-0000-0000-0000-000000000002"
                ],
                "generateApiKey": false
              },
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "groupIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "generateApiKey": {
                  "type": "boolean"
                }
              },
              "required": [
                "username",
                "password",
                "email",
                "groupIds",
                "generateApiKey"
              ]
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/users/self/snapshots": {
      "get": {
        "description": "Gets the snapshots owned by the logged-in user.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_users-self-snapshots",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "Creates a new snapshot.",
        "schemes": [
          "https"
        ],
        "operationId": "POST_users-self-snapshots",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "description": "Deletes all snapshots of the logger-in user.",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_users-self-snapshots",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/users/self/snapshots/{snapshotId}": {
      "patch": {
        "description": "Updates the settings of a snapshot.",
        "schemes": [
          "https"
        ],
        "operationId": "PATCH_users-self-snapshots-snapshotId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "Updates the settings of a snapshot.",
        "schemes": [
          "https"
        ],
        "operationId": "POST_users-self-snapshots-snapshotId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "description": "Deletes a snapshot.",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_users-self-snapshots-snapshotId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "snapshotId"
        }
      ]
    },
    "/users/self/snapshots/{snapshotId}/position": {
      "put": {
        "description": "Moves a snapshot to a new position.",
        "schemes": [
          "https"
        ],
        "operationId": "PUT_users-self-snapshots-snapshotId-position",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "snapshotId"
        }
      ]
    },
    "/users/{userId}": {
      "get": {
        "description": "Retrieves the settings of a user.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_users-userId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "400": {
            "description": "The parameters could not be understood.",
            "schema": {
              "example": {
                "errorMessage": "Bad request received (Cannot parse parameter userId as UUID: Invalid UUID string: johndoe): GET /api/v1/users/johndoe"
              },
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                }
              },
              "required": [
                "errorMessage"
              ]
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "404": {
            "description": "A user with the given identifier was not found.",
            "schema": {
              "example": {
                "errorMessage": "Specified user does not exist.",
                "errorCode": "RBAC_USERS_ERROR",
                "errorDetails": {
                  "errorCode": "com.vmware.loginsight.api.errors.rbac.user_does_not_exist"
                }
              },
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                },
                "errorCode": {
                  "enum": [
                    "FIELD_ERROR",
                    "TEST_ERROR",
                    "JSON_FORMAT_ERROR",
                    "LICENSE_ERROR",
                    "VSPHERE_INTEGRATION_ERROR",
                    "VROPS_INTEGRATION_ERROR",
                    "UPGRADE_ERROR",
                    "SEARCH_ERROR",
                    "AGENT_ERROR",
                    "RBAC_COMMON_ERROR",
                    "RBAC_USERS_ERROR",
                    "RBAC_GROUPS_ERROR",
                    "RBAC_ADGROUPS_ERROR",
                    "RBAC_DATASETS_ERROR",
                    "RBAC_VIDM_GROUPS_ERROR",
                    "SECURITY_ERROR",
                    "DEPLOYMENT_ERROR",
                    "SUPPORT_BUNDLE_ERROR",
                    "LOAD_BALANCER_ERROR",
                    "VIDM_ERROR",
                    "QUERY_ERROR"
                  ],
                  "type": "string"
                },
                "errorDetails": {
                  "properties": {
                    "errorCode": {
                      "type": "string"
                    },
                    "reason": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "default": false,
            "description": "Indicates whether to include extended information in the results,\nsuch as the capabilities of the user and the groups they are a\nmember of.\n",
            "type": "boolean",
            "in": "query",
            "name": "includeExtendedData"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "description": "Deletes a user.",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_users-userId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "Modifies the settings of a user.",
        "schemes": [
          "https"
        ],
        "operationId": "POST_users-userId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "description": "Modifies the settings of a user.",
        "schemes": [
          "https"
        ],
        "operationId": "PATCH_users-userId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "The unique identifier of the user.",
          "type": "string",
          "in": "path",
          "name": "userId"
        }
      ]
    },
    "/users/{userId}/capabilities": {
      "get": {
        "description": "Gets a list of capabilities of the user.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_users-userId-capabilities",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "Adds and removes capabilities to a user.",
        "schemes": [
          "https"
        ],
        "operationId": "POST_users-userId-capabilities",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "description": "Adds and removes capabilities to a user.",
        "schemes": [
          "https"
        ],
        "operationId": "PATCH_users-userId-capabilities",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "description": "Sets the capabilities of a user.",
        "schemes": [
          "https"
        ],
        "operationId": "PUT_users-userId-capabilities",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "The unique identifier of the user.",
          "type": "string",
          "in": "path",
          "name": "userId"
        }
      ]
    },
    "/users/{userId}/capabilities/{capability}": {
      "get": {
        "description": "Checks if the user has the capability.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_users-userId-capabilities-capability",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "capability"
        },
        {
          "required": true,
          "description": "The unique identifier of the user.",
          "type": "string",
          "in": "path",
          "name": "userId"
        }
      ]
    },
    "/users/{userId}/datasets": {
      "get": {
        "description": "Gets the collection of data sets the user can access.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_users-userId-datasets",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "Adds and removes data sets the user can access.",
        "schemes": [
          "https"
        ],
        "operationId": "POST_users-userId-datasets",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "description": "Adds and removes data sets the user can access.",
        "schemes": [
          "https"
        ],
        "operationId": "PATCH_users-userId-datasets",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "description": "Sets the data sets the user can access.",
        "schemes": [
          "https"
        ],
        "operationId": "PUT_users-userId-datasets",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "The unique identifier of the user.",
          "type": "string",
          "in": "path",
          "name": "userId"
        }
      ]
    },
    "/users/{userId}/groups": {
      "get": {
        "description": "Gets a list of groups the user is a member of.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_users-userId-groups",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "Adds and removes the user as a member of groups.",
        "schemes": [
          "https"
        ],
        "operationId": "POST_users-userId-groups",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "description": "Adds and removes the user as a member of groups.",
        "schemes": [
          "https"
        ],
        "operationId": "PATCH_users-userId-groups",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "description": "Sets the group membership of the user.",
        "schemes": [
          "https"
        ],
        "operationId": "PUT_users-userId-groups",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "The unique identifier of the user.",
          "type": "string",
          "in": "path",
          "name": "userId"
        }
      ]
    },
    "/users/{userId}/snapshots": {
      "get": {
        "description": "Gets the snapshots owned by a user.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_users-userId-snapshots",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "Creates a snapshot.",
        "schemes": [
          "https"
        ],
        "operationId": "POST_users-userId-snapshots",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "description": "Deletes all snapshots owned by a user.",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_users-userId-snapshots",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "The unique identifier of the user.",
          "type": "string",
          "in": "path",
          "name": "userId"
        }
      ]
    },
    "/users/{userId}/snapshots/{snapshotId}": {
      "patch": {
        "description": "Updates the settings of a snapshot.",
        "schemes": [
          "https"
        ],
        "operationId": "PATCH_users-userId-snapshots-snapshotId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "Updates the settings of a snapshot.",
        "schemes": [
          "https"
        ],
        "operationId": "POST_users-userId-snapshots-snapshotId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "description": "Deletes a snapshot.",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_users-userId-snapshots-snapshotId",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "snapshotId"
        },
        {
          "required": true,
          "description": "The unique identifier of the user.",
          "type": "string",
          "in": "path",
          "name": "userId"
        }
      ]
    },
    "/users/{userId}/snapshots/{snapshotId}/position": {
      "put": {
        "description": "Moves a snapshot to a new position.",
        "schemes": [
          "https"
        ],
        "operationId": "PUT_users-userId-snapshots-snapshotId-position",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "snapshotId"
        },
        {
          "required": true,
          "description": "The unique identifier of the user.",
          "type": "string",
          "in": "path",
          "name": "userId"
        }
      ]
    },
    "/version": {
      "get": {
        "description": "Retrieve Log Insight version information, in the form Major.Minor.Patch-Build.",
        "schemes": [
          "http",
          "https"
        ],
        "operationId": "GET_version",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "example": {
                "releaseName": "GA",
                "version": "1.2.3-4567890"
              },
              "type": "object",
              "properties": {
                "releaseName": {
                  "type": "string"
                },
                "version": {
                  "type": "string"
                }
              },
              "required": [
                "releaseName",
                "version"
              ]
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "$ref": "#/responses/trait:internalError:500"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/vidm": {
      "get": {
        "description": "Gets the current vIDM configuration.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_vidm",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Gets the current vIDM configuration.",
            "schema": {
              "example": {
                "enabled": true,
                "hostname": "vidm.example.com",
                "port": 443,
                "tenant": "vIDMTenant",
                "redirectURL": "loginsight.example.com"
              },
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean"
                },
                "hostname": {
                  "type": "string"
                },
                "port": {
                  "type": "integer"
                },
                "tenant": {
                  "type": "string"
                },
                "redirectURL": {
                  "type": "string"
                }
              },
              "required": [
                "enabled",
                "hostname",
                "port",
                "tenant",
                "redirectURL"
              ]
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "description": "Internal error while processing the client request",
            "schema": {
              "example": {
                "errorMessage": "Failed to process request."
              },
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                }
              },
              "required": [
                "errorMessage"
              ]
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "Configures vIDM integration.",
        "schemes": [
          "https"
        ],
        "operationId": "POST_vidm",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "HTTP response code 200 indicates that connection was made successfully."
          },
          "400": {
            "$ref": "#/responses/trait:jsonRequest:400"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "403": {
            "description": "Indicates one of 2 possible cases; vIDM provided untrusted CA certificate and SSL connection was unsuccessful, or the requested action is not permitted for requesting user.\n",
            "schema": {
              "example": {
                "errorMessage": "Requested action is forbidden for the requesting user.",
                "errorCode": "VIDM_ERROR",
                "errorDetails": {
                  "errorCode": "com.vmware.loginsight.api.providers.vidm.forbidden_for_user"
                }
              },
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                },
                "errorCode": {
                  "enum": [
                    "FIELD_ERROR",
                    "TEST_ERROR",
                    "JSON_FORMAT_ERROR",
                    "LICENSE_ERROR",
                    "VSPHERE_INTEGRATION_ERROR",
                    "VROPS_INTEGRATION_ERROR",
                    "UPGRADE_ERROR",
                    "SEARCH_ERROR",
                    "AGENT_ERROR",
                    "RBAC_COMMON_ERROR",
                    "RBAC_USERS_ERROR",
                    "RBAC_GROUPS_ERROR",
                    "RBAC_ADGROUPS_ERROR",
                    "RBAC_DATASETS_ERROR",
                    "RBAC_VIDM_GROUPS_ERROR",
                    "SECURITY_ERROR",
                    "DEPLOYMENT_ERROR",
                    "SUPPORT_BUNDLE_ERROR",
                    "LOAD_BALANCER_ERROR",
                    "VIDM_ERROR",
                    "QUERY_ERROR"
                  ],
                  "type": "string"
                },
                "errorDetails": {
                  "properties": {
                    "errorCode": {
                      "type": "string"
                    },
                    "reason": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Indicates that LI was not able to connect to specified vIDM instance.\n",
            "schema": {
              "example": {
                "errorMessage": "Recieved unexpected response from the specified vIDM instance.",
                "errorCode": "VIDM_ERROR",
                "errorDetails": {
                  "errorCode": "com.vmware.loginsight.api.providers.vidm.unexpected_response"
                }
              },
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                },
                "errorCode": {
                  "enum": [
                    "FIELD_ERROR",
                    "TEST_ERROR",
                    "JSON_FORMAT_ERROR",
                    "LICENSE_ERROR",
                    "VSPHERE_INTEGRATION_ERROR",
                    "VROPS_INTEGRATION_ERROR",
                    "UPGRADE_ERROR",
                    "SEARCH_ERROR",
                    "AGENT_ERROR",
                    "RBAC_COMMON_ERROR",
                    "RBAC_USERS_ERROR",
                    "RBAC_GROUPS_ERROR",
                    "RBAC_ADGROUPS_ERROR",
                    "RBAC_DATASETS_ERROR",
                    "RBAC_VIDM_GROUPS_ERROR",
                    "SECURITY_ERROR",
                    "DEPLOYMENT_ERROR",
                    "SUPPORT_BUNDLE_ERROR",
                    "LOAD_BALANCER_ERROR",
                    "VIDM_ERROR",
                    "QUERY_ERROR"
                  ],
                  "type": "string"
                },
                "errorDetails": {
                  "properties": {
                    "errorCode": {
                      "type": "string"
                    },
                    "reason": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "description": "Internal error while processing the client request",
            "schema": {
              "example": {
                "errorMessage": "Failed to process request."
              },
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                }
              },
              "required": [
                "errorMessage"
              ]
            }
          },
          "504": {
            "description": "This response specifies that LI was unable to get timely and valid response from vIDM.\n",
            "schema": {
              "example": {
                "errorMessage": "Recieved unexpected response from the specified vIDM instance.",
                "errorCode": "VIDM_ERROR",
                "errorDetails": {
                  "errorCode": "com.vmware.loginsight.api.providers.vidm.unexpected_response"
                }
              },
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                },
                "errorCode": {
                  "enum": [
                    "FIELD_ERROR",
                    "TEST_ERROR",
                    "JSON_FORMAT_ERROR",
                    "LICENSE_ERROR",
                    "VSPHERE_INTEGRATION_ERROR",
                    "VROPS_INTEGRATION_ERROR",
                    "UPGRADE_ERROR",
                    "SEARCH_ERROR",
                    "AGENT_ERROR",
                    "RBAC_COMMON_ERROR",
                    "RBAC_USERS_ERROR",
                    "RBAC_GROUPS_ERROR",
                    "RBAC_ADGROUPS_ERROR",
                    "RBAC_DATASETS_ERROR",
                    "RBAC_VIDM_GROUPS_ERROR",
                    "SECURITY_ERROR",
                    "DEPLOYMENT_ERROR",
                    "SUPPORT_BUNDLE_ERROR",
                    "LOAD_BALANCER_ERROR",
                    "VIDM_ERROR",
                    "QUERY_ERROR"
                  ],
                  "type": "string"
                },
                "errorDetails": {
                  "properties": {
                    "errorCode": {
                      "type": "string"
                    },
                    "reason": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "enabled": true,
                "hostname": "vidm.example.com",
                "port": 443,
                "tenant": "vIDMTenant",
                "redirectURL": "loginsight.example.com",
                "username": "vIDMAdmin",
                "password": "vIDMPassword"
              },
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean"
                },
                "hostname": {
                  "type": "string"
                },
                "port": {
                  "type": "integer"
                },
                "tenant": {
                  "type": "string"
                },
                "redirectURL": {
                  "type": "string"
                },
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              },
              "required": [
                "enabled",
                "hostname",
                "redirectURL",
                "username",
                "password"
              ]
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/vidm/test": {
      "post": {
        "description": "Tests a connection with the specified vIDM instance with specified credentials.",
        "schemes": [
          "https"
        ],
        "operationId": "POST_vidm-test",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "HTTP response code 200 indicates that connection was made successfully."
          },
          "400": {
            "$ref": "#/responses/trait:jsonRequest:400"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "403": {
            "description": "Indicates one of 2 possible cases; vIDM provided untrusted CA certificate and SSL connection was unsuccessful, or the requested action is not permitted for requesting user.\n",
            "schema": {
              "example": {
                "errorMessage": "Requested action is forbidden for the requesting user.",
                "errorCode": "VIDM_ERROR",
                "errorDetails": {
                  "errorCode": "com.vmware.loginsight.api.providers.vidm.forbidden_for_user"
                }
              },
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                },
                "errorCode": {
                  "enum": [
                    "FIELD_ERROR",
                    "TEST_ERROR",
                    "JSON_FORMAT_ERROR",
                    "LICENSE_ERROR",
                    "VSPHERE_INTEGRATION_ERROR",
                    "VROPS_INTEGRATION_ERROR",
                    "UPGRADE_ERROR",
                    "SEARCH_ERROR",
                    "AGENT_ERROR",
                    "RBAC_COMMON_ERROR",
                    "RBAC_USERS_ERROR",
                    "RBAC_GROUPS_ERROR",
                    "RBAC_ADGROUPS_ERROR",
                    "RBAC_DATASETS_ERROR",
                    "RBAC_VIDM_GROUPS_ERROR",
                    "SECURITY_ERROR",
                    "DEPLOYMENT_ERROR",
                    "SUPPORT_BUNDLE_ERROR",
                    "LOAD_BALANCER_ERROR",
                    "VIDM_ERROR",
                    "QUERY_ERROR"
                  ],
                  "type": "string"
                },
                "errorDetails": {
                  "properties": {
                    "errorCode": {
                      "type": "string"
                    },
                    "reason": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Indicates that LI was not able to connect to specified vIDM instance.\n",
            "schema": {
              "example": {
                "errorMessage": "Recieved unexpected response from the specified vIDM instance.",
                "errorCode": "VIDM_ERROR",
                "errorDetails": {
                  "errorCode": "com.vmware.loginsight.api.providers.vidm.unexpected_response"
                }
              },
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                },
                "errorCode": {
                  "enum": [
                    "FIELD_ERROR",
                    "TEST_ERROR",
                    "JSON_FORMAT_ERROR",
                    "LICENSE_ERROR",
                    "VSPHERE_INTEGRATION_ERROR",
                    "VROPS_INTEGRATION_ERROR",
                    "UPGRADE_ERROR",
                    "SEARCH_ERROR",
                    "AGENT_ERROR",
                    "RBAC_COMMON_ERROR",
                    "RBAC_USERS_ERROR",
                    "RBAC_GROUPS_ERROR",
                    "RBAC_ADGROUPS_ERROR",
                    "RBAC_DATASETS_ERROR",
                    "RBAC_VIDM_GROUPS_ERROR",
                    "SECURITY_ERROR",
                    "DEPLOYMENT_ERROR",
                    "SUPPORT_BUNDLE_ERROR",
                    "LOAD_BALANCER_ERROR",
                    "VIDM_ERROR",
                    "QUERY_ERROR"
                  ],
                  "type": "string"
                },
                "errorDetails": {
                  "properties": {
                    "errorCode": {
                      "type": "string"
                    },
                    "reason": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "description": "Internal error while processing the client request",
            "schema": {
              "example": {
                "errorMessage": "Failed to process request."
              },
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                }
              },
              "required": [
                "errorMessage"
              ]
            }
          },
          "504": {
            "description": "This response specifies that LI was unable to get timely and valid response from vIDM.\n",
            "schema": {
              "example": {
                "errorMessage": "Recieved unexpected response from the specified vIDM instance.",
                "errorCode": "VIDM_ERROR",
                "errorDetails": {
                  "errorCode": "com.vmware.loginsight.api.providers.vidm.unexpected_response"
                }
              },
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                },
                "errorCode": {
                  "enum": [
                    "FIELD_ERROR",
                    "TEST_ERROR",
                    "JSON_FORMAT_ERROR",
                    "LICENSE_ERROR",
                    "VSPHERE_INTEGRATION_ERROR",
                    "VROPS_INTEGRATION_ERROR",
                    "UPGRADE_ERROR",
                    "SEARCH_ERROR",
                    "AGENT_ERROR",
                    "RBAC_COMMON_ERROR",
                    "RBAC_USERS_ERROR",
                    "RBAC_GROUPS_ERROR",
                    "RBAC_ADGROUPS_ERROR",
                    "RBAC_DATASETS_ERROR",
                    "RBAC_VIDM_GROUPS_ERROR",
                    "SECURITY_ERROR",
                    "DEPLOYMENT_ERROR",
                    "SUPPORT_BUNDLE_ERROR",
                    "LOAD_BALANCER_ERROR",
                    "VIDM_ERROR",
                    "QUERY_ERROR"
                  ],
                  "type": "string"
                },
                "errorDetails": {
                  "properties": {
                    "errorCode": {
                      "type": "string"
                    },
                    "reason": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "enabled": true,
                "hostname": "vidm.example.com",
                "port": 443,
                "tenant": "vIDMTenant",
                "redirectURL": "loginsight.example.com",
                "username": "vIDMAdmin",
                "password": "vIDMPassword"
              },
              "type": "object",
              "properties": {
                "hostname": {
                  "type": "string"
                },
                "port": {
                  "type": "integer"
                },
                "tenant": {
                  "type": "string"
                },
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              },
              "required": [
                "hostname",
                "username",
                "password"
              ]
            },
            "in": "body",
            "name": "body"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/vidm/status": {
      "get": {
        "description": "Gets the current state of connection with vIDM.",
        "schemes": [
          "https"
        ],
        "operationId": "GET_vidm-status",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "HTTP response code 200 indicates that connection was made successfully.",
            "schema": {
              "example": {
                "state": "CONNECTED"
              },
              "type": "object",
              "properties": {
                "state": {
                  "enum": [
                    "CONNECTED",
                    "DISCONNECTED",
                    "UNCONFIGURED"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "state"
              ]
            }
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          },
          "500": {
            "description": "Internal error while processing the client request",
            "schema": {
              "example": {
                "errorMessage": "Failed to process request."
              },
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                }
              },
              "required": [
                "errorMessage"
              ]
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/vropspacks": {
      "get": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "GET_vropspacks",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "POST_vropspacks",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {},
              "type": "string"
            },
            "in": "body",
            "name": "body"
          },
          {
            "default": false,
            "description": "TODO: add a description",
            "type": "boolean",
            "in": "query",
            "name": "overwrite"
          },
          {
            "default": false,
            "description": "TODO: add a description",
            "type": "boolean",
            "in": "query",
            "name": "installAlerts"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/vropspacks/{vropsPackNamespace}": {
      "get": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "GET_vropspacks-vropsPackNamespace",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "description": "TODO: add a description",
        "schemes": [
          "https"
        ],
        "operationId": "DELETE_vropspacks-vropsPackNamespace",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:techPreview:200"
          },
          "401": {
            "$ref": "#/responses/trait:authenticated:401"
          },
          "440": {
            "$ref": "#/responses/trait:authenticated:440"
          }
        },
        "parameters": [
          {
            "default": false,
            "description": "TODO: add a description",
            "type": "boolean",
            "in": "query",
            "name": "removeAlerts"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "required": true,
          "description": "TODO: add a description",
          "type": "string",
          "in": "path",
          "name": "vropsPackNamespace"
        }
      ]
    }
  }
}
